package analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList; 

parser code
{:
    private Symbol sym;
    private Symbol cur_token;
    String unrecovered = "";
    String errorSintax = "";

    public String resultado="";
    public Nodo padre;
    public int contador = 1;

    ArrayList<String> listaRecover = new ArrayList<String>();

    @Override
    public void syntax_error(Symbol sym){
       listaRecover.add("\n Error Sintactico en la Linea " + (sym.right+1) +" Columna "+ (sym.left) + ". Palabras/Simbolo " + (sym.value) + " no reconocido \n") ;
    }

    public ArrayList<String> getSintax(){
        return listaRecover;
    }

    @Override
    public void unrecovered_syntax_error(Symbol cur_token){
       unrecovered = "Error Sintactico IRRECUPERABLE en la Linea: " + (cur_token.right+1)+ " Columna "+cur_token.left+". Palabras/Simbolo " + cur_token.value + " no reconocido"; 
    }

    public String getS(){
        return unrecovered;
}
:};

/* Terminales */
terminal tk_writeline,tk_cs, tk_comentario;

/* Tipos de Datos */
terminal tk_integer, tk_boolean, tk_String;

/* Por Valor o Por Referencia */
terminal tk_byval;

/* Estructuras de Control */
terminal tk_if, tk_then, tk_elseif, tk_else, tk_for, tk_to, tk_loop, tk_while, tk_step;
terminal tk_next, tk_do;

/* Expresiones Booleanas */
terminal tk_true, tk_false;

/* Funciones */
terminal tk_function, tk_sub, tk_structure, tk_public, tk_module;

/* Operadores Aritmeticos */
terminal tk_Suma,tk_Resta,tk_Multiplicacion,tk_Division, tk_Signomod, tk_Potencia;

/*Operadores Relacionales */
terminal tk_mayorque,tk_mayorigual,tk_menorque,tk_menorigual,tk_Igual;

/* Parentesis */
terminal tk_ParentesisA, tk_ParentesisC;

/* Simbolos */
terminal tk_Coma, tk_punto;

/* palabras reservadas */
terminal tk_dim, tk_as, tk_exit, tk_readline, tk_end, tk_main, tk_Linea;


/* Valores */
terminal String tk_valorString;
terminal String tk_Identificador;
terminal String tk_Numero;

non terminal OPCPROCESO , PARAMETROS,VARIABLE ,ASIGNACIONVAL, CONSOLEWRITE, TIPOD, OPCBOOL, CUERPOFUNC, CUERPOPRO,
             CUERPOSTRUC,SINTAXIF,INIF,INELSE,INELSEIF,SINTAXELSEIF, CONDICION, SINTAXFOR,OPCRELACIONALES, AUMDEC, SINTAXWHILE,
             iDNUM, VALOR,VARIABLESTRUC,LLAMADAFUNC, IDENTIFICADORES, OPERACIONES, OPEARITMETICA, 
             IDENTIFICADORESUB, INFOR, INWHILE, OPERACIONAUX,MAIN,ENDMODULE,ENDSUB,ENDSTRUCT,ENDFUNC,OPCPROCESOAUX,MODULE,
             SINTAXIF_WHILE, INIF_WHILE, INELSE_WHILE, INELSEIF_WHILE, SINTAXELSEIF_WHILE,INFOR_WHILE, SINTAXFOR_WHILE,
             SINTAXWHILE_FOR,INWHILE_FOR, SINTAXIF_FOR, SINTAXELSEIF_FOR, INIF_FOR, INELSEIF_FOR, INELSE_FOR,FUNC,STRUCT,SUBPROCESS,
             SINTAXWHILE_FUNC, INWHILE_FUNC, SINTAXIF_FUNC, SINTAXELSEIF_FUNC, INIF_FUNC, INELSEIF_FUNC, INELSE_FUNC,INFOR_FUNC,
             SINTAXFOR_FUNC;

precedence left tk_Igual;
precedence left tk_menorque, tk_mayorque , tk_mayorigual , tk_menorque;
precedence left tk_Suma,tk_Resta;
precedence left tk_Signomod;
precedence left tk_Multiplicacion,tk_Division;
precedence right tk_Potencia;

start with MODULE;
       
MODULE ::=  tk_public tk_module tk_Identificador tk_Linea OPCPROCESO:inmod{:
                Nodo tmp = new Nodo("INICIO");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)inmod);
                parser.padre = (Nodo) tmp;
                System.out.println("OK");
                RESULT=tmp;
            :}
            | error tk_module tk_Identificador tk_Linea OPCPROCESO
            | tk_public error tk_Identificador tk_Linea OPCPROCESO
            | tk_public tk_module error tk_Linea OPCPROCESO    
            | error tk_Linea OPCPROCESO;


FUNC ::= tk_public tk_function tk_Identificador tk_ParentesisA PARAMETROS:param tk_as TIPOD tk_Linea CUERPOFUNC:infunc {: 
            Nodo tmp = new Nodo("FUNCION");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)param);
            tmp.addHijo((Nodo)infunc);
            RESULT=tmp;
        :}
        | error tk_function tk_Identificador tk_ParentesisA PARAMETROS tk_as TIPOD tk_Linea CUERPOFUNC 
        | tk_public error tk_Identificador tk_ParentesisA PARAMETROS tk_as TIPOD tk_Linea CUERPOFUNC
        | tk_public tk_function error tk_ParentesisA PARAMETROS tk_as TIPOD tk_Linea CUERPOFUNC
        | tk_public tk_function tk_Identificador error PARAMETROS tk_as TIPOD tk_Linea CUERPOFUNC
        | tk_public tk_function tk_Identificador tk_ParentesisA PARAMETROS error TIPOD tk_Linea CUERPOFUNC;

STRUCT ::= tk_public tk_structure tk_Identificador tk_Linea CUERPOSTRUC:instruct {:
            Nodo tmp = new Nodo("STRUCT");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)instruct);
            RESULT=tmp;
        :}
        | error tk_structure tk_Identificador tk_Linea CUERPOSTRUC
        | tk_public error tk_Identificador tk_Linea CUERPOSTRUC
        | tk_public tk_structure error tk_Linea CUERPOSTRUC;

SUBPROCESS ::= tk_public tk_sub tk_Identificador tk_ParentesisA PARAMETROS:param tk_Linea CUERPOPRO:inpro{:
            Nodo tmp = new Nodo("SUBPROCESS");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)param);
            tmp.addHijo((Nodo)inpro);
            RESULT=tmp;
            :}
            | error tk_sub tk_Identificador tk_ParentesisA PARAMETROS tk_Linea CUERPOPRO
            | tk_public error tk_Identificador tk_ParentesisA PARAMETROS tk_Linea CUERPOPRO
            | tk_public tk_sub error tk_ParentesisA PARAMETROS tk_Linea CUERPOPRO
            | tk_public tk_sub tk_Identificador error PARAMETROS tk_Linea CUERPOPRO;

MAIN ::= tk_sub tk_main tk_ParentesisA tk_ParentesisC tk_Linea CUERPOPRO:inmain {:
            Nodo tmp = new Nodo("MAIN");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inmain);
            RESULT=tmp;

        :}
        | error tk_main tk_ParentesisA tk_ParentesisC tk_Linea CUERPOPRO
        | tk_sub error tk_ParentesisA tk_ParentesisC tk_Linea CUERPOPRO
        | tk_sub tk_main error tk_ParentesisC tk_Linea CUERPOPRO
        | tk_sub tk_main tk_ParentesisA error tk_Linea CUERPOPRO;

ENDMODULE ::= tk_end tk_module tk_Linea {: 
         Nodo tmp = new Nodo("ENDMODULE");
         tmp.setNumNodo(parser.contador++);
         RESULT=tmp;
        :}
            | error tk_module tk_Linea
            | tk_end error tk_Linea;

ENDFUNC ::= tk_end tk_function tk_Linea {: 
            Nodo tmp = new Nodo("ENDFUNC");
            tmp.setNumNodo(parser.contador++);
            RESULT=tmp;
        :}
        | error tk_function tk_Linea
        | tk_end error tk_Linea;

ENDSTRUCT ::= tk_end tk_structure tk_Linea {: 
            Nodo tmp = new Nodo("ENDSTRUCT");
            tmp.setNumNodo(parser.contador++);
            RESULT=tmp;
        :}
        | error tk_structure tk_Linea
        | tk_end error tk_Linea;

ENDSUB ::= tk_end tk_sub tk_Linea {: 
            Nodo tmp = new Nodo("ENDSUB");
            tmp.setNumNodo(parser.contador++);
            RESULT=tmp;
        :}
        | error tk_sub tk_Linea
        | tk_end error tk_Linea;

OPCPROCESO ::= FUNC:func OPCPROCESO:inmod {:
                Nodo tmp = new Nodo("INMODULE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)func);
                tmp.addHijo((Nodo)inmod);
                RESULT=tmp;
             :}
            | STRUCT:strt OPCPROCESO:inmod {:
                Nodo tmp = new Nodo("INMODULE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)strt);
                tmp.addHijo((Nodo)inmod);
                RESULT=tmp;
             :}
            | SUBPROCESS:subpro OPCPROCESO:inmod{:
                Nodo tmp = new Nodo("INMODULE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)subpro);
                tmp.addHijo((Nodo)inmod);
                RESULT=tmp;
             :}
            | tk_comentario:com tk_Linea OPCPROCESO:inmod{:
                Nodo tmp = new Nodo("INMODULE");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Comentario");
                nd1.setValor(com.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)inmod);
                RESULT=tmp;
            :}
            | MAIN:main {:
                Nodo tmp = new Nodo("INMODULE");
                tmp.setNumNodo(parser.contador++);           
                tmp.addHijo((Nodo)main);
                RESULT=tmp;
             :}
            | error tk_Linea OPCPROCESO;

OPCPROCESOAUX ::= FUNC OPCPROCESOAUX 
            | STRUCT OPCPROCESOAUX
            | SUBPROCESS OPCPROCESOAUX
            | ENDMODULE:endm {: 
                Nodo tmp = new Nodo("INMODULE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)endm);
                RESULT=tmp;
            :}
            | error tk_Linea OPCPROCESOAUX;

CUERPOSTRUC ::= VARIABLESTRUC:varstr CUERPOSTRUC:instruct {: 
                Nodo tmp = new Nodo("INSTRUCT");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)varstr);
                tmp.addHijo((Nodo)instruct);
                RESULT=tmp;
            :}
            | tk_comentario:com tk_Linea CUERPOSTRUC:instruct {: 
                Nodo tmp = new Nodo("INSTRUCT");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Comentario");
                nd1.setValor(com.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)instruct);
                RESULT=tmp;
            :}
            | SUBPROCESS:subp CUERPOSTRUC:instruct {: 
                Nodo tmp = new Nodo("INSTRUCT");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)subp);
                tmp.addHijo((Nodo)instruct);
                RESULT=tmp;
            :}
            | ENDSTRUCT:endstruct {: 
                Nodo tmp = new Nodo("INSTRUCT");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)endstruct);
                RESULT=tmp;
            :}
            | error tk_Linea CUERPOSTRUC;

VARIABLESTRUC ::= tk_Identificador:i tk_as TIPOD:tipod tk_Linea {: 
                    Nodo tmp = new Nodo("Variable");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Identificador");
                    nd1.setValor(i.toString());
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    tmp.addHijo((Nodo)tipod);

                    RESULT = tmp;
            :}
            | tk_Identificador:i tk_as TIPOD:tipod tk_Igual VALOR:valor tk_Linea {: 
                    Nodo tmp = new Nodo("Variable");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Identificador");
                    nd1.setValor(i.toString());
                    nd1.setNumNodo(parser.contador++);
 
                    tmp.addHijo(nd1);
                    tmp.addHijo((Nodo)tipod);
                    tmp.addHijo((Nodo)valor);

                    RESULT = tmp;
            :};

CUERPOFUNC ::= SINTAXFOR_FUNC:forfun CUERPOFUNC:cuerpo {:
                Nodo tmp = new Nodo("FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)forfun);
                tmp.addHijo((Nodo)cuerpo);
                RESULT=tmp;
            :}
            | SINTAXWHILE_FUNC:whilefn CUERPOFUNC:cuerpo {:
                Nodo tmp = new Nodo("while");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)whilefn);
                tmp.addHijo((Nodo)cuerpo);
                RESULT=tmp;
            :}
            | SINTAXIF_FUNC:iffn CUERPOFUNC:cuerpo {:
                Nodo tmp = new Nodo("INFUNCTION");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)iffn);
                tmp.addHijo((Nodo)cuerpo);
                RESULT=tmp;
            :}
            | VARIABLE:varfn CUERPOFUNC:cuerpo {:
                Nodo tmp = new Nodo("VARIABLE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)varfn);
                tmp.addHijo((Nodo)cuerpo);
                RESULT=tmp;
            :}
            | LLAMADAFUNC:fun CUERPOFUNC:cuerpo{:
                Nodo tmp = new Nodo("llamada funcion");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)fun);
                tmp.addHijo((Nodo)cuerpo);
                RESULT=tmp;
            :}
            | ASIGNACIONVAL:asing CUERPOFUNC:cuerpo{:
                Nodo tmp = new Nodo("ASIGNACION");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)asing);
                tmp.addHijo((Nodo)cuerpo);
                RESULT=tmp;
            :}
            | CONSOLEWRITE CUERPOFUNC {: 
            
            :}
            | OPERACIONES:op CUERPOFUNC:cuerpo{:
                Nodo tmp = new Nodo("ASIGNACION");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)op);
                tmp.addHijo((Nodo)cuerpo);
                RESULT=tmp;
            :}
            | tk_comentario tk_Linea CUERPOFUNC {:

            :}
            | ENDFUNC{:
                Nodo tmp = new Nodo("END FUNC");
                tmp.setNumNodo(parser.contador++);
                 RESULT=tmp;
            :}
            | error tk_Linea CUERPOFUNC;

SINTAXIF_FUNC ::= tk_if CONDICION:con tk_then tk_Linea INIF_FUNC:inif tk_end:endif tk_if tk_Linea{:
            Nodo tmp = new Nodo("IF");
            tmp.setNumNodo(parser.contador++);
            

            Nodo nd1 = new Nodo("End if");
            nd1.setNumNodo(parser.contador++);
            
            tmp.addHijo((Nodo)con);
            tmp.addHijo((Nodo)inif);
            tmp.addHijo(nd1);
            RESULT=tmp;
        :};

SINTAXELSEIF_FUNC::= CONDICION tk_then tk_Linea INELSEIF_FUNC;

INIF_FUNC ::= SINTAXIF_FUNC INIF_FUNC
         | VARIABLE INIF_FUNC
         | LLAMADAFUNC INIF_FUNC
         | ASIGNACIONVAL INIF_FUNC
         | OPERACIONES INIF_FUNC
         | CONSOLEWRITE INIF_FUNC
         | SINTAXFOR_FUNC INIF_FUNC 
         | SINTAXWHILE_FUNC INIF_FUNC
         | tk_comentario tk_Linea INIF_FUNC
         | tk_comentario tk_Linea 
         | SINTAXIF_FUNC
         | VARIABLE
         | LLAMADAFUNC
         | ASIGNACIONVAL
         | CONSOLEWRITE
         | OPERACIONES
         | SINTAXFOR_FUNC
         | SINTAXWHILE_FUNC
         | tk_exit tk_function tk_Linea
         | tk_else tk_Linea INELSE_FUNC
         | tk_elseif SINTAXELSEIF_FUNC; 

INELSE_FUNC ::= SINTAXIF_FUNC INELSE_FUNC
           | VARIABLE INELSE_FUNC
           | LLAMADAFUNC INELSE_FUNC
           | ASIGNACIONVAL INELSE_FUNC 
           | OPERACIONES INELSE_FUNC 
           | CONSOLEWRITE INELSE_FUNC 
           | SINTAXFOR_FUNC  INELSE_FUNC 
           | SINTAXWHILE_FUNC  INELSE_FUNC 
           | tk_comentario tk_Linea INELSE_FUNC
           | tk_comentario tk_Linea
           | SINTAXIF_FUNC 
           | VARIABLE
           | LLAMADAFUNC
           | ASIGNACIONVAL
           | CONSOLEWRITE
           | OPERACIONES
           | SINTAXFOR_FUNC 
           | SINTAXWHILE_FUNC 
           | tk_exit tk_function tk_Linea;

INELSEIF_FUNC  ::=  SINTAXIF_FUNC INELSEIF_FUNC  
               | VARIABLE INELSEIF_FUNC 
               | LLAMADAFUNC INELSEIF_FUNC
               | ASIGNACIONVAL INELSEIF_FUNC 
               | tk_else tk_Linea INELSE_FUNC 
               | tk_elseif  SINTAXELSEIF_FUNC
               | OPERACIONES INELSEIF_FUNC 
               | CONSOLEWRITE INELSEIF_FUNC 
               | SINTAXFOR_FUNC INELSEIF_FUNC
               | SINTAXWHILE_FUNC INELSEIF_FUNC
               | tk_comentario tk_Linea INELSEIF_FUNC
               | tk_comentario tk_Linea
               | SINTAXIF_FUNC
               | VARIABLE
               | LLAMADAFUNC
               | ASIGNACIONVAL
               | CONSOLEWRITE
               | OPERACIONES
               | SINTAXFOR_FUNC
               | SINTAXWHILE_FUNC
               | tk_exit tk_function tk_Linea;

SINTAXWHILE_FUNC ::= tk_do tk_while CONDICION tk_Linea INWHILE_FUNC tk_loop tk_Linea ;

INWHILE_FUNC ::= SINTAXFOR_FUNC INWHILE_FUNC
        | SINTAXIF_FUNC INWHILE_FUNC
        | VARIABLE INWHILE_FUNC
        | LLAMADAFUNC INWHILE_FUNC
        | ASIGNACIONVAL INWHILE_FUNC
        | CONSOLEWRITE INWHILE_FUNC
        | OPERACIONES INWHILE_FUNC
        | SINTAXWHILE_FUNC INWHILE_FUNC
        | tk_comentario tk_Linea INWHILE_FUNC
        | tk_comentario tk_Linea
        | SINTAXFOR_FUNC
        | SINTAXIF_FUNC
        | VARIABLE
        | LLAMADAFUNC
        | ASIGNACIONVAL
        | CONSOLEWRITE
        | OPERACIONES
        | SINTAXWHILE_FUNC
        | tk_exit tk_do tk_Linea
        | tk_exit tk_function tk_Linea
        | tk_exit tk_for tk_Linea;

SINTAXFOR_FUNC ::= tk_for tk_Identificador tk_Igual iDNUM tk_to iDNUM tk_step AUMDEC tk_Linea INFOR_FUNC tk_next tk_Identificador tk_Linea
            | tk_for tk_Identificador tk_Igual iDNUM tk_to OPERACIONES INFOR_FUNC tk_next tk_Identificador tk_Linea;

INFOR_FUNC ::= SINTAXWHILE_FUNC INFOR_FUNC 
        | SINTAXFOR_FUNC INFOR_FUNC 
        | SINTAXIF_FUNC INFOR_FUNC 
        | VARIABLE INFOR_FUNC 
        | LLAMADAFUNC INFOR_FUNC 
        | ASIGNACIONVAL INFOR_FUNC 
        | CONSOLEWRITE INFOR_FUNC 
        | OPERACIONES INFOR_FUNC
        | tk_comentario tk_Linea INFOR_FUNC
        | tk_comentario tk_Linea
        | SINTAXWHILE_FUNC
        | SINTAXFOR_FUNC
        | SINTAXIF_FUNC
        | VARIABLE
        | LLAMADAFUNC
        | ASIGNACIONVAL
        | CONSOLEWRITE
        | OPERACIONES
        | tk_exit tk_do tk_Linea
        | tk_exit tk_function tk_Linea
        | tk_exit tk_for tk_Linea;

/* 
TERMINA CUERPO FUNCION
*/

CUERPOPRO ::= SINTAXFOR CUERPOPRO
        | SINTAXIF CUERPOPRO
        | VARIABLE:var CUERPOPRO:inmain {: 
        Nodo tmp = new Nodo("INMAIN");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            tmp.addHijo((Nodo)inmain);
            RESULT=tmp;
        :}
        | LLAMADAFUNC CUERPOPRO
        | ASIGNACIONVAL CUERPOPRO
        | CONSOLEWRITE CUERPOPRO
        | OPERACIONES CUERPOPRO   
        | SINTAXWHILE CUERPOPRO
        | tk_comentario tk_Linea CUERPOPRO
        | ENDSUB:ends OPCPROCESOAUX:inmain {:
            Nodo tmp = new Nodo("INMAIN");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ends);
            tmp.addHijo((Nodo)inmain);
            RESULT=tmp;
        :}
        | error tk_Linea CUERPOPRO;   

PARAMETROS ::= tk_byval tk_Identificador tk_as TIPOD PARAMETROS {: 
            
            :}
            | tk_Identificador tk_as TIPOD  PARAMETROS
            | tk_Coma tk_byval tk_Identificador tk_as TIPOD PARAMETROS 
            | tk_Coma tk_Identificador tk_as TIPOD  PARAMETROS
            | tk_ParentesisC ;
            
VALOR ::= OPCBOOL:opcbool {: 
            Nodo tmp = new Nodo("VALOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)opcbool);
            RESULT=tmp;
        :}| iDNUM:idnum {:
            Nodo tmp = new Nodo("VALOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)idnum);
            RESULT=tmp; 
        :}| tk_valorString:str {:
           Nodo tmp = new Nodo("ValorString");
            tmp.setNumNodo(parser.contador++);
            tmp.setValor(str.toString().replaceAll("\"", ""));
            RESULT=tmp;
        :}; 

VARIABLE ::= tk_dim tk_Identificador:i tk_as TIPOD:tipod tk_Linea {: 
                Nodo tmp = new Nodo("Variable");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)tipod);

                RESULT = tmp;
            :}|
            tk_dim tk_Identificador:i tk_as TIPOD:tipod tk_Igual VALOR:val tk_Linea {: 
                Nodo tmp = new Nodo("Variable");
               tmp.setNumNodo(parser.contador++);

               Nodo nd1 = new Nodo("Identificador");
               nd1.setValor(i.toString());
               nd1.setNumNodo(parser.contador++);

               tmp.addHijo(nd1);
               tmp.addHijo((Nodo)tipod);
               tmp.addHijo((Nodo)val);

               RESULT = tmp;
            :}|
            tk_dim tk_Identificador:i tk_as TIPOD:tipod tk_Igual LLAMADAFUNC:llamfunc {: 
               Nodo tmp = new Nodo("Variable");
               tmp.setNumNodo(parser.contador++);

               Nodo nd1 = new Nodo("Identificador");
               nd1.setValor(i.toString());
               nd1.setNumNodo(parser.contador++);

               tmp.addHijo(nd1);
               tmp.addHijo((Nodo)tipod);
               tmp.addHijo((Nodo)llamfunc);

               RESULT = tmp;
            :}|            
            tk_dim tk_Identificador:i tk_Igual VALOR:val tk_Linea {:
                Nodo tmp = new Nodo("Variable");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)val);

                RESULT = tmp;
            :}|
            tk_dim tk_Identificador:i tk_Igual OPERACIONES:oper {: 
                Nodo tmp = new Nodo("Variable");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)oper);

                RESULT = tmp;

            :}|
            tk_Identificador:i tk_punto tk_Identificador:ii tk_Igual VALOR:val tk_Linea {:
                Nodo tmp = new Nodo("Variable");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                Nodo nd2 = new Nodo("Identificador");
                nd2.setValor(ii.toString());
                nd2.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo(nd2);
                tmp.addHijo((Nodo)val);

                RESULT = tmp;
            :}; 
            
ASIGNACIONVAL ::= tk_Identificador tk_Igual VALOR tk_Linea
                  | tk_Identificador tk_Igual OPERACIONES 
                  | tk_Identificador tk_Igual LLAMADAFUNC  
                  | tk_Identificador tk_Igual tk_cs tk_punto tk_readline tk_ParentesisA tk_ParentesisC tk_Linea
                  | tk_cs tk_punto tk_readline tk_ParentesisA tk_ParentesisC tk_Linea
                  | tk_Identificador tk_punto tk_Identificador tk_Igual tk_cs tk_punto tk_readline tk_ParentesisA tk_ParentesisC tk_Linea;


OPCBOOL ::= tk_true {:
            Nodo tmp = new Nodo("True");
            tmp.setNumNodo(parser.contador++);
            RESULT = tmp;
        :}| tk_false{:
            Nodo tmp = new Nodo("False");
            tmp.setNumNodo(parser.contador++);
            RESULT = tmp;
            :};

TIPOD ::= tk_String:strg {:
            Nodo tmp = new Nodo("String");
            tmp.setValor(strg.toString());
            tmp.setNumNodo(parser.contador++);
            RESULT = tmp;
         :}|
            tk_integer:intv {: 
            Nodo tmp = new Nodo("Integer");
            tmp.setValor(intv.toString());
            tmp.setNumNodo(parser.contador++);
            RESULT = tmp; 
            :}| 
            tk_boolean:boolv {: 
            Nodo tmp = new Nodo("Boolean");
            tmp.setValor(boolv.toString());
            tmp.setNumNodo(parser.contador++);
            RESULT = tmp;
            :};
            

OPCRELACIONALES ::= tk_mayorque:mq{:
                        Nodo tmp = new Nodo("MayorQue");
                        tmp.setValor(mq.toString());
                        tmp.setNumNodo(parser.contador++);
                        RESULT = tmp;
                    :}|
                    tk_mayorigual:mi{:
                        Nodo tmp = new Nodo("MenorIgual");
                        tmp.setValor(mi.toString());
                        tmp.setNumNodo(parser.contador++);
                        RESULT = tmp;
                    :}| 
                    tk_menorque:meq {:
                        Nodo tmp = new Nodo("MenorQque");
                        tmp.setValor(meq.toString());
                        tmp.setNumNodo(parser.contador++);
                        RESULT = tmp;
                    :}|
                    tk_menorigual:mei{:
                        Nodo tmp = new Nodo("MenorIgual");
                        tmp.setValor(mei.toString());
                        tmp.setNumNodo(parser.contador++);
                        RESULT = tmp;
                    :} |
                    tk_Igual:iq{:
                        Nodo tmp = new Nodo("Igual");
                        tmp.setValor(iq.toString());
                        tmp.setNumNodo(parser.contador++);
                        RESULT = tmp;
                    :};
      
iDNUM ::= tk_Identificador:id {:
            Nodo tmp = new Nodo("Identificador");
            tmp.setValor(id.toString());
            tmp.setNumNodo(parser.contador++);
            RESULT = tmp;
        :}| tk_Numero:num {: 
            Nodo tmp = new Nodo("Numero");
            tmp.setValor(num.toString());
            tmp.setNumNodo(parser.contador++);
            RESULT = tmp;
        :}
        ;

CONDICION ::= iDNUM:id OPCRELACIONALES:opcr iDNUM:idd {:
                    Nodo tmp = new Nodo("Condicion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)opcr);
                    tmp.addHijo((Nodo)idd);
                    RESULT = tmp;
            :}
            | iDNUM:id OPCRELACIONALES:opcr OPCBOOL:opb {: 
                    Nodo tmp = new Nodo("Condicion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)opcr);
                    tmp.addHijo((Nodo)opb);
                    RESULT = tmp;
            :}
            | iDNUM:id OPCRELACIONALES:opr tk_Identificador:i tk_ParentesisA IDENTIFICADORES:ids {: 
                    Nodo tmp = new Nodo("Condicion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)opr);

                    Nodo nd1 = new Nodo("Identificador");
                    nd1.setValor(i.toString());
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    tmp.addHijo((Nodo)ids);
                    RESULT = tmp;
            :}
            | OPCBOOL:opb {: 
                    Nodo tmp = new Nodo("Condicion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)opb);
                    RESULT = tmp;
            :} 
            | iDNUM:id OPCRELACIONALES:opcr tk_ParentesisA iDNUM:idd OPEARITMETICA:opea iDNUM:iddd tk_ParentesisC {:
                    Nodo tmp = new Nodo("Condicion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)opcr);
                    tmp.addHijo((Nodo)idd);
                    tmp.addHijo((Nodo)opea);
                    tmp.addHijo((Nodo)iddd);
                    RESULT = tmp;
            :};

AUMDEC ::= tk_Resta tk_Numero 
        | tk_Numero ;

OPERACIONES ::= iDNUM:id OPEARITMETICA:signo OPERACIONAUX:operb {:
                    Nodo tmp = new Nodo("Operacion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)signo);
                    tmp.addHijo((Nodo)operb);
                    RESULT = tmp;
                 :}
                | tk_ParentesisA iDNUM:id OPEARITMETICA:signo OPERACIONAUX:operb {: 
                    Nodo tmp = new Nodo("Operacion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)signo);
                    tmp.addHijo((Nodo)operb);
                    RESULT = tmp;
                :};

OPERACIONAUX ::=  iDNUM:id OPEARITMETICA:signo OPERACIONAUX:operb {: 
                    Nodo tmp = new Nodo("InOperacion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)signo);
                    tmp.addHijo((Nodo)operb);
                    RESULT = tmp;
                :}
                | tk_ParentesisA iDNUM:id OPEARITMETICA:signo OPERACIONAUX:operb {:
                    Nodo tmp = new Nodo("InOperacion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)signo);
                    tmp.addHijo((Nodo)operb);
                    RESULT = tmp;
                :}
                | OPEARITMETICA:signo iDNUM:id OPERACIONAUX:operb {: 
                    Nodo tmp = new Nodo("InOperacion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)signo);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)operb);
                    RESULT = tmp;
                :}
                | iDNUM:id tk_ParentesisC OPERACIONAUX:operb {:
                    Nodo tmp = new Nodo("InOperacion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)operb);
                    RESULT = tmp;
                :}
                | OPEARITMETICA:signo iDNUM:id tk_Linea {: 
                    Nodo tmp = new Nodo("InOperacion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)signo);
                    tmp.addHijo((Nodo)id);
                    RESULT = tmp;
                :}
                | iDNUM:id tk_ParentesisC tk_Linea {: 
                    Nodo tmp = new Nodo("InOperacion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    RESULT = tmp;       
                :}
                | iDNUM:id tk_Linea {: 
                    Nodo tmp = new Nodo("InOperacion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    RESULT = tmp;
                :};

OPEARITMETICA ::= tk_Suma:sum{:  
                    Nodo tmp = new Nodo("Suma");
                    tmp.setValor(sum.toString());
                    tmp.setNumNodo(parser.contador++);
                    RESULT = tmp;
                :}| tk_Resta:resta {: 
                    Nodo tmp = new Nodo("Resta");
                    tmp.setValor(resta.toString());
                    tmp.setNumNodo(parser.contador++);
                    RESULT = tmp;
                :} | tk_Multiplicacion:mul {:
                    Nodo tmp = new Nodo("Multiplicacion");
                    tmp.setValor(mul.toString());
                    tmp.setNumNodo(parser.contador++);
                    RESULT = tmp;
                :}| tk_Division:div {:
                    Nodo tmp = new Nodo("Division");
                    tmp.setValor(div.toString());
                    tmp.setNumNodo(parser.contador++);
                    RESULT = tmp;
                :}| tk_Signomod:mod {:
                    Nodo tmp = new Nodo("Mod");
                    tmp.setValor(mod.toString());
                    tmp.setNumNodo(parser.contador++);
                    RESULT = tmp;
                :}| tk_Potencia:pot {:
                    Nodo tmp = new Nodo("Potencia");
                    tmp.setValor(pot.toString());
                    tmp.setNumNodo(parser.contador++);
                    RESULT = tmp;
                :} ; 

IDENTIFICADORES ::= iDNUM:a tk_Coma iDNUM:b tk_Coma iDNUM:c tk_Coma iDNUM:d tk_Coma iDNUM:e tk_ParentesisC{: 
                    Nodo tmp = new Nodo("Parametros Llamada");
                    tmp.setNumNodo(parser.contador++);

                    tmp.addHijo((Nodo)a);
                    tmp.addHijo((Nodo)b);
                    tmp.addHijo((Nodo)c);
                    tmp.addHijo((Nodo)d);
                    tmp.addHijo((Nodo)e);

                    RESULT = tmp;
                :}
                |    iDNUM:a tk_Coma iDNUM:b tk_Coma iDNUM:c tk_Coma iDNUM:d tk_ParentesisC{: 
                    Nodo tmp = new Nodo("Parametros Llamada");
                    tmp.setNumNodo(parser.contador++);

                    tmp.addHijo((Nodo)a);
                    tmp.addHijo((Nodo)b);
                    tmp.addHijo((Nodo)c);
                    tmp.addHijo((Nodo)d);

                    RESULT = tmp;
                :}
                |   iDNUM:a tk_Coma iDNUM:b tk_Coma iDNUM:c tk_ParentesisC{: 
                    Nodo tmp = new Nodo("Parametros Llamada");
                    tmp.setNumNodo(parser.contador++);

                    tmp.addHijo((Nodo)a);
                    tmp.addHijo((Nodo)b);
                    tmp.addHijo((Nodo)c);

                    RESULT = tmp;
                :}
                |   iDNUM:a tk_Coma iDNUM:b tk_ParentesisC{: 
                    Nodo tmp = new Nodo("Parametros Llamada");
                    tmp.setNumNodo(parser.contador++);

                    tmp.addHijo((Nodo)a);
                    tmp.addHijo((Nodo)b);

                    RESULT = tmp;
                :}
                | iDNUM:a tk_ParentesisC{:  
                    Nodo tmp = new Nodo("Parametros Llamada");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)a);
                    RESULT = tmp; 
                :};
               

IDENTIFICADORESUB ::=  tk_Coma iDNUM:a IDENTIFICADORESUB:idsub {: 
                        Nodo tmp = new Nodo("Parametros Llamada");
                        tmp.setNumNodo(parser.contador++);
                        tmp.addHijo((Nodo)a);
                        tmp.addHijo((Nodo)idsub);

                        RESULT = tmp;
                    :}
                    | tk_Coma iDNUM:a {: 
                        Nodo tmp = new Nodo("Parametros Llamada");
                        tmp.setNumNodo(parser.contador++);
                        tmp.addHijo((Nodo)a);
                        RESULT = tmp; 
                    :};

LLAMADAFUNC ::= tk_Identificador:i tk_ParentesisA IDENTIFICADORES:ids tk_Linea {: 
                Nodo tmp = new Nodo("LLAMADAFUNCION");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                nd1.addHijo((Nodo)ids);

                RESULT = tmp;
            :}
            | tk_Identificador:i tk_ParentesisA tk_ParentesisC tk_Linea {: 
                Nodo tmp = new Nodo("LLAMADAFUNCION");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);

                RESULT = tmp;
               :}
            | tk_Identificador:i iDNUM IDENTIFICADORESUB:idsub tk_Linea{: 
                Nodo tmp = new Nodo("LLAMADAFUNCION");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                nd1.addHijo((Nodo)idsub);

                RESULT = tmp;
               :}

            | tk_Identificador:i iDNUM:a tk_Linea {: 
                Nodo tmp = new Nodo("LLAMADAFUNCION");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)a);
                RESULT = tmp;
               :}
            | tk_Identificador:i tk_ParentesisA tk_ParentesisA IDENTIFICADORES:ids tk_ParentesisC tk_Linea {: 
                Nodo tmp = new Nodo("LLAMADAFUNCION");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                nd1.addHijo((Nodo)ids);

                RESULT = tmp;
               :}
            | tk_Identificador:i tk_ParentesisA IDENTIFICADORES:ids IDENTIFICADORESUB:idsub tk_Linea {: 
                Nodo tmp = new Nodo("LLAMADAFUNCION");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                nd1.addHijo((Nodo)ids);
                nd1.addHijo((Nodo)idsub);
                RESULT = tmp;
               :};

CONSOLEWRITE ::= tk_cs tk_punto tk_writeline tk_ParentesisA tk_valorString tk_ParentesisC tk_Linea
                | tk_cs tk_punto tk_writeline tk_ParentesisA tk_Identificador tk_ParentesisC tk_Linea;

/*
    IF ELSEIF ELSE
*/

SINTAXIF ::= tk_if CONDICION tk_then tk_Linea INIF tk_end tk_if tk_Linea;

SINTAXELSEIF::= CONDICION tk_then tk_Linea INELSEIF;

INIF ::= SINTAXIF INIF
         | VARIABLE INIF
         | LLAMADAFUNC INIF
         | ASIGNACIONVAL INIF
         | OPERACIONES INIF
         | CONSOLEWRITE INIF
         | SINTAXFOR INIF 
         | SINTAXWHILE INIF
         | tk_comentario tk_Linea INIF
         | tk_comentario tk_Linea
         | SINTAXIF
         | VARIABLE
         | LLAMADAFUNC
         | ASIGNACIONVAL
         | CONSOLEWRITE
         | OPERACIONES
         | SINTAXFOR
         | SINTAXWHILE
         | tk_else tk_Linea INELSE
         | tk_elseif SINTAXELSEIF; 

INELSE ::= SINTAXIF INELSE
           | VARIABLE INELSE
           | LLAMADAFUNC INELSE
           | ASIGNACIONVAL INELSE
           | OPERACIONES INELSE
           | CONSOLEWRITE INELSE
           | SINTAXFOR INELSE
           | SINTAXWHILE INELSE
           | tk_comentario tk_Linea INELSE
           | tk_comentario tk_Linea
           | SINTAXIF
           | VARIABLE
           | LLAMADAFUNC
           | ASIGNACIONVAL
           | CONSOLEWRITE
           | OPERACIONES
           | SINTAXFOR
           | SINTAXWHILE;

INELSEIF ::=  SINTAXIF INELSEIF 
               | VARIABLE INELSEIF 
               | LLAMADAFUNC INELSEIF 
               | ASIGNACIONVAL INELSEIF 
               | tk_else tk_Linea INELSE 
               | tk_elseif  SINTAXELSEIF 
               | OPERACIONES INELSEIF 
               | CONSOLEWRITE INELSEIF 
               | SINTAXFOR INELSEIF
               | SINTAXWHILE INELSEIF
               | tk_comentario tk_Linea INELSEIF
               | tk_comentario tk_Linea
               | SINTAXIF
               | VARIABLE
               | LLAMADAFUNC
               | ASIGNACIONVAL
               | CONSOLEWRITE
               | OPERACIONES
               | SINTAXFOR
               | SINTAXWHILE;

/*
    FOR
*/

SINTAXFOR ::= tk_for tk_Identificador tk_Igual iDNUM tk_to iDNUM tk_step AUMDEC tk_Linea INFOR tk_next tk_Identificador tk_Linea
            | tk_for tk_Identificador tk_Igual iDNUM tk_to OPERACIONES INFOR tk_next tk_Identificador tk_Linea;

INFOR ::=  SINTAXFOR INFOR
        | SINTAXIF_FOR INFOR
        | VARIABLE INFOR
        | LLAMADAFUNC INFOR
        | ASIGNACIONVAL INFOR
        | CONSOLEWRITE INFOR
        | OPERACIONES INFOR   
        | SINTAXWHILE_FOR INFOR
        | tk_comentario tk_Linea INFOR
        | tk_comentario tk_Linea
        | SINTAXFOR
        | SINTAXIF_FOR
        | VARIABLE
        | LLAMADAFUNC
        | ASIGNACIONVAL
        | CONSOLEWRITE
        | OPERACIONES
        | SINTAXWHILE_FOR
        | tk_exit tk_for tk_Linea;

SINTAXIF_FOR::= tk_if CONDICION tk_then tk_Linea INIF_FOR tk_end tk_if tk_Linea;

SINTAXELSEIF_FOR ::= CONDICION tk_then tk_Linea INELSEIF_FOR;

INIF_FOR ::= SINTAXIF_FOR INIF_FOR
         | VARIABLE INIF_FOR
         | LLAMADAFUNC INIF_FOR
         | ASIGNACIONVAL INIF_FOR
         | OPERACIONES INIF_FOR
         | CONSOLEWRITE INIF_FOR
         | SINTAXFOR INIF_FOR
         | SINTAXWHILE_FOR INIF_FOR
         | tk_comentario tk_Linea INIF_FOR
         | tk_comentario tk_Linea
         | SINTAXIF_FOR
         | VARIABLE
         | LLAMADAFUNC
         | ASIGNACIONVAL
         | CONSOLEWRITE
         | OPERACIONES
         | SINTAXFOR
         | SINTAXWHILE_FOR
         | tk_exit tk_for tk_Linea
         | tk_else tk_Linea INELSE_FOR
         | tk_elseif SINTAXELSEIF_FOR; 

INELSEIF_FOR ::=  SINTAXIF_FOR INELSEIF_FOR 
               | VARIABLE INELSEIF_FOR
               | LLAMADAFUNC INELSEIF_FOR 
               | ASIGNACIONVAL INELSEIF_FOR 
               | tk_else tk_Linea INELSE_FOR 
               | tk_elseif  SINTAXELSEIF_FOR 
               | OPERACIONES INELSEIF_FOR 
               | CONSOLEWRITE INELSEIF_FOR 
               | SINTAXFOR INELSEIF_FOR
               | SINTAXWHILE_FOR INELSEIF_FOR
               | tk_comentario tk_Linea INELSEIF_FOR
               | tk_comentario tk_Linea
               | SINTAXIF_FOR
               | VARIABLE
               | LLAMADAFUNC
               | ASIGNACIONVAL
               | CONSOLEWRITE
               | OPERACIONES
               | SINTAXFOR
               | SINTAXWHILE_FOR
               | tk_exit tk_for tk_Linea;

INELSE_FOR ::= SINTAXIF_FOR INELSE_FOR
           | VARIABLE INELSE_FOR
           | LLAMADAFUNC INELSE_FOR
           | ASIGNACIONVAL INELSE_FOR
           | OPERACIONES INELSE_FOR
           | CONSOLEWRITE INELSE_FOR
           | SINTAXFOR INELSE_FOR
           | SINTAXWHILE_FOR INELSE_FOR
           | tk_comentario tk_Linea INELSE_FOR
           | tk_comentario tk_Linea
           | SINTAXIF_FOR
           | VARIABLE
           | LLAMADAFUNC
           | ASIGNACIONVAL
           | CONSOLEWRITE
           | OPERACIONES
           | SINTAXFOR
           | SINTAXWHILE_FOR
           | tk_exit tk_for tk_Linea;

SINTAXWHILE_FOR ::= tk_do tk_while CONDICION tk_Linea INWHILE_FOR tk_loop tk_Linea ;

INWHILE_FOR ::= SINTAXFOR INWHILE_FOR
        | VARIABLE INWHILE_FOR
        | LLAMADAFUNC INWHILE_FOR
        | ASIGNACIONVAL INWHILE_FOR
        | CONSOLEWRITE INWHILE_FOR
        | OPERACIONES INWHILE_FOR
        | SINTAXWHILE_FOR INWHILE_FOR
        | SINTAXIF_FOR INWHILE_FOR
        | tk_comentario tk_Linea INWHILE_FOR
        | tk_comentario tk_Linea
        | SINTAXFOR
        | VARIABLE
        | LLAMADAFUNC
        | ASIGNACIONVAL
        | CONSOLEWRITE
        | OPERACIONES
        | SINTAXIF_FOR
        | SINTAXWHILE_FOR
        | tk_exit tk_do tk_Linea
        | tk_exit tk_for tk_Linea;

/*
    DO WHILE
*/

SINTAXIF_WHILE ::= tk_if CONDICION tk_then tk_Linea INIF_WHILE tk_end tk_if tk_Linea;

SINTAXELSEIF_WHILE ::= CONDICION tk_then tk_Linea INELSEIF_WHILE;

INIF_WHILE ::= SINTAXIF_WHILE INIF_WHILE
         | VARIABLE INIF_WHILE
         | LLAMADAFUNC INIF_WHILE
         | ASIGNACIONVAL INIF_WHILE
         | OPERACIONES INIF_WHILE
         | CONSOLEWRITE INIF_WHILE
         | SINTAXFOR_WHILE INIF_WHILE
         | SINTAXWHILE INIF_WHILE
         | tk_comentario tk_Linea INIF_WHILE
         | tk_comentario tk_Linea
         | SINTAXIF_WHILE
         | VARIABLE
         | LLAMADAFUNC
         | ASIGNACIONVAL
         | CONSOLEWRITE
         | OPERACIONES
         | SINTAXFOR_WHILE
         | SINTAXWHILE
         | tk_exit tk_do tk_Linea
         | tk_else tk_Linea INELSE_WHILE
         | tk_elseif SINTAXELSEIF_WHILE; 

INELSEIF_WHILE ::= SINTAXWHILE INELSEIF_WHILE 
               | SINTAXIF_WHILE INELSEIF_WHILE 
               | VARIABLE INELSEIF_WHILE 
               | LLAMADAFUNC INELSEIF_WHILE 
               | ASIGNACIONVAL INELSEIF_WHILE 
               | tk_else tk_Linea INELSE_WHILE 
               | tk_elseif  SINTAXELSEIF_WHILE
               | OPERACIONES INELSEIF_WHILE 
               | CONSOLEWRITE INELSEIF_WHILE 
               | SINTAXFOR_WHILE INELSEIF_WHILE
               | tk_comentario tk_Linea INELSEIF_WHILE
               | tk_comentario tk_Linea
               | SINTAXWHILE
               | SINTAXIF_WHILE
               | VARIABLE
               | LLAMADAFUNC
               | ASIGNACIONVAL
               | CONSOLEWRITE
               | OPERACIONES
               | SINTAXFOR_WHILE
               | tk_exit tk_do tk_Linea;

INELSE_WHILE ::= SINTAXWHILE INELSE_WHILE
           | SINTAXIF_WHILE INELSE_WHILE
           | VARIABLE INELSE_WHILE
           | LLAMADAFUNC INELSE_WHILE
           | ASIGNACIONVAL INELSE_WHILE
           | OPERACIONES INELSE_WHILE
           | CONSOLEWRITE INELSE_WHILE
           | SINTAXFOR_WHILE INELSE_WHILE
           | tk_comentario tk_Linea INELSE_WHILE
           | tk_comentario tk_Linea
           | SINTAXWHILE
           | SINTAXIF_WHILE
           | VARIABLE
           | LLAMADAFUNC
           | ASIGNACIONVAL
           | CONSOLEWRITE
           | OPERACIONES
           | SINTAXFOR_WHILE
           | tk_exit tk_do tk_Linea;

SINTAXFOR_WHILE ::= tk_for tk_Identificador tk_Igual iDNUM tk_to iDNUM tk_step AUMDEC tk_Linea INFOR_WHILE tk_next tk_Identificador tk_Linea
            | tk_for tk_Identificador tk_Igual iDNUM tk_to OPERACIONES INFOR_WHILE tk_next tk_Identificador tk_Linea;

INFOR_WHILE ::= SINTAXWHILE INFOR_WHILE
        | SINTAXFOR_WHILE INFOR_WHILE 
        | SINTAXIF_WHILE INFOR_WHILE 
        | VARIABLE INFOR_WHILE 
        | LLAMADAFUNC INFOR_WHILE 
        | ASIGNACIONVAL INFOR_WHILE 
        | CONSOLEWRITE INFOR_WHILE 
        | OPERACIONES INFOR_WHILE 
        | tk_comentario tk_Linea INFOR_WHILE
        | tk_comentario tk_Linea
        | SINTAXWHILE
        | SINTAXFOR_WHILE
        | SINTAXIF_WHILE
        | VARIABLE
        | LLAMADAFUNC
        | ASIGNACIONVAL
        | CONSOLEWRITE
        | OPERACIONES
        | tk_exit tk_do tk_Linea
        | tk_exit tk_for tk_Linea;

SINTAXWHILE ::= tk_do tk_while CONDICION tk_Linea INWHILE tk_loop tk_Linea ;

INWHILE ::= SINTAXWHILE INWHILE
        | SINTAXFOR_WHILE INWHILE
        | SINTAXIF_WHILE INWHILE
        | VARIABLE INWHILE
        | LLAMADAFUNC INWHILE
        | ASIGNACIONVAL INWHILE
        | CONSOLEWRITE INWHILE
        | OPERACIONES INWHILE
        | tk_comentario tk_Linea INWHILE
        | tk_comentario tk_Linea
        | SINTAXWHILE
        | SINTAXFOR_WHILE
        | SINTAXIF_WHILE
        | VARIABLE
        | LLAMADAFUNC
        | ASIGNACIONVAL
        | CONSOLEWRITE
        | OPERACIONES
        | tk_exit tk_do tk_Linea;