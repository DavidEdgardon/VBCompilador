package analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList; 

parser code
{:
    private Symbol sym;
    private Symbol cur_token;
    String unrecovered = "";
    String errorSintax = "";

    public String resultado="";
    public Nodo padre;
    public int contador = 1;

    ArrayList<String> listaRecover = new ArrayList<String>();

    @Override
    public void syntax_error(Symbol sym){
       listaRecover.add("\n Error Sintactico en la Linea " + (sym.right+1) +" Columna "+ (sym.left) + ". Palabras/Simbolo " + (sym.value) + " no reconocido \n") ;
    }

    public ArrayList<String> getSintax(){
        return listaRecover;
    }

    @Override
    public void unrecovered_syntax_error(Symbol cur_token){
       unrecovered = "Error Sintactico IRRECUPERABLE en la Linea: " + (cur_token.right+1)+ " Columna "+cur_token.left+". Palabras/Simbolo " + cur_token.value + " no reconocido"; 
    }

    public String getS(){
        return unrecovered;
}
:};

/* Terminales */
terminal tk_writeline,tk_cs, tk_comentario;

/* Tipos de Datos */
terminal tk_integer, tk_boolean, tk_String;

/* Por Valor o Por Referencia */
terminal tk_byval;

/* Estructuras de Control */
terminal tk_if, tk_then, tk_elseif, tk_else, tk_for, tk_to, tk_loop, tk_while, tk_step;
terminal tk_next, tk_do;

/* Expresiones Booleanas */
terminal tk_true, tk_false;

/* Funciones */
terminal tk_function, tk_sub, tk_structure, tk_public, tk_module;

/* Operadores Aritmeticos */
terminal tk_Suma,tk_Resta,tk_Multiplicacion,tk_Division, tk_Signomod, tk_Potencia;

/*Operadores Relacionales */
terminal tk_mayorque,tk_mayorigual,tk_menorque,tk_menorigual,tk_Igual;

/* Parentesis */
terminal tk_ParentesisA, tk_ParentesisC;

/* Simbolos */
terminal tk_Coma, tk_punto;

/* palabras reservadas */
terminal tk_dim, tk_as, tk_exit, tk_readline, tk_end, tk_main, tk_Linea;


/* Valores */
terminal String tk_valorString;
terminal String tk_Identificador;
terminal String tk_Numero;

non terminal OPCPROCESO , PARAMETROS,VARIABLE ,ASIGNACIONVAL, CONSOLEWRITE, TIPOD, OPCBOOL, CUERPOFUNC, CUERPOPRO,
             CUERPOSTRUC,SINTAXIF,INIF,INELSE,INELSEIF,SINTAXELSEIF, CONDICION, SINTAXFOR,OPCRELACIONALES, AUMDEC, SINTAXWHILE,
             iDNUM, VALOR,VARIABLESTRUC,LLAMADAFUNC, IDENTIFICADORES, OPERACIONES, OPEARITMETICA, CUERPOMAIN, //OPCPROCESOAUX
             IDENTIFICADORESUB, INFOR, INWHILE, OPERACIONAUX,MAIN,ENDMODULE,ENDSUB,ENDSTRUCT,ENDFUNC,MODULE,
             SINTAXIF_WHILE, INIF_WHILE, INELSE_WHILE, INELSEIF_WHILE, SINTAXELSEIF_WHILE,INFOR_WHILE, SINTAXFOR_WHILE,
             SINTAXWHILE_FOR,INWHILE_FOR, SINTAXIF_FOR, SINTAXELSEIF_FOR, INIF_FOR, INELSEIF_FOR, INELSE_FOR,FUNC,STRUCT,SUBPROCESS,
             SINTAXWHILE_FUNC, INWHILE_FUNC, SINTAXIF_FUNC, SINTAXELSEIF_FUNC, INIF_FUNC, INELSEIF_FUNC, INELSE_FUNC,INFOR_FUNC,
             SINTAXFOR_FUNC;

precedence left tk_Igual;
precedence left tk_menorque, tk_mayorque , tk_mayorigual , tk_menorque;
precedence left tk_Suma,tk_Resta;
precedence left tk_Signomod;
precedence left tk_Multiplicacion,tk_Division;
precedence right tk_Potencia;

start with MODULE;
       
MODULE ::=  tk_public tk_module tk_Identificador tk_Linea OPCPROCESO:inmod ENDMODULE:end {:
                Nodo tmp = new Nodo("MODULE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)inmod);
                tmp.addHijo((Nodo)end);
                parser.padre = (Nodo) tmp;
                System.out.println("OK");
                RESULT=tmp;
            :}
            | error tk_module tk_Identificador tk_Linea OPCPROCESO ENDMODULE
            | tk_public error tk_Identificador tk_Linea OPCPROCESO ENDMODULE
            | tk_public tk_module error tk_Linea OPCPROCESO ENDMODULE   
            | error tk_Linea OPCPROCESO;


FUNC ::= tk_public tk_function tk_Identificador tk_ParentesisA PARAMETROS:param tk_ParentesisC tk_as TIPOD tk_Linea CUERPOFUNC:infunc {: 
            Nodo tmp = new Nodo("FUNCION");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)param);
            tmp.addHijo((Nodo)infunc);
            RESULT=tmp;
        :}
        | error tk_function tk_Identificador tk_ParentesisA PARAMETROS tk_ParentesisC tk_as TIPOD tk_Linea CUERPOFUNC 
        | tk_public error tk_Identificador tk_ParentesisA PARAMETROS  tk_ParentesisC tk_as TIPOD tk_Linea CUERPOFUNC
        | tk_public tk_function error tk_ParentesisA PARAMETROS tk_as tk_ParentesisC TIPOD tk_Linea CUERPOFUNC
        | tk_public tk_function tk_Identificador error PARAMETROS tk_as tk_ParentesisC TIPOD tk_Linea CUERPOFUNC
        | tk_public tk_function tk_Identificador tk_ParentesisA PARAMETROS tk_ParentesisC error TIPOD tk_Linea CUERPOFUNC;

STRUCT ::= tk_public tk_structure tk_Identificador tk_Linea CUERPOSTRUC:instruct {:
            Nodo tmp = new Nodo("STRUCT");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)instruct);
            RESULT=tmp;
        :}
        | error tk_structure tk_Identificador tk_Linea CUERPOSTRUC
        | tk_public error tk_Identificador tk_Linea CUERPOSTRUC
        | tk_public tk_structure error tk_Linea CUERPOSTRUC;

SUBPROCESS ::= tk_public tk_sub tk_Identificador tk_ParentesisA PARAMETROS:param tk_Linea CUERPOPRO:inpro{:
            Nodo tmp = new Nodo("SUBPROCESS");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)param);
            tmp.addHijo((Nodo)inpro);
            RESULT=tmp;
            :}
            | error tk_sub tk_Identificador tk_ParentesisA PARAMETROS tk_Linea CUERPOPRO
            | tk_public error tk_Identificador tk_ParentesisA PARAMETROS tk_Linea CUERPOPRO
            | tk_public tk_sub error tk_ParentesisA PARAMETROS tk_Linea CUERPOPRO
            | tk_public tk_sub tk_Identificador error PARAMETROS tk_Linea CUERPOPRO;

MAIN ::= tk_sub tk_main tk_ParentesisA tk_ParentesisC tk_Linea CUERPOMAIN:inmain {:
            Nodo tmp = new Nodo("MAIN");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inmain);
            RESULT=tmp;

        :}
        | error tk_main tk_ParentesisA tk_ParentesisC tk_Linea CUERPOMAIN
        | tk_sub error tk_ParentesisA tk_ParentesisC tk_Linea CUERPOMAIN
        | tk_sub tk_main error tk_ParentesisC tk_Linea CUERPOMAIN
        | tk_sub tk_main tk_ParentesisA error tk_Linea CUERPOMAIN;

ENDMODULE ::= tk_end tk_module tk_Linea {: 
         Nodo tmp = new Nodo("ENDMODULE");
         tmp.setNumNodo(parser.contador++);
         RESULT=tmp;
        :}
            | error tk_module tk_Linea
            | tk_end error tk_Linea;

ENDFUNC ::= tk_end tk_function tk_Linea {: 
            Nodo tmp = new Nodo("ENDFUNC");
            tmp.setNumNodo(parser.contador++);
            RESULT=tmp;
        :}
        | error tk_function tk_Linea
        | tk_end error tk_Linea;

ENDSTRUCT ::= tk_end tk_structure tk_Linea {: 
            Nodo tmp = new Nodo("ENDSTRUCT");
            tmp.setNumNodo(parser.contador++);
            RESULT=tmp;
        :}
        | error tk_structure tk_Linea
        | tk_end error tk_Linea;

ENDSUB ::= tk_end tk_sub tk_Linea {: 
            Nodo tmp = new Nodo("ENDSUB");
            tmp.setNumNodo(parser.contador++);
            RESULT=tmp;
        :}
        | error tk_sub tk_Linea
        | tk_end error tk_Linea;

OPCPROCESO ::= FUNC:func OPCPROCESO:inmod {:
                Nodo tmp = new Nodo("INMODULE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)func);
                tmp.addHijo((Nodo)inmod);
                RESULT=tmp;
             :}
            | STRUCT:strt OPCPROCESO:inmod {:
                Nodo tmp = new Nodo("INMODULE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)strt);
                tmp.addHijo((Nodo)inmod);
                RESULT=tmp;
             :}
            | SUBPROCESS:subpro OPCPROCESO:inmod{:
                Nodo tmp = new Nodo("INMODULE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)subpro);
                tmp.addHijo((Nodo)inmod);
                RESULT=tmp;
             :}
            | tk_comentario:com tk_Linea OPCPROCESO:inmod{:
                Nodo tmp = new Nodo("INMODULE");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Comentario");
                nd1.setValor(com.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)inmod);
                RESULT=tmp;
            :}
            | MAIN:main {:
                Nodo tmp = new Nodo("INMODULE");
                tmp.setNumNodo(parser.contador++);           
                tmp.addHijo((Nodo)main);
                RESULT=tmp;
             :}
            | error tk_Linea OPCPROCESO;
/*
OPCPROCESOAUX ::= FUNC:func OPCPROCESOAUX:opcaux {:
                Nodo tmp = new Nodo("INMODULE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)func);
                tmp.addHijo((Nodo)opcaux);
                RESULT=tmp;
             :}
            | STRUCT:struct OPCPROCESOAUX:opcaux{:
                Nodo tmp = new Nodo("INMODULE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)struct);
                tmp.addHijo((Nodo)opcaux);
                RESULT=tmp;
             :}
            | SUBPROCESS:subpro OPCPROCESOAUX:opcaux{:
                Nodo tmp = new Nodo("INMODULE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)subpro);
                tmp.addHijo((Nodo)opcaux);
                RESULT=tmp;
             :}
            | ENDMODULE:endm {: 
                Nodo tmp = new Nodo("INMODULE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)endm);
                RESULT=tmp;
            :}
            | error tk_Linea OPCPROCESOAUX;
*/

CUERPOSTRUC ::= VARIABLESTRUC:varstr CUERPOSTRUC:instruct {: 
                Nodo tmp = new Nodo("INSTRUCT");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)varstr);
                tmp.addHijo((Nodo)instruct);
                RESULT=tmp;
            :}
            | tk_comentario:com tk_Linea CUERPOSTRUC:instruct {: 
                Nodo tmp = new Nodo("INSTRUCT");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Comentario");
                nd1.setValor(com.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)instruct);
                RESULT=tmp;
            :}
            | SUBPROCESS:subp CUERPOSTRUC:instruct {: 
                Nodo tmp = new Nodo("INSTRUCT");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)subp);
                tmp.addHijo((Nodo)instruct);
                RESULT=tmp;
            :}
            | ENDSTRUCT:endstruct {: 
                Nodo tmp = new Nodo("INSTRUCT");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)endstruct);
                RESULT=tmp;
            :}
            | error tk_Linea CUERPOSTRUC;

VARIABLESTRUC ::= tk_Identificador:i tk_as TIPOD:tipod tk_Linea {: 
                    Nodo tmp = new Nodo("Variable");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Identificador");
                    nd1.setValor(i.toString());
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    tmp.addHijo((Nodo)tipod);

                    RESULT = tmp;
            :}
            | tk_Identificador:i tk_as TIPOD:tipod tk_Igual VALOR:valor tk_Linea {: 
                    Nodo tmp = new Nodo("Variable");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Identificador");
                    nd1.setValor(i.toString());
                    nd1.setNumNodo(parser.contador++);
 
                    tmp.addHijo(nd1);
                    tmp.addHijo((Nodo)tipod);
                    tmp.addHijo((Nodo)valor);

                    RESULT = tmp;
            :};

CUERPOFUNC ::= SINTAXFOR_FUNC:forfun CUERPOFUNC:infunc {:
                Nodo tmp = new Nodo("INFUNCTION");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)forfun);
                tmp.addHijo((Nodo)infunc);
                RESULT=tmp;
            :}
            | SINTAXWHILE_FUNC:whilefn CUERPOFUNC:infunc {:
                Nodo tmp = new Nodo("INFUNCTION");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)whilefn);
                tmp.addHijo((Nodo)infunc);
                RESULT=tmp;
            :}
            | SINTAXIF_FUNC:iffn CUERPOFUNC:infunc {:
                Nodo tmp = new Nodo("INFUNCTION");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)iffn);
                tmp.addHijo((Nodo)infunc);
                RESULT=tmp;
            :}
            | VARIABLE:varfn CUERPOFUNC:infunc {:
                Nodo tmp = new Nodo("INFUNCTION");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)varfn);
                tmp.addHijo((Nodo)infunc);
                RESULT=tmp;
            :}
            | LLAMADAFUNC:llamfun CUERPOFUNC:infunc{:
                Nodo tmp = new Nodo("INFUNCTION");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)llamfun);
                tmp.addHijo((Nodo)infunc);
                RESULT=tmp;
            :}
            | ASIGNACIONVAL:asing CUERPOFUNC:infunc{:
                Nodo tmp = new Nodo("INFUNCTION");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)asing);
                tmp.addHijo((Nodo)infunc);
                RESULT=tmp;
            :}
            | CONSOLEWRITE:cs CUERPOFUNC:infunc{: 
                Nodo tmp = new Nodo("INFUNCTION");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)cs);
                tmp.addHijo((Nodo)infunc);
                RESULT=tmp;
            :}
            | OPERACIONES:op CUERPOFUNC:infunc{:
                Nodo tmp = new Nodo("INFUNCTION");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)op);
                tmp.addHijo((Nodo)infunc);
                RESULT=tmp;
            :}
            | tk_comentario:com tk_Linea CUERPOFUNC:infunc {: 
                Nodo tmp = new Nodo("INFUNCTION");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Comentario");
                nd1.setValor(com.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)infunc);
                RESULT=tmp;
            :}
            | ENDFUNC:endf{:
                Nodo tmp = new Nodo("INFUNCTION");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)endf);
                RESULT=tmp;
            :}
            | error tk_Linea CUERPOFUNC;

SINTAXIF_FUNC ::= tk_if CONDICION:con tk_then tk_Linea INIF_FUNC:inif tk_end:endif tk_if tk_Linea{:
            Nodo tmp = new Nodo("IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("End if");
            nd1.setNumNodo(parser.contador++);
            
            tmp.addHijo((Nodo)con);
            tmp.addHijo((Nodo)inif);
            tmp.addHijo(nd1);
            RESULT=tmp;
        :};

SINTAXELSEIF_FUNC::= CONDICION:con tk_then tk_Linea INELSEIF_FUNC:elsef{:
            Nodo tmp = new Nodo("ELSE IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("End if");
            nd1.setNumNodo(parser.contador++);
            
            tmp.addHijo((Nodo)con);
            tmp.addHijo((Nodo)elsef);
            tmp.addHijo(nd1);
            RESULT=tmp;
        :};

INIF_FUNC ::= SINTAXIF_FUNC:sxiffunc INIF_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxiffunc);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}
         | VARIABLE:var INIF_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}
         | LLAMADAFUNC:llamfunc INIF_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)llamfunc);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}
         | ASIGNACIONVAL:asigval INIF_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)asigval);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}
         | OPERACIONES:oper INIF_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)oper);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}
         | CONSOLEWRITE:cs INIF_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}
         | SINTAXFOR_FUNC:fr INIF_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)fr);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :} 
         | SINTAXWHILE_FUNC INIF_FUNC:inifunc
         | tk_comentario:com tk_Linea INIF_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
            :}
         | tk_comentario:com tk_Linea {:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            :}
         | SINTAXIF_FUNC:sxiffunc{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxiffunc);
            RESULT=tmp;
          :}
         | VARIABLE:var{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            RESULT=tmp;
          :}
         | LLAMADAFUNC:llamfunc{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)llamfunc);
            RESULT=tmp;
          :}
         | ASIGNACIONVAL:asigval{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)asigval);
            RESULT=tmp;
          :}
         | CONSOLEWRITE:cs{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            RESULT=tmp;
          :}
         | OPERACIONES:oper{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)oper);
            RESULT=tmp;
          :}
         | SINTAXFOR_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :} 
         | SINTAXWHILE_FUNC
         | tk_exit:exit tk_function tk_Linea{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Exit Function");
            nd1.setValor(exit.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            :}
         | tk_else:el1 tk_Linea INELSE_FUNC:inifunc{:
                    Nodo tmp = new Nodo("IN IF");
                    tmp.setNumNodo(parser.contador++);
                    Nodo nd1 = new Nodo("Else");
                    nd1.setNumNodo(parser.contador++);
                    tmp.addHijo(nd1);           
                    nd1.addHijo((Nodo)inifunc);           
                    RESULT=tmp;
          :}   
         | tk_elseif:eif SINTAXELSEIF_FUNC:inifunc{:
                    Nodo tmp = new Nodo("IN IF");
                    tmp.setNumNodo(parser.contador++);
                    Nodo nd1 = new Nodo("ELSE IF");
                    nd1.setNumNodo(parser.contador++);
                    tmp.addHijo(nd1);           
                    nd1.addHijo((Nodo)inifunc);           
                    RESULT=tmp;
          :};    

INELSE_FUNC ::= SINTAXIF_FUNC:sxiffunc INELSE_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxiffunc);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}
           | VARIABLE:var INELSE_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}
           | LLAMADAFUNC:llamada INELSE_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)llamada);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}
           | ASIGNACIONVAL:asig INELSE_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)asig);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :} 
           | OPERACIONES:ope INELSE_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ope);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :} 
           | CONSOLEWRITE:cs INELSE_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :} 
           | SINTAXFOR_FUNC:fr  INELSE_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN ELSE ");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)fr);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}  
           | SINTAXWHILE_FUNC:inw  INELSE_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN ELSE ");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inw);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}   
           | tk_comentario:com tk_Linea INELSE_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN ELSE ");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
            :}
           | tk_comentario:com tk_Linea{:
            Nodo tmp = new Nodo("IN ELSE ");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            :}
           | SINTAXIF_FUNC:ifn{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ifn);
            RESULT=tmp;
          :} 
           | VARIABLE:ifn{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ifn);
            RESULT=tmp;
          :} 
           | LLAMADAFUNC:ifn{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ifn);
            RESULT=tmp;
          :} 
           | ASIGNACIONVAL:ifn{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ifn);
            RESULT=tmp;
          :} 
           | CONSOLEWRITE:ifn{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ifn);
            RESULT=tmp;
          :} 
           | OPERACIONES:ifn{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ifn);
            RESULT=tmp;
          :} 
           | SINTAXFOR_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN ELSE ");
            tmp.setNumNodo(parser.contador++);
            
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}  
           | SINTAXWHILE_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN ELSE ");
            tmp.setNumNodo(parser.contador++);
            
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}   
           | tk_exit:exit tk_function tk_Linea{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Exit Function");
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            :};

INELSEIF_FUNC  ::=  SINTAXIF_FUNC:iif INELSEIF_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)iif);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}  
               | VARIABLE:var INELSEIF_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}   
               | LLAMADAFUNC:llamada INELSEIF_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)llamada);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}  
               | ASIGNACIONVAL:asig INELSEIF_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)asig);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}  
               | tk_else:els tk_Linea INELSE_FUNC:inifunc{:
                    Nodo tmp = new Nodo("IN ELSE IF");
                    tmp.setNumNodo(parser.contador++);
                    Nodo nd1 = new Nodo("ELSE");
                    nd1.setNumNodo(parser.contador++);
                    tmp.addHijo(nd1);           
                    nd1.addHijo((Nodo)inifunc);           
                    RESULT=tmp;
          :}   
               | tk_elseif:elsif  SINTAXELSEIF_FUNC:inifunc{:
                    Nodo tmp = new Nodo("IN ELSE IF");
                    tmp.setNumNodo(parser.contador++);
                    Nodo nd1 = new Nodo("ELSE IF");
                    nd1.setNumNodo(parser.contador++);
                    tmp.addHijo(nd1);           
                    nd1.addHijo((Nodo)inifunc);           
                    RESULT=tmp;
          :}   
               | OPERACIONES:op INELSEIF_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)op);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}   
               | CONSOLEWRITE:cs INELSEIF_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}   
               | SINTAXFOR_FUNC:fr INELSEIF_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)fr);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :} 
               | SINTAXWHILE_FUNC:inw INELSEIF_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inw);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :} 
               | tk_comentario:com tk_Linea INELSEIF_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
            :}
               | tk_comentario:com tk_Linea{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            :}
               | SINTAXIF_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}  
               | VARIABLE:inifunc{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}  
               | LLAMADAFUNC:inifunc{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}  
               | ASIGNACIONVAL:inifunc{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
           
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}  
               | CONSOLEWRITE:inifunc{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
          
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}  
               | OPERACIONES:inifunc{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}  
               | SINTAXFOR_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}  
               | SINTAXWHILE_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}  
               | tk_exit tk_function tk_Linea{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Exit Function");
            
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            :};

SINTAXWHILE_FUNC ::= tk_do tk_while CONDICION:con tk_Linea INWHILE_FUNC:inwhile tk_loop tk_Linea{:
            Nodo tmp = new Nodo("WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Loop");
            nd1.setNumNodo(parser.contador++);
        
            tmp.addHijo((Nodo)con);
            tmp.addHijo((Nodo)inwhile);
            tmp.addHijo(nd1);
            RESULT=tmp;    
        :};

INWHILE_FUNC ::= SINTAXFOR_FUNC:forf INWHILE_FUNC:inwhile{:
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)forf);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          :}  
        | SINTAXIF_FUNC:iff INWHILE_FUNC:inwhile{:
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)iff);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          :}
        | VARIABLE:var INWHILE_FUNC:inwhile{:
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          :}
        | LLAMADAFUNC:llamada INWHILE_FUNC:inwhile{:
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)llamada);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          :}
        | ASIGNACIONVAL:asig INWHILE_FUNC:inwhile{:
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)asig);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          :}
        | CONSOLEWRITE:cs INWHILE_FUNC:inwhile{:
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          :}
        | OPERACIONES:op INWHILE_FUNC:inwhile{:
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)op);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          :}
        | SINTAXWHILE_FUNC:wr INWHILE_FUNC:inwhile{:
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)wr);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          :}
        | tk_comentario:com tk_Linea INWHILE_FUNC:inmain {: 
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            tmp.addHijo((Nodo)inmain);
            RESULT=tmp;
        :}
        | tk_comentario:com tk_Linea{:
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            :}
        | SINTAXFOR_FUNC:inwhile{:
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
       
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          :}
        | SINTAXIF_FUNC:inwhile{:
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
       
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          :}
        | VARIABLE:inwhile{:
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
       
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          :}
        | LLAMADAFUNC:inwhile{:
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
       
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          :}
        | ASIGNACIONVAL:inwhile{:
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
       
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          :}
        | CONSOLEWRITE:inwhile{:
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
       
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          :}
        | OPERACIONES:inwhile{:
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
       
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          :}
        | SINTAXWHILE_FUNC:inwhile{:
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
       
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          :}
        | tk_exit tk_do tk_Linea{:
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("EXIT DO");
            
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            :}
        | tk_exit tk_function tk_Linea{:
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("EXIT FUNCTION");
            
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            :}
        | tk_exit tk_for tk_Linea{:
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("EXIT FOR");
            
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            :};
 
            



SINTAXFOR_FUNC ::= tk_for tk_Identificador:i tk_Igual iDNUM:idn tk_to iDNUM:idnn tk_step AUMDEC:aumdec tk_Linea INFOR_FUNC:infor tk_next tk_Identificador:ii tk_Linea{: 
                    Nodo tmp = new Nodo("FOR");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Identificador");
                    nd1.setValor(i.toString());
                    nd1.setNumNodo(parser.contador++);
                    
                    Nodo nd2 = new Nodo("Identificador");
                    nd2.setValor(ii.toString());
                    nd2.setNumNodo(parser.contador++);
                    

                    tmp.addHijo(nd1);
                    tmp.addHijo((Nodo)idn);
                    tmp.addHijo((Nodo)idnn);
                    tmp.addHijo((Nodo)aumdec);
                    tmp.addHijo((Nodo)infor);
                    tmp.addHijo(nd2);
                    RESULT=tmp;
            :}
            | tk_for tk_Identificador:i tk_Igual iDNUM:idn tk_to OPERACIONES:oper INFOR_FUNC:infor tk_next tk_Identificador:ii tk_Linea{:
                    Nodo tmp = new Nodo("FOR");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Identificador");
                    nd1.setValor(i.toString());
                    nd1.setNumNodo(parser.contador++);
                    
                    Nodo nd2 = new Nodo("Identificador");
                    nd2.setValor(ii.toString());
                    nd2.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    tmp.addHijo((Nodo)idn);
                    tmp.addHijo((Nodo)oper);
                    tmp.addHijo((Nodo)infor);
                    tmp.addHijo(nd2);
                    RESULT=tmp;
            :};

INFOR_FUNC ::= SINTAXWHILE_FUNC:inw INFOR_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inw);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :} 
        | SINTAXFOR_FUNC:inf INFOR_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inf);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :} 
        | SINTAXIF_FUNC:inf INFOR_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inf);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}  
        | VARIABLE:var INFOR_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}  
        | LLAMADAFUNC:llamada INFOR_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)llamada);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}  
        | ASIGNACIONVAL:asig INFOR_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)asig);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}  
        | CONSOLEWRITE:cs INFOR_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}  
        | OPERACIONES:op INFOR_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)op);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :} 
        | tk_comentario:com tk_Linea INFOR_FUNC:inmain {: 
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            tmp.addHijo((Nodo)inmain);
            RESULT=tmp;
        :}
        | tk_comentario:com tk_Linea{:
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            :}
        | SINTAXWHILE_FUNC:inwhile{:
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
       
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          :}
        | SINTAXFOR_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :} 
        | SINTAXIF_FUNC:inifunc{:
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}
        | VARIABLE:inifunc{:
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}
        | LLAMADAFUNC:inifunc{:
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}
        | ASIGNACIONVAL:inifunc{:
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}
        | CONSOLEWRITE:inifunc{:
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}
        | OPERACIONES:inifunc{:
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}
        | tk_exit tk_do tk_Linea{:
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("EXIT DO");           
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            :}
        | tk_exit tk_function tk_Linea{:
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Exit Function"); 
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            :}
        | tk_exit tk_for tk_Linea{:
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Exit Function");     
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            :};

/* 
TERMINA CUERPO FUNCION
*/

CUERPOMAIN ::= SINTAXFOR:sxfor CUERPOMAIN:inmain {: 
            Nodo tmp = new Nodo("INMAIN");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxfor);
            tmp.addHijo((Nodo)inmain);
            RESULT=tmp;
        :}
        | SINTAXIF:sxif CUERPOMAIN:inmain {: 
            Nodo tmp = new Nodo("INMAIN");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxif);
            tmp.addHijo((Nodo)inmain);
            RESULT=tmp;
        :}
        | VARIABLE:var CUERPOMAIN:inmain {: 
            Nodo tmp = new Nodo("INMAIN");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            tmp.addHijo((Nodo)inmain);
            RESULT=tmp;
        :}
        | LLAMADAFUNC:lfunc CUERPOMAIN:inmain {: 
            Nodo tmp = new Nodo("INMAIN");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)lfunc);
            tmp.addHijo((Nodo)inmain);
            RESULT=tmp;
        :}
        | ASIGNACIONVAL:asigval CUERPOMAIN:inmain {: 
             Nodo tmp = new Nodo("INMAIN");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)asigval);
            tmp.addHijo((Nodo)inmain);
            RESULT=tmp;
        :}
        | CONSOLEWRITE:cs CUERPOMAIN:inmain {: 
            Nodo tmp = new Nodo("INMAIN");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            tmp.addHijo((Nodo)inmain);
            RESULT=tmp;
        :}
        | OPERACIONES:oper CUERPOMAIN:inmain  {: 
            Nodo tmp = new Nodo("INMAIN");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)oper);
            tmp.addHijo((Nodo)inmain);
            RESULT=tmp;
        :}
        | SINTAXWHILE:sxwhile CUERPOMAIN:inmain {: 
              Nodo tmp = new Nodo("INMAIN");
              tmp.setNumNodo(parser.contador++);
              tmp.addHijo((Nodo)sxwhile);
              tmp.addHijo((Nodo)inmain);
              RESULT=tmp;
        :}
        | tk_comentario:com tk_Linea CUERPOMAIN:inmain {: 
            Nodo tmp = new Nodo("INMAIN");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            tmp.addHijo((Nodo)inmain);
            RESULT=tmp;
        :}
        | ENDSUB:ends {:
            Nodo tmp = new Nodo("INMAIN");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ends);
            RESULT=tmp;
        :}
        | error tk_Linea CUERPOPRO;  

CUERPOPRO ::= SINTAXFOR:sxfor CUERPOPRO:insubpro {: 
            Nodo tmp = new Nodo("IN SUBPROC");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxfor);
            tmp.addHijo((Nodo)insubpro);
            RESULT=tmp;
        :}
        | SINTAXIF:sxif CUERPOPRO:insubpro {: 
              Nodo tmp = new Nodo("IN SUBPROC");
              tmp.setNumNodo(parser.contador++);
              tmp.addHijo((Nodo)sxif);
              tmp.addHijo((Nodo)insubpro);
              RESULT=tmp;
        :}
        | VARIABLE:var CUERPOPRO:insubpro {: 
            Nodo tmp = new Nodo("IN SUBPROC");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            tmp.addHijo((Nodo)insubpro);
            RESULT=tmp;
        :}
        | LLAMADAFUNC:lfunc CUERPOPRO:insubpro {: 
            Nodo tmp = new Nodo("IN SUBPROC");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)lfunc);
            tmp.addHijo((Nodo)insubpro);
            RESULT=tmp;
        :}
        | ASIGNACIONVAL:asigvar CUERPOPRO:insubpro {: 
             Nodo tmp = new Nodo("IN SUBPROC");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)asigvar);
            tmp.addHijo((Nodo)insubpro);
            RESULT=tmp;
        :}
        | CONSOLEWRITE:cs CUERPOPRO:insubpro {: 
            Nodo tmp = new Nodo("IN SUBPROC");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            tmp.addHijo((Nodo)insubpro);
            RESULT=tmp;
        :}
        | OPERACIONES:oper CUERPOPRO:insubpro  {: 
            Nodo tmp = new Nodo("IN SUBPROC");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)oper);
            tmp.addHijo((Nodo)insubpro);
            RESULT=tmp;
        :}   
        | SINTAXWHILE:sxwhile CUERPOPRO:insubpro  {: 
            Nodo tmp = new Nodo("IN SUBPROC");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxwhile);
            tmp.addHijo((Nodo)insubpro);
            RESULT=tmp;
        :}   
        | tk_comentario:com tk_Linea CUERPOPRO:insubpro {: 
            Nodo tmp = new Nodo("INMAIN");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            tmp.addHijo((Nodo)insubpro);
            RESULT=tmp;
        :}
        | ENDSUB:ends {:
            Nodo tmp = new Nodo("IN SUBPROC");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ends);
            RESULT=tmp;
        :}
        | error tk_Linea CUERPOPRO;   

PARAMETROS ::= tk_byval tk_Identificador:i tk_as TIPOD:tipd  {: 
                Nodo tmp = new Nodo("PARAMETROS");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)tipd);
                RESULT = tmp;
            :}
            | tk_Identificador:i tk_as TIPOD:tipd {: 
                Nodo tmp = new Nodo("PARAMETROS");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)tipd);
                RESULT = tmp;
            :}
            | tk_byval tk_Identificador:i tk_as TIPOD:tipd tk_Coma PARAMETROS:param {: 
                Nodo tmp = new Nodo("PARAMETROS");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)tipd);
                tmp.addHijo((Nodo)param);
                RESULT = tmp;
            :}
            | tk_Identificador:i tk_as TIPOD:tipd tk_Coma PARAMETROS:param {: 
                Nodo tmp = new Nodo("PARAMETROS");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)tipd);
                tmp.addHijo((Nodo)param);
                RESULT = tmp;
            :};
            
VALOR ::= OPCBOOL:opcbool {: 
            Nodo tmp = new Nodo("VALOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)opcbool);
            RESULT=tmp;
        :}| iDNUM:idnum {:
            Nodo tmp = new Nodo("VALOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)idnum);
            RESULT=tmp; 
        :}| tk_valorString:str {:
           Nodo tmp = new Nodo("ValorString");
            tmp.setNumNodo(parser.contador++);
            tmp.setValor(str.toString().replaceAll("\"", ""));
            RESULT=tmp;
        :}; 

VARIABLE ::= tk_dim tk_Identificador:i tk_as TIPOD:tipod tk_Linea {: 
                Nodo tmp = new Nodo("Variable");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)tipod);

                RESULT = tmp;
            :}|
            tk_dim tk_Identificador:i tk_as TIPOD:tipod tk_Igual VALOR:val tk_Linea {: 
                Nodo tmp = new Nodo("Variable");
               tmp.setNumNodo(parser.contador++);

               Nodo nd1 = new Nodo("Identificador");
               nd1.setValor(i.toString());
               nd1.setNumNodo(parser.contador++);

               tmp.addHijo(nd1);
               tmp.addHijo((Nodo)tipod);
               tmp.addHijo((Nodo)val);

               RESULT = tmp;
            :}|
            tk_dim tk_Identificador:i tk_as TIPOD:tipod tk_Igual LLAMADAFUNC:llamfunc {: 
               Nodo tmp = new Nodo("Variable");
               tmp.setNumNodo(parser.contador++);

               Nodo nd1 = new Nodo("Identificador");
               nd1.setValor(i.toString());
               nd1.setNumNodo(parser.contador++);

               tmp.addHijo(nd1);
               tmp.addHijo((Nodo)tipod);
               tmp.addHijo((Nodo)llamfunc);

               RESULT = tmp;
            :}|            
            tk_dim tk_Identificador:i tk_Igual VALOR:val tk_Linea {:
                Nodo tmp = new Nodo("Variable");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)val);

                RESULT = tmp;
            :}|
            tk_dim tk_Identificador:i tk_Igual OPERACIONES:oper {: 
                Nodo tmp = new Nodo("Variable");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)oper);

                RESULT = tmp;

            :}|
            tk_Identificador:i tk_punto tk_Identificador:ii tk_Igual VALOR:val tk_Linea {:
                Nodo tmp = new Nodo("Variable");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                Nodo nd2 = new Nodo("Identificador");
                nd2.setValor(ii.toString());
                nd2.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo(nd2);
                tmp.addHijo((Nodo)val);

                RESULT = tmp;
            :}; 
            
ASIGNACIONVAL ::= tk_Identificador:i tk_Igual VALOR:val tk_Linea {: 
                    Nodo tmp = new Nodo("Asignacion Variable");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Identificador");
                    nd1.setValor(i.toString());
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    tmp.addHijo((Nodo)val);
                    RESULT = tmp;
                :}
                  | tk_Identificador:i tk_Igual OPERACIONES:oper {: 
                       Nodo tmp = new Nodo("Asignacion Variable");
                       tmp.setNumNodo(parser.contador++);

                       Nodo nd1 = new Nodo("Identificador");
                       nd1.setValor(i.toString());
                       nd1.setNumNodo(parser.contador++);

                       tmp.addHijo(nd1);
                       tmp.addHijo((Nodo)oper);
                       RESULT = tmp;
                    :}
                  | tk_Identificador:i tk_Igual LLAMADAFUNC:llamfunc  {: 
                        Nodo tmp = new Nodo("Asignacion Variable");
                       tmp.setNumNodo(parser.contador++);

                       Nodo nd1 = new Nodo("Identificador");
                       nd1.setValor(i.toString());
                       nd1.setNumNodo(parser.contador++);

                       tmp.addHijo(nd1);
                       tmp.addHijo((Nodo)llamfunc);
                       RESULT = tmp;
                    :}
                  | tk_Identificador:i tk_Igual tk_cs tk_punto tk_readline:rd tk_ParentesisA tk_ParentesisC tk_Linea {: 
                       Nodo tmp = new Nodo("Asignacion Variable");
                       tmp.setNumNodo(parser.contador++);

                       Nodo nd1 = new Nodo("Identificador");
                       nd1.setValor(i.toString());
                       nd1.setNumNodo(parser.contador++);

                       Nodo nd2 = new Nodo("ReadLine");
                       nd2.setNumNodo(parser.contador++);

                       tmp.addHijo(nd1);
                       tmp.addHijo(nd2);
                       RESULT = tmp;
                    :}
                  | tk_cs tk_punto tk_readline tk_ParentesisA tk_ParentesisC tk_Linea {:
                       Nodo tmp = new Nodo("Asignacion Variable");
                       tmp.setNumNodo(parser.contador++);

                       Nodo nd1 = new Nodo("ReadLine");
                       nd1.setNumNodo(parser.contador++);

                       tmp.addHijo(nd1);
                       RESULT = tmp;
                     :}
                  | tk_Identificador:i tk_punto tk_Identificador:ii tk_Igual tk_cs tk_punto tk_readline:rd tk_ParentesisA tk_ParentesisC tk_Linea {: 
                       Nodo tmp = new Nodo("Asignacion Variable");
                       tmp.setNumNodo(parser.contador++);

                       Nodo nd1 = new Nodo("Identificador");
                       nd1.setValor(i.toString());
                       nd1.setNumNodo(parser.contador++);
                       
                       Nodo nd2 = new Nodo("Identificador");
                       nd2.setValor(ii.toString());
                       nd2.setNumNodo(parser.contador++);

                       Nodo nd3 = new Nodo("ReadLine");
                       nd3.setNumNodo(parser.contador++);

                       tmp.addHijo(nd1);
                       tmp.addHijo(nd2);
                       tmp.addHijo(nd3);
                       RESULT = tmp;
                    :};


OPCBOOL ::= tk_true {:
            Nodo tmp = new Nodo("True");
            tmp.setNumNodo(parser.contador++);
            RESULT = tmp;
        :}| tk_false{:
            Nodo tmp = new Nodo("False");
            tmp.setNumNodo(parser.contador++);
            RESULT = tmp;
            :};

TIPOD ::= tk_String:strg {:
            Nodo tmp = new Nodo("String");
            tmp.setValor(strg.toString());
            tmp.setNumNodo(parser.contador++);
            RESULT = tmp;
         :}|
            tk_integer:intv {: 
            Nodo tmp = new Nodo("Integer");
            tmp.setValor(intv.toString());
            tmp.setNumNodo(parser.contador++);
            RESULT = tmp; 
            :}| 
            tk_boolean:boolv {: 
            Nodo tmp = new Nodo("Boolean");
            tmp.setValor(boolv.toString());
            tmp.setNumNodo(parser.contador++);
            RESULT = tmp;
            :};
            

OPCRELACIONALES ::= tk_mayorque:mq{:
                        Nodo tmp = new Nodo("MayorQue");
                        tmp.setValor(mq.toString());
                        tmp.setNumNodo(parser.contador++);
                        RESULT = tmp;
                    :}|
                    tk_mayorigual:mi{:
                        Nodo tmp = new Nodo("MenorIgual");
                        tmp.setValor(mi.toString());
                        tmp.setNumNodo(parser.contador++);
                        RESULT = tmp;
                    :}| 
                    tk_menorque:meq {:
                        Nodo tmp = new Nodo("MenorQque");
                        tmp.setValor(meq.toString());
                        tmp.setNumNodo(parser.contador++);
                        RESULT = tmp;
                    :}|
                    tk_menorigual:mei{:
                        Nodo tmp = new Nodo("MenorIgual");
                        tmp.setValor(mei.toString());
                        tmp.setNumNodo(parser.contador++);
                        RESULT = tmp;
                    :} |
                    tk_Igual:iq{:
                        Nodo tmp = new Nodo("Igual");
                        tmp.setValor(iq.toString());
                        tmp.setNumNodo(parser.contador++);
                        RESULT = tmp;
                    :};
      
iDNUM ::= tk_Identificador:id {:
            Nodo tmp = new Nodo("Identificador");
            tmp.setValor(id.toString());
            tmp.setNumNodo(parser.contador++);
            RESULT = tmp;
        :}| tk_Numero:num {: 
            Nodo tmp = new Nodo("Numero");
            tmp.setValor(num.toString());
            tmp.setNumNodo(parser.contador++);
            RESULT = tmp;
        :}
        ;

CONDICION ::= iDNUM:id OPCRELACIONALES:opcr iDNUM:idd {:
                    Nodo tmp = new Nodo("Condicion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)opcr);
                    tmp.addHijo((Nodo)idd);
                    RESULT = tmp;
            :}
            | iDNUM:id OPCRELACIONALES:opcr OPCBOOL:opb {: 
                    Nodo tmp = new Nodo("Condicion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)opcr);
                    tmp.addHijo((Nodo)opb);
                    RESULT = tmp;
            :}
            | iDNUM:id OPCRELACIONALES:opr tk_Identificador:i tk_ParentesisA IDENTIFICADORES:ids {: 
                    Nodo tmp = new Nodo("Condicion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)opr);

                    Nodo nd1 = new Nodo("Identificador");
                    nd1.setValor(i.toString());
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    tmp.addHijo((Nodo)ids);
                    RESULT = tmp;
            :}
            | OPCBOOL:opb {: 
                    Nodo tmp = new Nodo("Condicion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)opb);
                    RESULT = tmp;
            :} 
            | iDNUM:id OPCRELACIONALES:opcr tk_ParentesisA iDNUM:idd OPEARITMETICA:opea iDNUM:iddd tk_ParentesisC {:
                    Nodo tmp = new Nodo("Condicion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)opcr);
                    tmp.addHijo((Nodo)idd);
                    tmp.addHijo((Nodo)opea);
                    tmp.addHijo((Nodo)iddd);
                    RESULT = tmp;
            :};


OPERACIONES ::= iDNUM:id OPEARITMETICA:signo OPERACIONAUX:operb {:
                    Nodo tmp = new Nodo("Operacion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)signo);
                    tmp.addHijo((Nodo)operb);
                    RESULT = tmp;
                 :}
                | tk_ParentesisA iDNUM:id OPEARITMETICA:signo OPERACIONAUX:operb {: 
                    Nodo tmp = new Nodo("Operacion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)signo);
                    tmp.addHijo((Nodo)operb);
                    RESULT = tmp;
                :};

OPERACIONAUX ::=  iDNUM:id OPEARITMETICA:signo OPERACIONAUX:operb {: 
                    Nodo tmp = new Nodo("InOperacion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)signo);
                    tmp.addHijo((Nodo)operb);
                    RESULT = tmp;
                :}
                | tk_ParentesisA iDNUM:id OPEARITMETICA:signo OPERACIONAUX:operb {:
                    Nodo tmp = new Nodo("InOperacion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)signo);
                    tmp.addHijo((Nodo)operb);
                    RESULT = tmp;
                :}
                | OPEARITMETICA:signo iDNUM:id OPERACIONAUX:operb {: 
                    Nodo tmp = new Nodo("InOperacion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)signo);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)operb);
                    RESULT = tmp;
                :}
                | iDNUM:id tk_ParentesisC OPERACIONAUX:operb {:
                    Nodo tmp = new Nodo("InOperacion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)operb);
                    RESULT = tmp;
                :}
                | OPEARITMETICA:signo iDNUM:id tk_Linea {: 
                    Nodo tmp = new Nodo("InOperacion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)signo);
                    tmp.addHijo((Nodo)id);
                    RESULT = tmp;
                :}
                | iDNUM:id tk_ParentesisC tk_Linea {: 
                    Nodo tmp = new Nodo("InOperacion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    RESULT = tmp;       
                :}
                | iDNUM:id tk_Linea {: 
                    Nodo tmp = new Nodo("InOperacion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    RESULT = tmp;
                :};

OPEARITMETICA ::= tk_Suma:sum{:  
                    Nodo tmp = new Nodo("Suma");
                    tmp.setValor(sum.toString());
                    tmp.setNumNodo(parser.contador++);
                    RESULT = tmp;
                :}| tk_Resta:resta {: 
                    Nodo tmp = new Nodo("Resta");
                    tmp.setValor(resta.toString());
                    tmp.setNumNodo(parser.contador++);
                    RESULT = tmp;
                :} | tk_Multiplicacion:mul {:
                    Nodo tmp = new Nodo("Multiplicacion");
                    tmp.setValor(mul.toString());
                    tmp.setNumNodo(parser.contador++);
                    RESULT = tmp;
                :}| tk_Division:div {:
                    Nodo tmp = new Nodo("Division");
                    tmp.setValor(div.toString());
                    tmp.setNumNodo(parser.contador++);
                    RESULT = tmp;
                :}| tk_Signomod:mod {:
                    Nodo tmp = new Nodo("Mod");
                    tmp.setValor(mod.toString());
                    tmp.setNumNodo(parser.contador++);
                    RESULT = tmp;
                :}| tk_Potencia:pot {:
                    Nodo tmp = new Nodo("Potencia");
                    tmp.setValor(pot.toString());
                    tmp.setNumNodo(parser.contador++);
                    RESULT = tmp;
                :} ; 

IDENTIFICADORES ::= iDNUM:a tk_Coma iDNUM:b tk_Coma iDNUM:c tk_Coma iDNUM:d tk_Coma iDNUM:e tk_ParentesisC{: 
                    Nodo tmp = new Nodo("Parametros Llamada");
                    tmp.setNumNodo(parser.contador++);

                    tmp.addHijo((Nodo)a);
                    tmp.addHijo((Nodo)b);
                    tmp.addHijo((Nodo)c);
                    tmp.addHijo((Nodo)d);
                    tmp.addHijo((Nodo)e);

                    RESULT = tmp;
                :}
                |    iDNUM:a tk_Coma iDNUM:b tk_Coma iDNUM:c tk_Coma iDNUM:d tk_ParentesisC{: 
                    Nodo tmp = new Nodo("Parametros Llamada");
                    tmp.setNumNodo(parser.contador++);

                    tmp.addHijo((Nodo)a);
                    tmp.addHijo((Nodo)b);
                    tmp.addHijo((Nodo)c);
                    tmp.addHijo((Nodo)d);

                    RESULT = tmp;
                :}
                |   iDNUM:a tk_Coma iDNUM:b tk_Coma iDNUM:c tk_ParentesisC{: 
                    Nodo tmp = new Nodo("Parametros Llamada");
                    tmp.setNumNodo(parser.contador++);

                    tmp.addHijo((Nodo)a);
                    tmp.addHijo((Nodo)b);
                    tmp.addHijo((Nodo)c);

                    RESULT = tmp;
                :}
                |   iDNUM:a tk_Coma iDNUM:b tk_ParentesisC{: 
                    Nodo tmp = new Nodo("Parametros Llamada");
                    tmp.setNumNodo(parser.contador++);

                    tmp.addHijo((Nodo)a);
                    tmp.addHijo((Nodo)b);

                    RESULT = tmp;
                :}
                | iDNUM:a tk_ParentesisC{:  
                    Nodo tmp = new Nodo("Parametros Llamada");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)a);
                    RESULT = tmp; 
                :};
               

IDENTIFICADORESUB ::=  tk_Coma iDNUM:a IDENTIFICADORESUB:idsub {: 
                        Nodo tmp = new Nodo("Parametros Llamada");
                        tmp.setNumNodo(parser.contador++);
                        tmp.addHijo((Nodo)a);
                        tmp.addHijo((Nodo)idsub);

                        RESULT = tmp;
                    :}
                    | tk_Coma iDNUM:a {: 
                        Nodo tmp = new Nodo("Parametros Llamada");
                        tmp.setNumNodo(parser.contador++);
                        tmp.addHijo((Nodo)a);
                        RESULT = tmp; 
                    :};

LLAMADAFUNC ::= tk_Identificador:i tk_ParentesisA IDENTIFICADORES:ids tk_Linea {: 
                Nodo tmp = new Nodo("LLAMADAFUNCION");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                nd1.addHijo((Nodo)ids);

                RESULT = tmp;
            :}
            | tk_Identificador:i tk_ParentesisA tk_ParentesisC tk_Linea {: 
                Nodo tmp = new Nodo("LLAMADAFUNCION");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);

                RESULT = tmp;
               :}
            | tk_Identificador:i iDNUM IDENTIFICADORESUB:idsub tk_Linea{: 
                Nodo tmp = new Nodo("LLAMADAFUNCION");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                nd1.addHijo((Nodo)idsub);

                RESULT = tmp;
               :}

            | tk_Identificador:i iDNUM:a tk_Linea {: 
                Nodo tmp = new Nodo("LLAMADAFUNCION");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)a);
                RESULT = tmp;
               :}
            | tk_Identificador:i tk_ParentesisA tk_ParentesisA IDENTIFICADORES:ids tk_ParentesisC tk_Linea {: 
                Nodo tmp = new Nodo("LLAMADAFUNCION");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                nd1.addHijo((Nodo)ids);

                RESULT = tmp;
               :}
            | tk_Identificador:i tk_ParentesisA IDENTIFICADORES:ids IDENTIFICADORESUB:idsub tk_Linea {: 
                Nodo tmp = new Nodo("LLAMADAFUNCION");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                nd1.addHijo((Nodo)ids);
                nd1.addHijo((Nodo)idsub);
                RESULT = tmp;
               :};

CONSOLEWRITE ::= tk_cs tk_punto tk_writeline tk_ParentesisA tk_valorString:val tk_ParentesisC tk_Linea{:
                   Nodo tmp = new Nodo("console.writeline");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("ValorString");
                    nd1.setNumNodo(parser.contador++);
                    nd1.setValor(val.toString().replaceAll("\"", ""));

                    tmp.addHijo(nd1);
                    RESULT=tmp;
                 :}
                | tk_cs tk_punto tk_writeline:wr tk_ParentesisA tk_Identificador:i tk_ParentesisC tk_Linea {:
                    Nodo tmp = new Nodo("console.writeline");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Identificador");
                    nd1.setValor(i.toString());
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    RESULT=tmp;
                :};

/*
    IF ELSEIF ELSE
*/
SINTAXIF ::= tk_if CONDICION:con tk_then tk_Linea INIF:inif tk_end tk_if tk_Linea{:
            Nodo tmp = new Nodo("IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("End if");
            nd1.setNumNodo(parser.contador++);
            
            tmp.addHijo((Nodo)con);
            tmp.addHijo((Nodo)inif);
            tmp.addHijo(nd1);
            RESULT=tmp;
        :};

SINTAXELSEIF::= CONDICION:con tk_then tk_Linea INELSEIF:elsef{:
            Nodo tmp = new Nodo("ELSE IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("End if");
            nd1.setNumNodo(parser.contador++);
            
            tmp.addHijo((Nodo)con);
            tmp.addHijo((Nodo)elsef);
            tmp.addHijo(nd1);
            RESULT=tmp;
        :};

INIF ::= SINTAXIF:sif INIF:inifunc{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sif);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}
         | VARIABLE:var INIF:inifunc{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}
         | LLAMADAFUNC:var INIF:inifunc{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}
         | ASIGNACIONVAL:asig INIF:inifunc{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)asig);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}
         | OPERACIONES:op INIF:inifunc{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)op);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}
         | CONSOLEWRITE:cs INIF:inifunc{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}
         | SINTAXFOR:fr INIF:inifunc{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)fr);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :} 
         | SINTAXWHILE:wh INIF:inifunc{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)wh);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}
         | tk_comentario:com tk_Linea INIF:inifunc{:
            Nodo tmp = new Nodo("IN IF ");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
            :}
         | tk_comentario:com tk_Linea{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            :}
         | SINTAXIF:sxiffunc{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxiffunc);
            RESULT=tmp;
          :}
         | VARIABLE:sxiffunc{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxiffunc);
            RESULT=tmp;
          :}
         | LLAMADAFUNC:sxiffunc{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxiffunc);
            RESULT=tmp;
          :}
         | ASIGNACIONVAL:sxiffunc{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxiffunc);
            RESULT=tmp;
          :}
         | CONSOLEWRITE:sxiffunc{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxiffunc);
            RESULT=tmp;
          :}
         | OPERACIONES:sxiffunc{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxiffunc);
            RESULT=tmp;
          :}
         | SINTAXFOR:sxiffunc{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxiffunc);
            RESULT=tmp;
          :}
         | SINTAXWHILE:sxiffunc{:
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxiffunc);
            RESULT=tmp;
          :}
         | tk_else tk_Linea INELSE:inifunc{:
                    Nodo tmp = new Nodo("IN IF");
                    tmp.setNumNodo(parser.contador++);
                    Nodo nd1 = new Nodo("Else");
                    nd1.setNumNodo(parser.contador++);
                    tmp.addHijo(nd1);           
                    nd1.addHijo((Nodo)inifunc);           
                    RESULT=tmp;
          :}  
         | tk_elseif SINTAXELSEIF:inifunc{:
                    Nodo tmp = new Nodo("IN IF");
                    tmp.setNumNodo(parser.contador++);
                    Nodo nd1 = new Nodo("ELSE IF");
                    nd1.setNumNodo(parser.contador++);
                    tmp.addHijo(nd1);           
                    nd1.addHijo((Nodo)inifunc);           
                    RESULT=tmp;
          :};    

INELSE ::= SINTAXIF:sif INELSE:els{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sif);
            tmp.addHijo((Nodo)els);
            RESULT=tmp;
          :}
           | VARIABLE:vr INELSE:els{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)vr);
            tmp.addHijo((Nodo)els);
            RESULT=tmp;
          :}
           | LLAMADAFUNC:llmda INELSE:els{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)llmda);
            tmp.addHijo((Nodo)els);
            RESULT=tmp;
          :}
           | ASIGNACIONVAL:vl INELSE:els{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)vl);
            tmp.addHijo((Nodo)els);
            RESULT=tmp;
          :}
           | OPERACIONES:op INELSE:els{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)op);
            tmp.addHijo((Nodo)els);
            RESULT=tmp;
          :}
           | CONSOLEWRITE:cs INELSE:els{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            tmp.addHijo((Nodo)els);
            RESULT=tmp;
          :}
           | SINTAXFOR:fr INELSE:els{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)fr);
            tmp.addHijo((Nodo)els);
            RESULT=tmp;
          :}
           | SINTAXWHILE:wh INELSE:els{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)wh);
            tmp.addHijo((Nodo)els);
            RESULT=tmp;
          :}
           | tk_comentario:com tk_Linea INELSE:inifunc{:
            Nodo tmp = new Nodo("IN ELSE ");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
            :}
           | tk_comentario:com tk_Linea{:
            Nodo tmp = new Nodo("IN ELSE ");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            :}
           | SINTAXIF:ifn{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ifn);
            RESULT=tmp;
          :} 
           | VARIABLE:ifn{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ifn);
            RESULT=tmp;
          :} 
           | LLAMADAFUNC:ifn{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ifn);
            RESULT=tmp;
          :} 
           | ASIGNACIONVAL:ifn{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ifn);
            RESULT=tmp;
          :} 
           | CONSOLEWRITE:ifn{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ifn);
            RESULT=tmp;
          :} 
           | OPERACIONES:ifn{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ifn);
            RESULT=tmp;
          :} 
           | SINTAXFOR:ifn{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ifn);
            RESULT=tmp;
          :} 
           | SINTAXWHILE:ifn{:
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ifn);
            RESULT=tmp;
          :} ;

INELSEIF ::=  SINTAXIF:sif INELSEIF:inifunc{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sif);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :}   
               | VARIABLE:vr INELSEIF:elsif{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)vr);
            tmp.addHijo((Nodo)elsif);
            RESULT=tmp;
          :}   
               | LLAMADAFUNC:llms INELSEIF:elsif{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)llms);
            tmp.addHijo((Nodo)elsif);
            RESULT=tmp;
          :}    
               | ASIGNACIONVAL:vl INELSEIF:elsif{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)vl);
            tmp.addHijo((Nodo)elsif);
            RESULT=tmp;
          :}   
               | tk_else tk_Linea INELSE:inifunc{:
                    Nodo tmp = new Nodo("IN ELSE IF");
                    tmp.setNumNodo(parser.contador++);
                    Nodo nd1 = new Nodo("ELSE");
                    nd1.setNumNodo(parser.contador++);
                    tmp.addHijo(nd1);           
                    nd1.addHijo((Nodo)inifunc);           
                    RESULT=tmp;
          :}    
               | tk_elseif  SINTAXELSEIF:inifunc{:
                    Nodo tmp = new Nodo("IN ELSE IF");
                    tmp.setNumNodo(parser.contador++);
                    Nodo nd1 = new Nodo("ELSE IF");
                    nd1.setNumNodo(parser.contador++);
                    tmp.addHijo(nd1);           
                    nd1.addHijo((Nodo)inifunc);           
                    RESULT=tmp;
          :}   
               | OPERACIONES:pr INELSEIF:elsif{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)pr);
            tmp.addHijo((Nodo)elsif);
            RESULT=tmp;
          :}   
               | CONSOLEWRITE:cs INELSEIF :elsif{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            tmp.addHijo((Nodo)elsif);
            RESULT=tmp;
          :}   
               | SINTAXFOR:fr INELSEIF:elsif{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)fr);
            tmp.addHijo((Nodo)elsif);
            RESULT=tmp;
          :}   
               | SINTAXWHILE:wl INELSEIF:elsif{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)wl);
            tmp.addHijo((Nodo)elsif);
            RESULT=tmp;
          :}   
               | tk_comentario:com tk_Linea INELSEIF:inifunc{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
            :}
               | tk_comentario:com tk_Linea{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            :}
               | SINTAXIF:inifunc{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :} 
               | VARIABLE:inifunc{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :} 
               | LLAMADAFUNC:inifunc{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :} 
               | ASIGNACIONVAL:inifunc{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :} 
               | CONSOLEWRITE:inifunc{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :} 
               | OPERACIONES:inifunc{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :} 
               | SINTAXFOR:inifunc{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :} 
               | SINTAXWHILE:inifunc{:
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          :};


/*
    FOR
*/

SINTAXFOR ::= tk_for tk_Identificador:i tk_Igual iDNUM:idn tk_to iDNUM:idnn tk_step AUMDEC:aumdec tk_Linea INFOR:infor tk_next tk_Identificador:ii tk_Linea {: 
                    Nodo tmp = new Nodo("For");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Identificador");
                    nd1.setValor(i.toString());
                    nd1.setNumNodo(parser.contador++);
                    
                    Nodo nd2 = new Nodo("Identificador");
                    nd2.setValor(ii.toString());
                    nd2.setNumNodo(parser.contador++);
                    

                    tmp.addHijo(nd1);
                    tmp.addHijo((Nodo)idn);
                    tmp.addHijo((Nodo)idnn);
                    tmp.addHijo((Nodo)aumdec);
                    tmp.addHijo((Nodo)infor);
                    tmp.addHijo(nd2);
                    RESULT=tmp;
            :}
            | tk_for tk_Identificador:i tk_Igual iDNUM:idn tk_to OPERACIONES:oper INFOR:infor tk_next tk_Identificador:ii tk_Linea {:
                    Nodo tmp = new Nodo("For");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Identificador");
                    nd1.setValor(i.toString());
                    nd1.setNumNodo(parser.contador++);
                    
                    Nodo nd2 = new Nodo("Identificador");
                    nd2.setValor(ii.toString());
                    nd2.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    tmp.addHijo((Nodo)idn);
                    tmp.addHijo((Nodo)oper);
                    tmp.addHijo((Nodo)infor);
                    tmp.addHijo(nd2);
                    RESULT=tmp;
            :};

AUMDEC ::= tk_Resta:resta tk_Numero:num {:
                    Nodo tmp = new Nodo("step");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Negativo");
                    nd1.setValor(resta.toString());
                    nd1.setNumNodo(parser.contador++);

                    Nodo nd2 = new Nodo("Numero");
                    nd2.setValor(num.toString());
                    nd2.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    tmp.addHijo(nd2);
                    RESULT=tmp;
            :}
        | tk_Numero:num {:
                    Nodo tmp = new Nodo("step");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd2 = new Nodo("Numero");
                    nd2.setValor(num.toString());
                    nd2.setNumNodo(parser.contador++);

                    tmp.addHijo(nd2);
                    RESULT=tmp;
            :};

INFOR ::=  SINTAXFOR:sxfor INFOR:infor {:          
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxfor);
            tmp.addHijo((Nodo)infor);
            RESULT=tmp;
        :}
        | SINTAXIF_FOR:sxiffor INFOR:infor{:
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxiffor);
            tmp.addHijo((Nodo)infor);
            RESULT=tmp;
        :}
        | VARIABLE:var INFOR:infor{:          
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            tmp.addHijo((Nodo)infor);
            RESULT=tmp;
        :}
        | LLAMADAFUNC:llam INFOR:infor{:          
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)llam);
            tmp.addHijo((Nodo)infor);
            RESULT=tmp;
        :}
        | ASIGNACIONVAL:asigval INFOR:infor{:          
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)asigval);
            tmp.addHijo((Nodo)infor);
            RESULT=tmp;
        :}
        | CONSOLEWRITE:cs INFOR:infor{:          
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            tmp.addHijo((Nodo)infor);
            RESULT=tmp;
        :}
        | OPERACIONES:oper INFOR:infor{:          
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)oper);
            tmp.addHijo((Nodo)infor);
            RESULT=tmp;
        :}   
        | SINTAXWHILE_FOR:sxwhilefor INFOR:infor {:
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxwhilefor);
            tmp.addHijo((Nodo)infor);
            RESULT=tmp;
        :}
        | tk_comentario:com tk_Linea INFOR:infor {:
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            tmp.addHijo((Nodo)infor);
            RESULT=tmp;
            :}
        | tk_comentario:com tk_Linea {:
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            :}
        | SINTAXFOR:sxfor {:          
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxfor);
            RESULT=tmp;
        :}
        | SINTAXIF_FOR:sxiffor{:
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxiffor);
            RESULT=tmp;
        :}
        | VARIABLE:var{:          
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            RESULT=tmp;
        :}  
        | LLAMADAFUNC:llamfunc{:          
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)llamfunc);
            RESULT=tmp;
        :}  
        | ASIGNACIONVAL:asigval{:          
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)asigval);
            RESULT=tmp;
        :}  
        | CONSOLEWRITE:cs{:          
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            RESULT=tmp;
        :}  
        | OPERACIONES:oper{:          
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)oper);
            RESULT=tmp;
        :}   
        | SINTAXWHILE_FOR:sxwhilefor {:
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxwhilefor);
            RESULT=tmp;
        :}
        | tk_exit tk_for tk_Linea{:
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Exit for");
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
        :};

SINTAXIF_FOR::= tk_if CONDICION:con tk_then tk_Linea INIF_FOR:inif tk_end:endif tk_if tk_Linea{:
            Nodo tmp = new Nodo("IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("End if");
            nd1.setNumNodo(parser.contador++);
            
            tmp.addHijo((Nodo)con);
            tmp.addHijo((Nodo)inif);
            tmp.addHijo(nd1);
            RESULT=tmp;
        :};

SINTAXELSEIF_FOR ::= CONDICION:con tk_then tk_Linea INELSEIF_FOR:inelseiffor{:
            Nodo tmp = new Nodo("ELSE IF");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)con);
            tmp.addHijo((Nodo)inelseiffor);
            RESULT=tmp;
        :};

INIF_FOR ::= SINTAXIF_FOR:sixiffor INIF_FOR:infor{:
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sixiffor);
                tmp.addHijo((Nodo)infor);
                RESULT=tmp;
          :}
         | VARIABLE:var INIF_FOR:infor{:
                Nodo tmp = new Nodo("IN FOR IF ");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)var);
                tmp.addHijo((Nodo)infor);
                RESULT=tmp;
          :}
         | LLAMADAFUNC:llamfunc INIF_FOR:infor{:
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)llamfunc);
                tmp.addHijo((Nodo)infor);
                RESULT=tmp;
          :}
         | ASIGNACIONVAL:asigval INIF_FOR:infor{:
                Nodo tmp = new Nodo("IN FOR IF ");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)asigval);
                tmp.addHijo((Nodo)infor);
                RESULT=tmp;
          :}
         | OPERACIONES:oper INIF_FOR:infor{:
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)oper);
                tmp.addHijo((Nodo)infor);
                RESULT=tmp;
          :}
         | CONSOLEWRITE:cs INIF_FOR:infor{:
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)cs);
                tmp.addHijo((Nodo)infor);
                RESULT=tmp;
          :}
         | SINTAXFOR:sxfor INIF_FOR:infor{:
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxfor);
                tmp.addHijo((Nodo)infor);
                RESULT=tmp;
          :}
         | SINTAXWHILE_FOR:sxwhilefor INIF_FOR:infor{:
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxwhilefor);
                tmp.addHijo((Nodo)infor);
                RESULT=tmp;
            :}
         | tk_comentario:com tk_Linea INIF_FOR:infor{:
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Comentario");
                nd1.setValor(com.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)infor);
                RESULT=tmp;
            :}
         | tk_comentario:com tk_Linea{:
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Comentario");
                nd1.setValor(com.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                RESULT=tmp;
            :}
         | SINTAXIF_FOR:sixiffor{:
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sixiffor);
                RESULT=tmp;
          :}
            | VARIABLE:var{:
               Nodo tmp = new Nodo("IN FOR IF");
               tmp.setNumNodo(parser.contador++);
               tmp.addHijo((Nodo)var);
               RESULT=tmp;
          :}
         | LLAMADAFUNC:llamfunc{:
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)llamfunc);
                RESULT=tmp;
          :}
         | ASIGNACIONVAL:asigval{:
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)asigval);
                RESULT=tmp;
          :}
         | CONSOLEWRITE:cs{:
                Nodo tmp = new Nodo("IN FOR IF ");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)cs);
                RESULT=tmp;
          :}
         | OPERACIONES:oper{:
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)oper);
                RESULT=tmp;
          :}
         | SINTAXFOR:sxfor{:
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxfor);
                RESULT=tmp;
          :}
         | SINTAXWHILE_FOR:sxwhilefor{:
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxwhilefor);
                RESULT=tmp;
            :}
         | tk_exit tk_for tk_Linea{:
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Exit For");
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                RESULT=tmp;
            :}
         | tk_else tk_Linea INELSE_FOR:inelsefor {:
                Nodo tmp = new Nodo("ELSE");
                tmp.setNumNodo(parser.contador++);

                tmp.addHijo((Nodo)inelsefor);
                RESULT=tmp;
            :}
         | tk_elseif SINTAXELSEIF_FOR:sxelseiffor{:
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);

                tmp.addHijo((Nodo)sxelseiffor);
                RESULT=tmp;
            :}; 

INELSEIF_FOR ::=  SINTAXIF_FOR:sxiffor INELSEIF_FOR:inelseiffor{:
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)sxiffor);
                    tmp.addHijo((Nodo)inelseiffor);
                    RESULT=tmp;
                 :}
               | VARIABLE:var INELSEIF_FOR:inelseiffor{:
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)var);
                    tmp.addHijo((Nodo)inelseiffor);
                    RESULT=tmp;
                 :}
               | LLAMADAFUNC:llamfunc INELSEIF_FOR:inelseiffor{:
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)llamfunc);
                    tmp.addHijo((Nodo)inelseiffor);
                    RESULT=tmp;
                 :}
               | ASIGNACIONVAL:asigval INELSEIF_FOR:inelseiffor {:
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)asigval);
                    tmp.addHijo((Nodo)inelseiffor);
                    RESULT=tmp;
                 :}
               | tk_else tk_Linea INELSE_FOR:inelsefor{: 
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Else");
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    nd1.addHijo((Nodo)inelsefor);
                    RESULT=tmp;    
               :}
               | tk_elseif SINTAXELSEIF_FOR:sxelseiffor{:
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Else If");
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    nd1.addHijo((Nodo)sxelseiffor);
                    RESULT=tmp;
                 :}
               | OPERACIONES:oper INELSEIF_FOR:inelseiffor {:
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)oper);
                    tmp.addHijo((Nodo)inelseiffor);
                    RESULT=tmp;
                 :}
               | CONSOLEWRITE:cs INELSEIF_FOR:inelseiffor {:
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)cs);
                    tmp.addHijo((Nodo)inelseiffor);
                    RESULT=tmp;
                 :}
               | SINTAXFOR:sxfor INELSEIF_FOR:inelseiffor{:
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)sxfor);
                    tmp.addHijo((Nodo)inelseiffor);
                    RESULT=tmp;
                 :}
               | SINTAXWHILE_FOR:sxwhilefor INELSEIF_FOR:inelseiffor{:
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)sxwhilefor);
                    tmp.addHijo((Nodo)inelseiffor);
                    RESULT=tmp;
                :}
               | tk_comentario:com tk_Linea INELSEIF_FOR:inelseiffor{:
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Comentario");
                    nd1.setValor(com.toString());
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    tmp.addHijo((Nodo)inelseiffor);
                    RESULT=tmp;
                :}
               | tk_comentario:com tk_Linea{:
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Comentario");
                    nd1.setValor(com.toString());
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    RESULT=tmp;
                :}
               | SINTAXIF_FOR:sxiffor{:
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)sxiffor);
                    RESULT=tmp;
                :}
               | VARIABLE:var{:
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)var);
                    RESULT=tmp;
                :}
               | LLAMADAFUNC:llamfunc{:
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)llamfunc);
                    RESULT=tmp;
                :}
               | ASIGNACIONVAL:asigval{:
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)asigval);
                    RESULT=tmp;
                :}
               | CONSOLEWRITE:cs{:
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)cs);
                    RESULT=tmp;
                :}
               | OPERACIONES:oper{:
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)oper);
                    RESULT=tmp;
                :}
               | SINTAXFOR:sxfor{:
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)sxfor);
                    RESULT=tmp;
                :}
               | SINTAXWHILE_FOR:sxwhilefor{:
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)sxwhilefor);
                    RESULT=tmp;
                :}
               | tk_exit tk_for tk_Linea{:
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Exit For");
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    RESULT=tmp;
            :};

INELSE_FOR ::= SINTAXIF_FOR:sxiffor INELSE_FOR:inelsefor{:
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxiffor);
                tmp.addHijo((Nodo)inelsefor);
                RESULT=tmp;
            :}
           | VARIABLE:var INELSE_FOR:inelsefor{:
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)var);
                tmp.addHijo((Nodo)inelsefor);
                RESULT=tmp;
            :}
           | LLAMADAFUNC:llamfunc INELSE_FOR:inelsefor{:
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)llamfunc);
                tmp.addHijo((Nodo)inelsefor);
                RESULT=tmp;
            :}
           | ASIGNACIONVAL:asigval INELSE_FOR:inelsefor{:
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)asigval);
                tmp.addHijo((Nodo)inelsefor);
                RESULT=tmp;
            :}
           | OPERACIONES:oper INELSE_FOR:inelsefor{:
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)oper);
                tmp.addHijo((Nodo)inelsefor);
                RESULT=tmp;
            :}
           | CONSOLEWRITE:cs INELSE_FOR:inelsefor{:
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)cs);
                tmp.addHijo((Nodo)inelsefor);
                RESULT=tmp;
            :}
           | SINTAXFOR:sxfor INELSE_FOR:inelsefor{:
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxfor);
                tmp.addHijo((Nodo)inelsefor);
                RESULT=tmp;
            :}
           | SINTAXWHILE_FOR:sxwhilefor INELSE_FOR:inelsefor{:
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxwhilefor);
                tmp.addHijo((Nodo)inelsefor);
                RESULT=tmp;
            :}
           | tk_comentario:com tk_Linea INELSE_FOR:inelsefor{:
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Comentario");
                nd1.setValor(com.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);           
                tmp.addHijo((Nodo)inelsefor);
                RESULT=tmp;
            :}
           | tk_comentario:com tk_Linea{:
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Comentario");
                nd1.setValor(com.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                RESULT=tmp;
            :}
           | SINTAXIF_FOR:sxiffor{:
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxiffor);
                RESULT=tmp;
            :}
           | VARIABLE:var{:
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)var);
                RESULT=tmp;
            :}
           | LLAMADAFUNC:llamfunc{:
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)llamfunc);
                RESULT=tmp;
            :}
           | ASIGNACIONVAL:asigval{:
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)asigval);
                RESULT=tmp;
            :}
           | CONSOLEWRITE:cs{:
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)cs);
                RESULT=tmp;
            :}
           | OPERACIONES:oper{:
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)oper);
                RESULT=tmp;
            :}
           | SINTAXFOR:sxfor{:
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxfor);
                RESULT=tmp;
            :}
           | SINTAXWHILE_FOR:sxwhilefor{:
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxwhilefor);
                RESULT=tmp;
            :}
           | tk_exit tk_for tk_Linea{:
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Exit For");
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                RESULT=tmp;
            :};

SINTAXWHILE_FOR ::= tk_do tk_while CONDICION:con tk_Linea INWHILE_FOR:inwhile tk_loop tk_Linea {:
            Nodo tmp = new Nodo("WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Loop");
            nd1.setNumNodo(parser.contador++);
        
            tmp.addHijo((Nodo)con);
            tmp.addHijo((Nodo)inwhile);
            tmp.addHijo(nd1);
            RESULT=tmp;    
        :};

INWHILE_FOR ::= SINTAXFOR:sxfor INWHILE_FOR:inwhilefor{:
            Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxfor);
            tmp.addHijo((Nodo)inwhilefor);
            RESULT=tmp;
        :}
        | VARIABLE:var INWHILE_FOR:inwhilefor{:
            Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            tmp.addHijo((Nodo)inwhilefor);
            RESULT=tmp;
        :}
        | LLAMADAFUNC:llamfunc INWHILE_FOR:inwhilefor{:
           Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)llamfunc);
            tmp.addHijo((Nodo)inwhilefor);
            RESULT=tmp;
        :}
        | ASIGNACIONVAL:asigval INWHILE_FOR:inwhilefor{:
           Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)asigval);
            tmp.addHijo((Nodo)inwhilefor);
            RESULT=tmp;
        :}
        | CONSOLEWRITE:cs INWHILE_FOR:inwhilefor{:
           Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            tmp.addHijo((Nodo)inwhilefor);
            RESULT=tmp;
        :}
        | OPERACIONES:oper INWHILE_FOR:inwhilefor{:
           Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)oper);
            tmp.addHijo((Nodo)inwhilefor);
            RESULT=tmp;
        :}
        | SINTAXWHILE_FOR:sxwhilefor INWHILE_FOR:inwhilefor{:
           Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxwhilefor);
            tmp.addHijo((Nodo)inwhilefor);
            RESULT=tmp;
        :}
        | SINTAXIF_FOR:sxiffor INWHILE_FOR:inwhilefor{:
           Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxiffor);
            tmp.addHijo((Nodo)inwhilefor);
            RESULT=tmp;
        :}
        | tk_comentario:com tk_Linea INWHILE_FOR:inwhilefor{:
            Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            tmp.addHijo((Nodo)inwhilefor);
            RESULT=tmp;
        :}
        | tk_comentario:com tk_Linea{:
            Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
         :}
        | SINTAXFOR:sxfor{:
            Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)sxfor);
            RESULT=tmp;
        :}
        | VARIABLE:var{:
            Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)var);
            RESULT=tmp;
        :}
        | LLAMADAFUNC:llamfunc{:
            Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)llamfunc);
            RESULT=tmp;
        :}
        | ASIGNACIONVAL:asigval{:
            Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)asigval);
            RESULT=tmp;
        :}
        | CONSOLEWRITE:cs{:
            Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)cs);
            RESULT=tmp;
        :}
        | OPERACIONES:oper{:
            Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)oper);
            RESULT=tmp;
        :}
        | SINTAXIF_FOR:sxiffor{:
            Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)sxiffor);
            RESULT=tmp;
        :}
        | SINTAXWHILE_FOR:sxwhilefor{:
            Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)sxwhilefor);
            RESULT=tmp;
        :}
        | tk_exit tk_do tk_Linea{:
            Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Exit do");
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
        :}
        | tk_exit tk_for tk_Linea{:
            Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Exit for");
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
        :};

/*
    DO WHILE
*/

SINTAXIF_WHILE ::= tk_if CONDICION:con tk_then tk_Linea INIF_WHILE:inifwhile tk_end tk_if tk_Linea{:
            Nodo tmp = new Nodo("IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("End if");
            nd1.setNumNodo(parser.contador++);
            
            tmp.addHijo((Nodo)con);
            tmp.addHijo((Nodo)inifwhile);
            tmp.addHijo(nd1);
            RESULT=tmp;
        :};

SINTAXELSEIF_WHILE ::= CONDICION:con tk_then tk_Linea INELSEIF_WHILE:inelseifwhile{:
            Nodo tmp = new Nodo("ELSE IF");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)con);
            tmp.addHijo((Nodo)inelseifwhile);
            RESULT=tmp;
        :};

INIF_WHILE ::= SINTAXIF_WHILE:sxifwhile INIF_WHILE:inifwhile{:
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxifwhile);
                tmp.addHijo((Nodo)inifwhile);
                RESULT=tmp;
            :}
         | VARIABLE:var INIF_WHILE:inifwhile{:
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)var);
                tmp.addHijo((Nodo)inifwhile);
                RESULT=tmp;
            :}
         | LLAMADAFUNC:llamfunc INIF_WHILE:inifwhile{:
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)llamfunc);
                tmp.addHijo((Nodo)inifwhile);
                RESULT=tmp;
            :}
         | ASIGNACIONVAL:asigval INIF_WHILE:inifwhile{:
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)asigval);
                tmp.addHijo((Nodo)inifwhile);
                RESULT=tmp;
            :}
         | OPERACIONES:oper INIF_WHILE:inifwhile{:
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)oper);
                tmp.addHijo((Nodo)inifwhile);
                RESULT=tmp;
            :}
         | CONSOLEWRITE:cs INIF_WHILE:inifwhile{:
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)cs);
                tmp.addHijo((Nodo)inifwhile);
                RESULT=tmp;
            :}
         | SINTAXFOR_WHILE:sxforwhile INIF_WHILE:inifwhile{:
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxforwhile);
                tmp.addHijo((Nodo)inifwhile);
                RESULT=tmp;
            :}
         | SINTAXWHILE:sxwhile INIF_WHILE:inifwhile{:
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxwhile);
                tmp.addHijo((Nodo)inifwhile);
                RESULT=tmp;
            :}
         | tk_comentario:com tk_Linea INIF_WHILE:inifwhile{:
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Comentario");
                nd1.setValor(com.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)inifwhile);
                RESULT=tmp;
            :}
         | tk_comentario:com tk_Linea{:
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Comentario");
                nd1.setValor(com.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                RESULT=tmp;
            :}
         | SINTAXIF_WHILE:sxifwhile{:
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxifwhile);
                RESULT=tmp;
            :}
         | VARIABLE:var{:
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)var);
                RESULT=tmp;
            :}
         | LLAMADAFUNC:llamfunc{:
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)llamfunc);
                RESULT=tmp;
            :}
         | ASIGNACIONVAL:asigval{:
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)asigval);
                RESULT=tmp;
            :}
         | CONSOLEWRITE:cs{:
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)cs);
                RESULT=tmp;
            :}
         | OPERACIONES:oper{:
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)oper);
                RESULT=tmp;
            :}
         | SINTAXFOR_WHILE:sxforwhile{:
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxforwhile);
                RESULT=tmp;
            :}
         | SINTAXWHILE:sxwhile{:
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxwhile);
                RESULT=tmp;
            :}
         | tk_exit tk_do tk_Linea{:
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Exit Do");
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                RESULT=tmp;
            :}
         | tk_else tk_Linea INELSE_WHILE:inelsewhile{:
                Nodo tmp = new Nodo("ELSE");
                tmp.setNumNodo(parser.contador++);

                tmp.addHijo((Nodo)inelsewhile);
                RESULT=tmp;
            :}
         | tk_elseif SINTAXELSEIF_WHILE:sxelseifwhile{:
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);

                tmp.addHijo((Nodo)sxelseifwhile);
                RESULT=tmp;
            :};

INELSEIF_WHILE ::= SINTAXWHILE:sxwhile INELSEIF_WHILE:inelseifwhile {:
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)sxwhile);
                    tmp.addHijo((Nodo)inelseifwhile);
                    RESULT=tmp;
                :}
               | SINTAXIF_WHILE:sxifwhile INELSEIF_WHILE:inelseifwhile{:
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)sxifwhile);
                    tmp.addHijo((Nodo)inelseifwhile);
                    RESULT=tmp;
                :} 
               | VARIABLE:var INELSEIF_WHILE:inelseifwhile {:
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)var);
                    tmp.addHijo((Nodo)inelseifwhile);
                    RESULT=tmp;
                :}
               | LLAMADAFUNC:llamfunc INELSEIF_WHILE:inelseifwhile{:
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)llamfunc);
                    tmp.addHijo((Nodo)inelseifwhile);
                    RESULT=tmp;
                :} 
               | ASIGNACIONVAL:asigval INELSEIF_WHILE:inelseifwhile{:
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)asigval);
                    tmp.addHijo((Nodo)inelseifwhile);
                    RESULT=tmp;
                :}
               | tk_else tk_Linea INELSE_WHILE:inelsewhile{:
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Else");
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    nd1.addHijo((Nodo)inelsewhile);
                    RESULT=tmp;
                :}
               | tk_elseif  SINTAXELSEIF_WHILE:sxelseifwhile{:
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Else If");
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    nd1.addHijo((Nodo)sxelseifwhile);
                    RESULT=tmp;
                :}
               | OPERACIONES:oper INELSEIF_WHILE:inelseifwhile{:
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)oper);
                    tmp.addHijo((Nodo)inelseifwhile);
                    RESULT=tmp;
                :} 
               | CONSOLEWRITE:cs INELSEIF_WHILE:inelseifwhile {:
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)cs);
                    tmp.addHijo((Nodo)inelseifwhile);
                    RESULT=tmp;
                :}
               | SINTAXFOR_WHILE:sxforwhile INELSEIF_WHILE:inelseifwhile{:
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)sxforwhile);
                    tmp.addHijo((Nodo)inelseifwhile);
                    RESULT=tmp;
                :}
               | tk_comentario:com tk_Linea INELSEIF_WHILE:inelseifwhile{:
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Comentario");
                    nd1.setValor(com.toString());
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    tmp.addHijo((Nodo)inelseifwhile);
                    RESULT=tmp;
                :}
               | tk_comentario:com tk_Linea{:
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Comentario");
                    nd1.setValor(com.toString());
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    RESULT=tmp;
                :}
               | SINTAXWHILE:sxwhile{:
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)sxwhile);
                    RESULT=tmp;
                :}
               | SINTAXIF_WHILE:sxifwhile{:
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)sxifwhile);
                    RESULT=tmp;
                :}
               | VARIABLE:var{:
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)var);
                    RESULT=tmp;
                :}
               | LLAMADAFUNC:llamfunc{:
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)llamfunc);
                    RESULT=tmp;
                :}
               | ASIGNACIONVAL:asigval{:
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)asigval);
                    RESULT=tmp;
                :}
               | CONSOLEWRITE:cs{:
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)cs);
                    RESULT=tmp;
                :}
               | OPERACIONES:oper{:
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)oper);
                    RESULT=tmp;
                :}
               | SINTAXFOR_WHILE:sxforwhile{:
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)sxforwhile);
                    RESULT=tmp;
                :}
               | tk_exit tk_do tk_Linea{:
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Exit Do");
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    RESULT=tmp;
                :};

INELSE_WHILE ::= SINTAXWHILE:sxwhile INELSE_WHILE:inelsewhile{:
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxwhile);
                tmp.addHijo((Nodo)inelsewhile);
                RESULT=tmp;
            :}
           | SINTAXIF_WHILE:sxifwhile INELSE_WHILE:inelsewhile{:
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxifwhile);
                tmp.addHijo((Nodo)inelsewhile);
                RESULT=tmp;
            :}
           | VARIABLE:var INELSE_WHILE:inelsewhile{:
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)var);
                tmp.addHijo((Nodo)inelsewhile);
                RESULT=tmp;
            :}
           | LLAMADAFUNC:llamfunc INELSE_WHILE:inelsewhile{:
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)llamfunc);
                tmp.addHijo((Nodo)inelsewhile);
                RESULT=tmp;
            :}
           | ASIGNACIONVAL:asigval INELSE_WHILE:inelsewhile{:
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)asigval);
                tmp.addHijo((Nodo)inelsewhile);
                RESULT=tmp;
            :}
           | OPERACIONES:oper INELSE_WHILE:inelsewhile{:
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)oper);
                tmp.addHijo((Nodo)inelsewhile);
                RESULT=tmp;
            :}
           | CONSOLEWRITE:cs INELSE_WHILE:inelsewhile{:
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)cs);
                tmp.addHijo((Nodo)inelsewhile);
                RESULT=tmp;
            :}
           | SINTAXFOR_WHILE:sxforwhile INELSE_WHILE:inelsewhile{:
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxforwhile);
                tmp.addHijo((Nodo)inelsewhile);
                RESULT=tmp;
            :}
           | tk_comentario:com tk_Linea INELSE_WHILE:inelsewhile{:
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Comentario");
                nd1.setValor(com.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);           
                tmp.addHijo((Nodo)inelsewhile);
                RESULT=tmp;
            :}
           | tk_comentario:com tk_Linea{:
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Comentario");
                nd1.setValor(com.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                RESULT=tmp;
            :}
           | SINTAXWHILE:sxwhile{:
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxwhile);
                RESULT=tmp;
            :}
           | SINTAXIF_WHILE:sxifwhile{:
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxifwhile);
                RESULT=tmp;
            :}
           | VARIABLE:var{:
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)var);
                RESULT=tmp;
            :}
           | LLAMADAFUNC:llamfunc{:
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)llamfunc);
                RESULT=tmp;
            :}
           | ASIGNACIONVAL:asigval{:
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)asigval);
                RESULT=tmp;
            :}
           | CONSOLEWRITE:cs{:
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)cs);
                RESULT=tmp;
            :}
           | OPERACIONES:oper{:
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)oper);
                RESULT=tmp;
            :}
           | SINTAXFOR_WHILE:sxforwhile{:
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxforwhile);
                RESULT=tmp;
            :}
           | tk_exit tk_do tk_Linea{:
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Exit Do");
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                RESULT=tmp;
            :};

SINTAXFOR_WHILE ::= tk_for tk_Identificador:i tk_Igual iDNUM:idn tk_to iDNUM:idnn tk_step AUMDEC:aumdec tk_Linea INFOR_WHILE:inforwhile tk_next tk_Identificador:ii tk_Linea{: 
                    Nodo tmp = new Nodo("For");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Identificador");
                    nd1.setValor(i.toString());
                    nd1.setNumNodo(parser.contador++);
                    
                    Nodo nd2 = new Nodo("Identificador");
                    nd2.setValor(ii.toString());
                    nd2.setNumNodo(parser.contador++);
                    
                    tmp.addHijo(nd1);
                    tmp.addHijo((Nodo)idn);
                    tmp.addHijo((Nodo)idnn);
                    tmp.addHijo((Nodo)aumdec);
                    tmp.addHijo((Nodo)inforwhile);
                    tmp.addHijo(nd2);
                    RESULT=tmp;
            :}
            | tk_for tk_Identificador:i tk_Igual iDNUM:idn tk_to OPERACIONES:oper INFOR_WHILE:inforwhile tk_next tk_Identificador:ii tk_Linea{:
                    Nodo tmp = new Nodo("For");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Identificador");
                    nd1.setValor(i.toString());
                    nd1.setNumNodo(parser.contador++);
                    
                    Nodo nd2 = new Nodo("Identificador");
                    nd2.setValor(ii.toString());
                    nd2.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    tmp.addHijo((Nodo)idn);
                    tmp.addHijo((Nodo)oper);
                    tmp.addHijo((Nodo)inforwhile);
                    tmp.addHijo(nd2);
                    RESULT=tmp;
            :};

INFOR_WHILE ::= SINTAXWHILE:sxwhile INFOR_WHILE:inforwhile{:
                Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxwhile);
                tmp.addHijo((Nodo)inforwhile);
                RESULT=tmp;
            :}
        | SINTAXFOR_WHILE:sxforwhile INFOR_WHILE:inforwhile {:
                Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxforwhile);
                tmp.addHijo((Nodo)inforwhile);
                RESULT=tmp;
            :}
        | SINTAXIF_WHILE:sxifwhile INFOR_WHILE:inforwhile {:
                Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxifwhile);
                tmp.addHijo((Nodo)inforwhile);
                RESULT=tmp;
            :}
        | VARIABLE:var INFOR_WHILE:inforwhile {:
                Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)var);
                tmp.addHijo((Nodo)inforwhile);
                RESULT=tmp;
            :}
        | LLAMADAFUNC:llamfunc INFOR_WHILE:inforwhile {:
                Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)llamfunc);
                tmp.addHijo((Nodo)inforwhile);
                RESULT=tmp;
            :}
        | ASIGNACIONVAL:asigval INFOR_WHILE:inforwhile {:
                Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)asigval);
                tmp.addHijo((Nodo)inforwhile);
                RESULT=tmp;
            :}
        | CONSOLEWRITE:cs INFOR_WHILE:inforwhile {:
                Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)cs);
                tmp.addHijo((Nodo)inforwhile);
                RESULT=tmp;
            :}
        | OPERACIONES:oper INFOR_WHILE:inforwhile {:
                Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)oper);
                tmp.addHijo((Nodo)inforwhile);
                RESULT=tmp;
            :}
        | tk_comentario:com tk_Linea INFOR_WHILE:inforwhile{:
                Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Comentario");
                nd1.setValor(com.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);           
                tmp.addHijo((Nodo)inforwhile);
                RESULT=tmp;
            :}
        | tk_comentario:com tk_Linea{:
                Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Comentario");
                nd1.setValor(com.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                RESULT=tmp;
            :}
        | SINTAXWHILE:sxwhile{:
            Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxwhile);
                RESULT=tmp;
          :}
        | SINTAXFOR_WHILE:sxforwhile{:
            Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxforwhile);
                RESULT=tmp;
          :}
        | SINTAXIF_WHILE:sxifwhile{:
            Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxifwhile);
                RESULT=tmp;
          :}
        | VARIABLE:var{:
            Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)var);
                RESULT=tmp;
          :}
        | LLAMADAFUNC:llamfunc{:
            Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)llamfunc);
                RESULT=tmp;
          :}
        | ASIGNACIONVAL:asigval{:
            Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)asigval);
                RESULT=tmp;
          :}
        | CONSOLEWRITE:cs{:
            Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)cs);
                RESULT=tmp;
          :}
        | OPERACIONES:oper{:
            Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)oper);
                RESULT=tmp;
          :}
        | tk_exit tk_do tk_Linea{:
            Nodo tmp = new Nodo("IN WHILE FOR");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Exit do");
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
        :}
        | tk_exit tk_for tk_Linea{:
            Nodo tmp = new Nodo("IN WHILE FOR");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Exit for");
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
        :};

SINTAXWHILE ::= tk_do tk_while CONDICION:con tk_Linea INWHILE:inwhile tk_loop tk_Linea {:
            Nodo tmp = new Nodo("WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Loop");
            nd1.setNumNodo(parser.contador++);
        
            tmp.addHijo((Nodo)con);
            tmp.addHijo((Nodo)inwhile);
            tmp.addHijo(nd1);
            RESULT=tmp;    
        :};

INWHILE ::= SINTAXWHILE:sxwhile INWHILE:inwhile{:
            Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxwhile);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
        :}
        | SINTAXFOR_WHILE:sxforwhile INWHILE:inwhile{:
           Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxforwhile);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
        :}
        | SINTAXIF_WHILE:sxifwhile INWHILE:inwhile{:
           Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxifwhile);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
        :}
        | VARIABLE:var INWHILE:inwhile{:
           Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
        :}
        | LLAMADAFUNC:llamfunc INWHILE:inwhile{:
           Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)llamfunc);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
        :}
        | ASIGNACIONVAL:asigval INWHILE:inwhile{:
           Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)asigval);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
        :}
        | CONSOLEWRITE:cs INWHILE:inwhile{:
           Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
        :}
        | OPERACIONES:oper INWHILE:inwhile{:
           Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)oper);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
        :}
        |  tk_comentario:com tk_Linea INWHILE:inwhile{:
            Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
        :}
        | tk_comentario:com tk_Linea{:
            Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
         :}
        | SINTAXWHILE:sxwhile{:
            Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)sxwhile);
            RESULT=tmp;
        :}
        | SINTAXFOR_WHILE:sxforwhile{:
            Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)sxforwhile);
            RESULT=tmp;
        :}
        | SINTAXIF_WHILE:sxifwhile{:
            Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)sxifwhile);
            RESULT=tmp;
        :}
        | VARIABLE:var{:
            Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)var);
            RESULT=tmp;
        :}
        | LLAMADAFUNC:llamfunc{:
            Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)llamfunc);
            RESULT=tmp;
        :}
        | ASIGNACIONVAL:asigval{:
            Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)asigval);
            RESULT=tmp;
        :}
        | CONSOLEWRITE:cs{:
            Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)cs);
            RESULT=tmp;
        :}
        | OPERACIONES:oper{:
            Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)oper);
            RESULT=tmp;
        :}
        | tk_exit tk_do tk_Linea{:
            Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Exit do");
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
        :};