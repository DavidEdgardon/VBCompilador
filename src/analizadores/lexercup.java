/* The following code was generated by JFlex 1.4.3 on 03-21-21 10:42 PM */

package analizadores;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 03-21-21 10:42 PM from the specification file
 * <tt>C:/Users/David/Documents/NetBeansProjects/VBCompilador/src/analizadores/lexercup.flex</tt>
 */
class lexercup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\5\2\0\1\3\22\0\1\2\1\0\1\4\2\0"+
    "\1\43\1\0\1\6\1\52\1\53\1\41\1\37\1\45\1\40\1\46"+
    "\1\42\12\1\2\0\1\50\1\51\1\47\2\0\1\30\1\21\1\23"+
    "\1\26\1\25\1\32\1\33\1\34\1\10\2\7\1\22\1\11\1\31"+
    "\1\14\1\13\1\7\1\15\1\17\1\16\1\20\1\36\1\27\1\35"+
    "\1\24\1\7\3\0\1\44\1\7\1\0\1\30\1\21\1\23\1\26"+
    "\1\25\1\32\1\33\1\34\1\10\2\7\1\22\1\11\1\31\1\14"+
    "\1\13\1\7\1\15\1\17\1\16\1\20\1\36\1\27\1\35\1\24"+
    "\1\7\1\0\1\12\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\2\1\21\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\0\1\22\1\23\1\4"+
    "\1\23\4\4\1\24\1\25\2\4\1\24\12\4\2\26"+
    "\12\4\2\25\10\4\1\27\1\30\1\31\4\4\1\32"+
    "\1\4\1\32\1\4\1\33\2\4\1\34\2\4\1\35"+
    "\4\4\2\33\6\4\1\34\3\4\2\35\6\4\2\34"+
    "\3\4\1\35\1\4\1\33\1\4\2\36\1\4\1\36"+
    "\1\37\2\4\1\40\1\41\1\42\4\4\1\40\2\4"+
    "\1\41\3\4\1\43\1\40\2\4\1\44\1\45\2\4"+
    "\1\42\1\41\1\4\1\40\1\45\1\4\1\42\1\36"+
    "\1\44\1\37\5\4\1\46\1\4\1\46\2\4\1\47"+
    "\2\4\1\47\1\4\3\50\2\4\2\46\3\4\1\47"+
    "\5\4\1\47\1\50\1\4\1\51\1\4\1\52\1\53"+
    "\1\54\1\4\1\52\2\4\1\51\4\4\1\51\1\4"+
    "\1\51\1\54\1\53\1\52\1\4\1\51\1\54\1\55"+
    "\4\4\1\55\1\4\1\56\1\57\1\56\2\57\1\56"+
    "\1\4\1\60\1\61\1\60\1\4\1\60\1\62\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294"+
    "\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c\0\u03c8\0\u03f4"+
    "\0\54\0\54\0\54\0\54\0\54\0\54\0\54\0\54"+
    "\0\u0420\0\u044c\0\54\0\54\0\54\0\u0478\0\u0108\0\u04a4"+
    "\0\u04a4\0\u0134\0\u04d0\0\u04fc\0\u0528\0\u0554\0\u0580\0\u05ac"+
    "\0\u05d8\0\u0604\0\u0134\0\u0630\0\u065c\0\u0688\0\u06b4\0\u06e0"+
    "\0\u070c\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8\0\u0134\0\u0814"+
    "\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c\0\u0948\0\u0974"+
    "\0\u09a0\0\u0554\0\u0134\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u0a7c"+
    "\0\u0aa8\0\u0ad4\0\u0b00\0\54\0\54\0\u0478\0\u0b2c\0\u0b58"+
    "\0\u0b84\0\u0bb0\0\u0134\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c"+
    "\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c\0\u0bb0\0\u0d68\0\u0d94\0\u0dc0"+
    "\0\u0dec\0\u0e18\0\u0134\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u0c60"+
    "\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4\0\u0b2c\0\u0134\0\u0fd0"+
    "\0\u0ffc\0\u1028\0\u1054\0\u0ce4\0\u1080\0\u0ec8\0\u0134\0\u10ac"+
    "\0\u10d8\0\u1104\0\u1130\0\u115c\0\u1188\0\u11b4\0\u0134\0\u11e0"+
    "\0\u11e0\0\u120c\0\u1238\0\u1264\0\u1290\0\u12bc\0\u0134\0\u1238"+
    "\0\u12e8\0\u1314\0\u1340\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c"+
    "\0\u141c\0\u1448\0\u1474\0\u14a0\0\u0134\0\u14cc\0\u14f8\0\u0134"+
    "\0\u0134\0\u1524\0\u1550\0\u0134\0\u157c\0\u1238\0\u1238\0\u1448"+
    "\0\u15a8\0\u13c4\0\u14f8\0\u1264\0\u0134\0\u15d4\0\u120c\0\u1600"+
    "\0\u162c\0\u1658\0\u1684\0\u1684\0\u0134\0\u16b0\0\u16dc\0\u1708"+
    "\0\u1734\0\u1760\0\u178c\0\u17b8\0\u17e4\0\u1734\0\u0134\0\u1810"+
    "\0\u183c\0\u1868\0\u1894\0\u18c0\0\u18ec\0\u1918\0\u0134\0\u1894"+
    "\0\u1944\0\u1970\0\u199c\0\u19c8\0\u1894\0\u1760\0\u19f4\0\u0134"+
    "\0\u1a20\0\u0134\0\u0134\0\u0134\0\u1a4c\0\u1a78\0\u1aa4\0\u1ad0"+
    "\0\u19f4\0\u1afc\0\u1b28\0\u1b54\0\u1b80\0\u1b80\0\u1bac\0\u1aa4"+
    "\0\u1afc\0\u19f4\0\u1aa4\0\u1bd8\0\u1c04\0\u1b54\0\u0134\0\u1c30"+
    "\0\u1c5c\0\u1c88\0\u1cb4\0\u1ce0\0\u1d0c\0\u0134\0\u1cb4\0\u1c30"+
    "\0\u0134\0\u1c30\0\u1c88\0\u1d38\0\u0134\0\u0134\0\u1d64\0\u1d64"+
    "\0\u1d38\0\u0134\0\u0134";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\10\1\15\1\16\1\17"+
    "\1\10\1\20\1\21\1\22\1\10\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\4\10\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\55\0\1\3\54\0\1\4\54\0\1\5\1\0"+
    "\1\5\46\0\5\46\1\0\46\46\5\47\1\0\46\47"+
    "\1\0\1\10\5\0\30\10\16\0\1\10\5\0\3\10"+
    "\1\50\16\10\1\51\1\52\4\10\16\0\1\10\5\0"+
    "\3\10\1\53\1\10\1\54\13\10\1\55\6\10\16\0"+
    "\1\10\5\0\1\10\1\56\1\10\1\57\1\10\1\60"+
    "\1\61\1\62\1\63\1\64\1\10\1\65\1\10\1\66"+
    "\1\67\2\10\1\70\1\71\1\52\1\10\1\72\1\73"+
    "\1\10\16\0\1\10\5\0\3\10\1\74\5\10\1\74"+
    "\16\10\16\0\1\10\5\0\3\10\1\75\12\10\1\75"+
    "\11\10\16\0\1\10\5\0\3\10\1\76\1\10\1\77"+
    "\1\100\16\10\1\101\2\10\16\0\1\10\5\0\3\10"+
    "\1\102\3\10\1\62\1\10\1\103\16\10\16\0\1\10"+
    "\5\0\3\10\1\104\1\10\1\105\7\10\1\66\12\10"+
    "\16\0\1\10\5\0\3\10\1\106\1\10\1\106\22\10"+
    "\16\0\1\10\5\0\3\10\1\107\1\10\1\107\22\10"+
    "\16\0\1\10\5\0\3\10\1\110\7\10\1\65\6\10"+
    "\1\111\3\10\1\73\1\10\16\0\1\10\5\0\1\10"+
    "\1\56\1\10\1\112\1\10\1\113\22\10\16\0\1\10"+
    "\5\0\3\10\1\114\2\10\1\115\16\10\1\116\2\10"+
    "\16\0\1\10\5\0\3\10\1\63\4\10\1\63\17\10"+
    "\16\0\1\10\5\0\3\10\1\117\12\10\1\117\11\10"+
    "\16\0\1\10\5\0\3\10\1\120\1\10\1\121\3\10"+
    "\1\122\7\10\1\123\6\10\66\0\1\124\53\0\1\125"+
    "\2\0\4\46\1\126\1\0\46\46\1\0\1\10\5\0"+
    "\3\10\1\127\3\10\1\127\20\10\16\0\1\10\5\0"+
    "\1\10\1\130\1\10\1\131\13\10\1\132\10\10\16\0"+
    "\1\10\5\0\3\10\1\132\13\10\1\132\10\10\16\0"+
    "\1\10\5\0\1\10\1\130\1\10\1\130\24\10\16\0"+
    "\1\10\5\0\2\10\2\133\24\10\16\0\1\10\5\0"+
    "\1\10\1\134\1\133\1\135\1\10\1\136\1\137\1\127"+
    "\1\140\1\141\1\142\1\143\2\10\1\144\1\145\1\10"+
    "\1\146\1\147\3\10\1\150\1\151\16\0\1\10\5\0"+
    "\3\10\1\152\1\10\1\136\1\153\10\10\1\132\2\10"+
    "\1\154\5\10\16\0\1\10\5\0\1\10\1\155\1\10"+
    "\1\156\5\10\1\141\16\10\16\0\1\10\5\0\3\10"+
    "\1\157\2\10\1\160\7\10\1\161\11\10\16\0\1\10"+
    "\5\0\3\10\1\162\6\10\1\142\7\10\1\163\5\10"+
    "\16\0\1\10\5\0\3\10\1\140\4\10\1\140\17\10"+
    "\16\0\1\10\5\0\3\10\1\151\23\10\1\151\16\0"+
    "\1\10\5\0\3\10\1\164\15\10\1\146\4\10\1\150"+
    "\1\10\16\0\1\10\5\0\1\10\1\130\1\10\1\165"+
    "\7\10\1\143\14\10\16\0\1\10\5\0\3\10\1\166"+
    "\3\10\1\127\7\10\1\167\10\10\16\0\1\10\5\0"+
    "\1\10\1\170\1\10\1\171\12\10\1\172\11\10\16\0"+
    "\1\10\5\0\1\10\1\173\1\10\1\173\24\10\16\0"+
    "\1\10\5\0\3\10\1\174\6\10\1\174\15\10\16\0"+
    "\1\10\5\0\3\10\1\146\15\10\1\146\6\10\16\0"+
    "\1\10\5\0\3\10\1\175\5\10\1\141\4\10\1\172"+
    "\11\10\16\0\1\10\5\0\3\10\1\141\5\10\1\141"+
    "\16\10\16\0\1\10\5\0\3\10\1\172\12\10\1\172"+
    "\11\10\16\0\1\10\5\0\3\10\1\176\2\10\1\160"+
    "\3\10\1\177\3\10\1\161\11\10\16\0\1\10\5\0"+
    "\3\10\1\177\6\10\1\177\15\10\16\0\1\10\5\0"+
    "\3\10\1\200\1\10\1\201\21\10\1\151\16\0\1\10"+
    "\5\0\3\10\1\201\1\10\1\201\22\10\16\0\1\10"+
    "\5\0\3\10\1\202\1\10\1\202\22\10\16\0\1\10"+
    "\5\0\3\10\1\154\16\10\1\154\5\10\16\0\1\10"+
    "\5\0\1\10\1\173\1\10\1\203\4\10\1\140\6\10"+
    "\1\167\10\10\16\0\1\10\5\0\3\10\1\167\13\10"+
    "\1\167\10\10\16\0\1\10\5\0\1\10\1\204\1\10"+
    "\1\204\24\10\16\0\1\10\5\0\1\10\1\155\1\10"+
    "\1\155\24\10\16\0\1\10\5\0\1\10\1\170\1\10"+
    "\1\170\24\10\16\0\1\10\5\0\3\10\1\150\22\10"+
    "\1\150\1\10\16\0\1\10\5\0\3\10\1\205\2\10"+
    "\1\153\4\10\1\143\6\10\1\163\5\10\16\0\1\10"+
    "\5\0\3\10\1\153\2\10\1\153\21\10\16\0\1\10"+
    "\5\0\3\10\1\163\16\10\1\163\5\10\16\0\1\10"+
    "\5\0\3\10\1\143\7\10\1\143\14\10\16\0\1\10"+
    "\5\0\3\10\1\206\12\10\1\206\11\10\16\0\1\10"+
    "\5\0\3\10\1\207\16\10\1\207\5\10\16\0\1\10"+
    "\5\0\3\10\1\210\5\10\1\211\10\10\1\207\5\10"+
    "\16\0\1\10\5\0\3\10\1\211\5\10\1\211\16\10"+
    "\16\0\1\10\5\0\3\10\1\212\3\10\1\213\3\10"+
    "\1\214\6\10\1\207\5\10\16\0\1\10\5\0\1\10"+
    "\1\215\1\10\1\216\1\217\2\10\1\220\1\221\1\222"+
    "\1\10\1\223\1\224\1\10\1\225\1\226\1\10\1\227"+
    "\1\207\5\10\16\0\1\10\5\0\3\10\1\230\1\217"+
    "\6\10\1\231\14\10\16\0\1\10\5\0\1\10\1\215"+
    "\1\10\1\232\5\10\1\233\16\10\16\0\1\10\5\0"+
    "\3\10\1\234\12\10\1\234\11\10\16\0\1\10\5\0"+
    "\3\10\1\235\12\10\1\235\11\10\16\0\1\10\5\0"+
    "\3\10\1\236\7\10\1\236\14\10\16\0\1\10\5\0"+
    "\3\10\1\237\4\10\1\237\17\10\16\0\1\10\5\0"+
    "\3\10\1\240\1\241\15\10\1\240\5\10\16\0\1\10"+
    "\5\0\3\10\1\226\13\10\1\226\10\10\16\0\1\10"+
    "\5\0\3\10\1\242\4\10\1\243\3\10\1\224\13\10"+
    "\16\0\1\10\5\0\3\10\1\244\3\10\1\244\20\10"+
    "\16\0\1\10\5\0\3\10\1\227\15\10\1\227\6\10"+
    "\16\0\1\10\5\0\3\10\1\245\1\217\3\10\1\243"+
    "\1\211\1\10\1\231\14\10\16\0\1\10\5\0\3\10"+
    "\1\243\4\10\1\243\17\10\16\0\1\10\5\0\3\10"+
    "\1\246\3\10\1\246\20\10\16\0\1\10\5\0\3\10"+
    "\1\247\3\10\1\246\6\10\1\235\11\10\16\0\1\10"+
    "\5\0\1\10\1\215\1\10\1\250\1\241\4\10\1\233"+
    "\16\10\16\0\1\10\5\0\3\10\2\241\23\10\16\0"+
    "\1\10\5\0\3\10\1\251\7\10\1\236\1\224\13\10"+
    "\16\0\1\10\5\0\3\10\1\224\10\10\1\224\13\10"+
    "\16\0\1\10\5\0\3\10\1\252\3\10\1\244\7\10"+
    "\1\226\10\10\16\0\1\10\5\0\3\10\1\253\4\10"+
    "\1\237\11\10\1\207\5\10\16\0\1\10\5\0\3\10"+
    "\1\214\7\10\1\214\14\10\16\0\1\10\5\0\3\10"+
    "\1\254\7\10\1\214\6\10\1\240\5\10\16\0\1\10"+
    "\5\0\3\10\1\240\16\10\1\240\5\10\16\0\1\10"+
    "\5\0\3\10\1\255\3\10\1\255\20\10\16\0\1\10"+
    "\5\0\3\10\1\235\12\10\1\235\3\10\1\240\5\10"+
    "\16\0\1\10\5\0\3\10\1\256\7\10\1\231\5\10"+
    "\1\227\6\10\16\0\1\10\5\0\3\10\1\231\7\10"+
    "\1\231\14\10\16\0\1\10\5\0\3\10\2\217\23\10"+
    "\16\0\1\10\5\0\3\10\1\234\3\10\1\255\6\10"+
    "\1\234\11\10\16\0\1\10\5\0\3\10\1\257\3\10"+
    "\1\246\3\10\1\214\14\10\16\0\1\10\5\0\3\10"+
    "\1\260\4\10\1\237\3\10\1\224\13\10\16\0\1\10"+
    "\5\0\3\10\1\261\20\10\1\261\3\10\16\0\1\10"+
    "\5\0\3\10\1\262\7\10\1\262\14\10\16\0\1\10"+
    "\5\0\3\10\1\263\12\10\1\263\11\10\16\0\1\10"+
    "\5\0\3\10\1\264\12\10\1\264\11\10\16\0\1\10"+
    "\5\0\3\10\1\265\12\10\1\265\11\10\16\0\1\10"+
    "\5\0\3\10\1\266\16\10\1\266\5\10\16\0\1\10"+
    "\5\0\1\10\1\267\1\10\1\270\1\10\1\271\1\10"+
    "\1\272\3\10\1\273\1\274\1\10\1\275\3\10\1\266"+
    "\1\10\1\261\3\10\16\0\1\10\5\0\3\10\1\276"+
    "\1\10\1\271\10\10\1\277\11\10\16\0\1\10\5\0"+
    "\3\10\1\300\7\10\1\262\1\274\13\10\16\0\1\10"+
    "\5\0\1\10\1\301\1\10\1\302\12\10\1\303\11\10"+
    "\16\0\1\10\5\0\3\10\1\272\3\10\1\272\20\10"+
    "\16\0\1\10\5\0\1\10\1\304\1\10\1\305\20\10"+
    "\1\261\3\10\16\0\1\10\5\0\3\10\1\306\7\10"+
    "\1\306\14\10\16\0\1\10\5\0\3\10\1\307\7\10"+
    "\1\307\14\10\16\0\1\10\5\0\3\10\1\310\12\10"+
    "\1\310\11\10\16\0\1\10\5\0\3\10\1\311\10\10"+
    "\1\274\5\10\1\266\5\10\16\0\1\10\5\0\3\10"+
    "\1\274\10\10\1\274\13\10\16\0\1\10\5\0\1\10"+
    "\1\304\1\10\1\304\24\10\16\0\1\10\5\0\1\10"+
    "\1\301\1\10\1\301\24\10\16\0\1\10\5\0\3\10"+
    "\1\277\12\10\1\277\11\10\16\0\1\10\5\0\3\10"+
    "\1\312\1\10\1\271\1\10\1\272\20\10\16\0\1\10"+
    "\5\0\3\10\1\271\1\10\1\271\22\10\16\0\1\10"+
    "\5\0\3\10\1\313\1\10\1\271\5\10\1\262\2\10"+
    "\1\310\11\10\16\0\1\10\5\0\1\10\1\301\1\10"+
    "\1\314\3\10\1\272\20\10\16\0\1\10\5\0\3\10"+
    "\1\315\7\10\1\307\2\10\1\310\11\10\16\0\1\10"+
    "\5\0\3\10\1\316\3\10\1\272\6\10\1\277\11\10"+
    "\16\0\1\10\5\0\3\10\1\317\12\10\1\317\11\10"+
    "\16\0\1\10\5\0\3\10\1\320\12\10\1\320\11\10"+
    "\16\0\1\10\5\0\3\10\1\321\7\10\1\321\14\10"+
    "\16\0\1\10\5\0\3\10\1\322\20\10\1\322\3\10"+
    "\16\0\1\10\5\0\3\10\1\323\10\10\1\324\6\10"+
    "\1\323\4\10\16\0\1\10\5\0\1\10\1\325\1\10"+
    "\1\326\3\10\1\327\3\10\1\330\1\324\1\10\1\331"+
    "\2\10\1\332\1\10\1\323\1\322\3\10\16\0\1\10"+
    "\5\0\3\10\1\333\7\10\1\333\14\10\16\0\1\10"+
    "\5\0\1\10\1\334\1\10\1\334\24\10\16\0\1\10"+
    "\5\0\1\10\1\335\1\10\1\336\12\10\1\320\11\10"+
    "\16\0\1\10\5\0\3\10\1\327\3\10\1\327\20\10"+
    "\16\0\1\10\5\0\3\10\1\337\7\10\1\321\5\10"+
    "\1\332\6\10\16\0\1\10\5\0\3\10\1\340\3\10"+
    "\1\327\6\10\1\320\11\10\16\0\1\10\5\0\3\10"+
    "\1\324\10\10\1\324\13\10\16\0\1\10\5\0\3\10"+
    "\1\341\10\10\1\324\4\10\1\332\6\10\16\0\1\10"+
    "\5\0\3\10\1\332\15\10\1\332\6\10\16\0\1\10"+
    "\5\0\3\10\1\323\17\10\1\323\4\10\16\0\1\10"+
    "\5\0\3\10\1\342\12\10\1\317\4\10\1\323\4\10"+
    "\16\0\1\10\5\0\1\10\1\335\1\10\1\335\24\10"+
    "\16\0\1\10\5\0\3\10\1\343\3\10\1\327\14\10"+
    "\1\322\3\10\16\0\1\10\5\0\1\10\1\334\1\10"+
    "\1\344\7\10\1\333\14\10\16\0\1\10\5\0\3\10"+
    "\1\345\7\10\1\333\2\10\1\320\2\10\1\332\6\10"+
    "\16\0\1\10\5\0\1\10\1\334\1\10\1\346\10\10"+
    "\1\324\13\10\16\0\1\10\5\0\3\10\1\347\2\10"+
    "\1\347\21\10\16\0\1\10\5\0\1\10\1\350\1\10"+
    "\1\350\24\10\16\0\1\10\5\0\3\10\1\351\1\10"+
    "\1\352\14\10\1\353\5\10\16\0\1\10\5\0\1\10"+
    "\1\350\1\10\1\354\1\10\1\352\1\347\2\10\1\355"+
    "\4\10\1\356\3\10\1\357\5\10\16\0\1\10\5\0"+
    "\3\10\1\355\5\10\1\355\16\10\16\0\1\10\5\0"+
    "\1\10\1\350\1\10\1\360\12\10\1\356\11\10\16\0"+
    "\1\10\5\0\3\10\1\361\16\10\1\361\5\10\16\0"+
    "\1\10\5\0\3\10\1\356\12\10\1\356\11\10\16\0"+
    "\1\10\5\0\3\10\1\352\1\10\1\352\22\10\16\0"+
    "\1\10\5\0\3\10\1\353\16\10\1\353\5\10\16\0"+
    "\1\10\5\0\1\10\1\350\1\10\1\362\16\10\1\361"+
    "\5\10\16\0\1\10\5\0\3\10\1\363\1\10\1\352"+
    "\10\10\1\356\11\10\16\0\1\10\5\0\3\10\1\361"+
    "\12\10\1\356\3\10\1\361\5\10\16\0\1\10\5\0"+
    "\3\10\1\364\16\10\1\364\5\10\16\0\1\10\5\0"+
    "\3\10\1\365\12\10\1\366\3\10\1\365\5\10\16\0"+
    "\1\10\5\0\3\10\1\365\16\10\1\365\5\10\16\0"+
    "\1\10\5\0\3\10\1\366\12\10\1\366\11\10\16\0"+
    "\1\10\5\0\3\10\1\367\2\10\1\370\7\10\1\366"+
    "\3\10\1\371\5\10\16\0\1\10\5\0\3\10\1\370"+
    "\2\10\1\370\21\10\16\0\1\10\5\0\3\10\1\372"+
    "\12\10\1\372\11\10\16\0\1\10\5\0\3\10\1\373"+
    "\12\10\1\373\11\10\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7568];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\26\1\10\11\2\1\3\11\1\0\55\1"+
    "\2\11\246\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  lexercup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  lexercup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 26: 
          { return new Symbol(sym.tk_dim, yychar, yyline, yytext());
          }
        case 52: break;
        case 32: 
          { return new Symbol(sym.tk_true, yychar, yyline, yytext());
          }
        case 53: break;
        case 9: 
          { return new Symbol(sym.tk_Signomod, yychar, yyline, yytext());
          }
        case 54: break;
        case 2: 
          { return new Symbol(sym.tk_Numero, yychar, yyline, yytext());
          }
        case 55: break;
        case 13: 
          { return new Symbol(sym.tk_mayorque, yychar, yyline, yytext());
          }
        case 56: break;
        case 50: 
          { return new Symbol(sym.tk_writeline, yychar, yyline, yytext());
          }
        case 57: break;
        case 8: 
          { return new Symbol(sym.tk_Division, yychar, yyline, yytext());
          }
        case 58: break;
        case 5: 
          { return new Symbol(sym.tk_Suma, yychar, yyline, yytext());
          }
        case 59: break;
        case 35: 
          { return new Symbol(sym.tk_else, yychar, yyline, yytext());
          }
        case 60: break;
        case 36: 
          { return new Symbol(sym.tk_then, yychar, yyline, yytext());
          }
        case 61: break;
        case 15: 
          { return new Symbol(sym.tk_Igual, yychar, yyline, yytext());
          }
        case 62: break;
        case 39: 
          { return new Symbol(sym.tk_byval, yychar, yyline, yytext());
          }
        case 63: break;
        case 11: 
          { return new Symbol(sym.tk_Coma, yychar, yyline, yytext());
          }
        case 64: break;
        case 29: 
          { return new Symbol(sym.tk_end, yychar, yyline, yytext());
          }
        case 65: break;
        case 28: 
          { return new Symbol(sym.tk_sub, yychar, yyline, yytext());
          }
        case 66: break;
        case 47: 
          { return new Symbol(sym.tk_boolean, yychar, yyline, yytext());
          }
        case 67: break;
        case 16: 
          { return new Symbol(sym.tk_ParentesisA, yychar, yyline, yytext());
          }
        case 68: break;
        case 24: 
          { return new Symbol(sym.tk_menorigual, yychar, yyline, yytext());
          }
        case 69: break;
        case 42: 
          { return new Symbol(sym.tk_String, yychar, yyline, yytext());
          }
        case 70: break;
        case 40: 
          { return new Symbol(sym.tk_false, yychar, yyline, yytext());
          }
        case 71: break;
        case 48: 
          { return new Symbol(sym.tk_function, yychar, yyline, yytext());
          }
        case 72: break;
        case 25: 
          { return new Symbol(sym.tk_valorString, yychar, yyline, yytext());
          }
        case 73: break;
        case 41: 
          { return new Symbol(sym.tk_module, yychar, yyline, yytext());
          }
        case 74: break;
        case 46: 
          { return new Symbol(sym.tk_cs, yychar, yyline, yytext());
          }
        case 75: break;
        case 38: 
          { return new Symbol(sym.tk_while, yychar, yyline, yytext());
          }
        case 76: break;
        case 12: 
          { return new Symbol(sym.tk_punto, yychar, yyline, yytext());
          }
        case 77: break;
        case 18: 
          { return new Symbol(sym.tk_comentario, yychar, yyline, yytext());
          }
        case 78: break;
        case 7: 
          { return new Symbol(sym.tk_Multiplicacion, yychar, yyline, yytext());
          }
        case 79: break;
        case 4: 
          { return new Symbol(sym.tk_Identificador, yychar, yyline, yytext());
          }
        case 80: break;
        case 14: 
          { return new Symbol(sym.tk_menorque, yychar, yyline, yytext());
          }
        case 81: break;
        case 49: 
          { return new Symbol(sym.tk_readline, yychar, yyline, yytext());
          }
        case 82: break;
        case 10: 
          { return new Symbol(sym.tk_Potencia, yychar, yyline, yytext());
          }
        case 83: break;
        case 44: 
          { return new Symbol(sym.tk_public, yychar, yyline, yytext());
          }
        case 84: break;
        case 31: 
          { return new Symbol(sym.tk_exit, yychar, yyline, yytext());
          }
        case 85: break;
        case 22: 
          { return new Symbol(sym.tk_to, yychar, yyline, yytext());
          }
        case 86: break;
        case 21: 
          { return new Symbol(sym.tk_do, yychar, yyline, yytext());
          }
        case 87: break;
        case 6: 
          { return new Symbol(sym.tk_Resta, yychar, yyline, yytext());
          }
        case 88: break;
        case 30: 
          { return new Symbol(sym.tk_main, yychar, yyline, yytext());
          }
        case 89: break;
        case 20: 
          { return new Symbol(sym.tk_as, yychar, yyline, yytext());
          }
        case 90: break;
        case 17: 
          { return new Symbol(sym.tk_ParentesisC, yychar, yyline, yytext());
          }
        case 91: break;
        case 27: 
          { return new Symbol(sym.tk_for, yychar, yyline, yytext());
          }
        case 92: break;
        case 33: 
          { return new Symbol(sym.tk_loop, yychar, yyline, yytext());
          }
        case 93: break;
        case 23: 
          { return new Symbol(sym.tk_mayorigual, yychar, yyline, yytext());
          }
        case 94: break;
        case 51: 
          { return new Symbol(sym.tk_structure, yychar, yyline, yytext());
          }
        case 95: break;
        case 43: 
          { return new Symbol(sym.tk_elseif, yychar, yyline, yytext());
          }
        case 96: break;
        case 37: 
          { return new Symbol(sym.tk_step, yychar, yyline, yytext());
          }
        case 97: break;
        case 3: 
          { return new Symbol(sym.tk_Linea, yychar, yyline, yytext());
          }
        case 98: break;
        case 45: 
          { return new Symbol(sym.tk_integer, yychar, yyline, yytext());
          }
        case 99: break;
        case 34: 
          { return new Symbol(sym.tk_next, yychar, yyline, yytext());
          }
        case 100: break;
        case 19: 
          { return new Symbol(sym.tk_if, yychar, yyline, yytext());
          }
        case 101: break;
        case 1: 
          { 
          }
        case 102: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
