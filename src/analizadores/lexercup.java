/* The following code was generated by JFlex 1.4.3 on 03-13-21 11:52 PM */

package analizadores;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 03-13-21 11:52 PM from the specification file
 * <tt>C:/Users/David/Documents/NetBeansProjects/VBCompilador/src/analizadores/lexercup.flex</tt>
 */
class lexercup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  4,  0,  0,  2,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     2,  0,  3,  0,  0,  0, 43,  0, 47, 48, 41, 39,  2, 40, 44, 42, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0, 46, 31, 45,  0, 
     0, 22, 35, 17, 20, 19, 23, 25, 32,  6,  5, 34, 16,  7, 24, 10, 
     9,  5, 11, 26, 12, 14, 36, 21, 33, 18,  5,  0,  0,  0,  0,  5, 
     0, 37, 15, 17, 20, 29, 23, 25, 32,  6,  5, 34, 38, 30, 24, 10, 
     9,  5, 11, 13, 28, 14,  5, 21, 33, 27,  5,  0,  8,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\24\4\1\5\2\4"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\0\2\20\5\4\1\21\1\22\1\23"+
    "\1\4\1\21\11\4\1\23\1\4\2\24\15\4\2\22"+
    "\3\4\1\21\14\4\1\25\1\26\1\27\2\4\2\30"+
    "\2\31\2\4\1\31\1\4\1\32\1\33\2\4\1\34"+
    "\2\4\1\35\3\4\2\32\1\33\6\4\1\34\10\4"+
    "\1\35\1\4\1\35\7\4\2\34\4\4\1\35\1\4"+
    "\1\36\1\32\1\33\1\4\1\37\2\4\2\40\1\4"+
    "\1\41\1\40\1\42\2\4\1\43\1\44\1\45\2\4"+
    "\1\46\1\4\1\43\1\47\1\44\7\4\1\50\1\4"+
    "\1\50\1\43\1\4\1\46\1\4\1\46\1\51\1\52"+
    "\2\4\1\45\1\44\1\4\1\43\1\52\2\46\1\45"+
    "\1\40\1\4\1\51\1\42\1\47\1\52\6\4\1\53"+
    "\1\54\1\53\2\55\2\4\1\56\3\4\1\55\1\4"+
    "\1\56\1\54\2\56\2\4\2\53\4\4\1\55\5\4"+
    "\1\55\1\4\1\56\1\4\1\57\1\4\1\60\1\4"+
    "\1\61\1\62\1\63\1\4\1\64\1\61\1\65\1\4"+
    "\1\60\1\4\1\66\1\4\2\64\1\63\1\62\1\66"+
    "\1\4\1\60\1\63\1\64\1\67\2\4\1\67\1\70"+
    "\1\71\1\70\1\71\1\70\1\0\1\4\2\72\1\0"+
    "\1\73\4\0\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\61\0\u04c9\0\u04fa\0\61\0\61\0\61\0\61"+
    "\0\61\0\61\0\u052b\0\u055c\0\61\0\61\0\u058d\0\u05be"+
    "\0\365\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4"+
    "\0\u0715\0\u0746\0\365\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b"+
    "\0\u086c\0\u089d\0\u08ce\0\u08ff\0\365\0\u0930\0\u0961\0\365"+
    "\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9"+
    "\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0bde\0\365\0\u0c0f"+
    "\0\u0c40\0\u0c71\0\u0ca2\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66"+
    "\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\61"+
    "\0\61\0\u058d\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\365\0\u0fb2"+
    "\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109"+
    "\0\u113a\0\u116b\0\u119c\0\u0f81\0\u11cd\0\u11fe\0\u122f\0\u1260"+
    "\0\365\0\365\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1076\0\u1355"+
    "\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd"+
    "\0\u150e\0\u153f\0\u153f\0\365\0\u1570\0\u15a1\0\u15d2\0\u1603"+
    "\0\u113a\0\u1634\0\u1665\0\u1696\0\365\0\u16c7\0\u16f8\0\u1729"+
    "\0\u175a\0\u178b\0\u17bc\0\365\0\u17ed\0\u181e\0\u184f\0\365"+
    "\0\u1880\0\u18b1\0\365\0\u18e2\0\u18e2\0\365\0\u1913\0\u1944"+
    "\0\u1975\0\u19a6\0\u19d7\0\365\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b"+
    "\0\u1acc\0\u1afd\0\365\0\u1b2e\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1"+
    "\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\365\0\u1d18"+
    "\0\u1d49\0\u1d49\0\365\0\365\0\365\0\u1d7a\0\u1dab\0\365"+
    "\0\u1ddc\0\u1944\0\u1944\0\u1b90\0\u1e0d\0\u1d18\0\u1c54\0\u1d49"+
    "\0\u1e3e\0\u1975\0\365\0\u1c54\0\u1e6f\0\u1913\0\u1ea0\0\u1ed1"+
    "\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u1f95\0\365\0\u1fc6\0\365"+
    "\0\u1fc6\0\u1ff7\0\u2028\0\u2059\0\u208a\0\u20bb\0\u1f64\0\u20ec"+
    "\0\u211d\0\u214e\0\u2059\0\365\0\u217f\0\u21b0\0\u21e1\0\u2212"+
    "\0\u2243\0\u2274\0\u2212\0\u22a5\0\u22d6\0\u2307\0\u2338\0\u2369"+
    "\0\u239a\0\u23cb\0\u1f33\0\u23fc\0\u20bb\0\u242d\0\365\0\u245e"+
    "\0\365\0\u248f\0\365\0\365\0\365\0\u24c0\0\365\0\u24f1"+
    "\0\365\0\u2522\0\u245e\0\u2553\0\365\0\u2584\0\u25b5\0\u248f"+
    "\0\u2553\0\u245e\0\u245e\0\u25e6\0\u2617\0\u24c0\0\u2648\0\365"+
    "\0\u2679\0\u26aa\0\u26db\0\365\0\365\0\u2679\0\u2679\0\u26aa"+
    "\0\u270c\0\u273d\0\365\0\u273d\0\u276e\0\365\0\u279f\0\u27d0"+
    "\0\u2801\0\u2832\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\4\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\6\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\6\1\31\1\6\1\15\1\23\1\10\1\32"+
    "\1\6\1\33\1\6\1\34\1\6\1\26\1\21\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\62\0\1\3\61\0\1\4\1\0\1\4\54\0"+
    "\4\47\1\0\54\47\1\0\1\6\3\0\32\6\1\0"+
    "\7\6\13\0\1\6\3\0\3\6\1\50\16\6\1\51"+
    "\1\52\6\6\1\0\7\6\13\0\1\6\3\0\3\6"+
    "\1\53\1\6\1\54\13\6\1\55\10\6\1\0\5\6"+
    "\1\55\1\6\13\0\1\6\3\0\1\6\1\56\1\6"+
    "\1\57\1\6\1\60\1\61\1\62\1\63\1\64\1\6"+
    "\1\65\1\6\1\66\1\67\2\6\1\70\1\51\1\71"+
    "\1\6\1\63\1\66\1\62\1\67\1\6\1\0\1\72"+
    "\1\73\3\6\1\70\1\65\13\0\1\6\3\0\3\6"+
    "\1\74\5\6\1\74\20\6\1\0\7\6\13\0\1\6"+
    "\3\0\3\6\1\75\2\6\1\75\23\6\1\0\7\6"+
    "\13\0\1\6\3\0\3\6\1\76\12\6\1\76\11\6"+
    "\1\76\1\6\1\0\7\6\13\0\1\6\3\0\3\6"+
    "\1\77\1\6\1\100\1\101\23\6\1\0\1\102\6\6"+
    "\13\0\1\6\3\0\3\6\1\103\3\6\1\62\1\6"+
    "\1\104\3\6\1\66\10\6\1\66\1\62\2\6\1\0"+
    "\7\6\13\0\1\6\3\0\3\6\1\105\17\6\1\105"+
    "\6\6\1\0\7\6\13\0\1\6\3\0\3\6\1\106"+
    "\1\6\1\106\24\6\1\0\7\6\13\0\1\6\3\0"+
    "\1\6\1\107\1\6\1\110\1\6\1\111\24\6\1\0"+
    "\7\6\13\0\1\6\3\0\3\6\1\112\1\6\1\112"+
    "\24\6\1\0\7\6\13\0\1\6\3\0\3\6\1\113"+
    "\7\6\1\65\7\6\1\114\6\6\1\0\1\6\1\73"+
    "\4\6\1\65\13\0\1\6\3\0\1\6\1\115\1\6"+
    "\1\116\1\6\1\117\24\6\1\0\7\6\13\0\1\6"+
    "\3\0\3\6\1\120\2\6\1\121\23\6\1\0\1\122"+
    "\6\6\13\0\1\6\3\0\3\6\1\123\4\6\1\63"+
    "\12\6\1\124\1\6\1\63\4\6\1\0\7\6\13\0"+
    "\1\6\3\0\3\6\1\125\1\6\1\126\3\6\1\127"+
    "\7\6\1\130\10\6\1\0\5\6\1\130\1\6\13\0"+
    "\1\6\3\0\3\6\1\131\1\6\1\132\3\6\1\133"+
    "\4\6\1\134\11\6\1\134\1\6\1\0\7\6\13\0"+
    "\1\6\3\0\3\6\1\103\3\6\1\62\1\6\1\104"+
    "\3\6\1\66\10\6\1\135\1\62\2\6\1\0\7\6"+
    "\13\0\1\6\3\0\3\6\1\136\1\6\1\136\24\6"+
    "\1\0\7\6\13\0\1\6\3\0\3\6\1\106\1\6"+
    "\1\106\20\6\1\137\3\6\1\0\7\6\51\0\1\140"+
    "\60\0\1\141\21\0\3\47\1\142\1\0\54\47\1\0"+
    "\1\6\3\0\3\6\1\143\3\6\1\143\17\6\1\143"+
    "\2\6\1\0\7\6\13\0\1\6\3\0\1\6\1\144"+
    "\1\6\1\145\13\6\1\146\12\6\1\0\7\6\13\0"+
    "\1\6\3\0\3\6\1\146\13\6\1\146\12\6\1\0"+
    "\7\6\13\0\1\6\3\0\1\6\1\144\1\6\1\144"+
    "\26\6\1\0\7\6\13\0\1\6\3\0\2\6\1\147"+
    "\1\150\25\6\1\147\1\0\2\6\1\151\4\6\13\0"+
    "\1\6\3\0\1\6\1\152\1\147\1\153\1\6\1\154"+
    "\1\155\1\156\1\157\1\160\1\161\1\162\2\6\1\163"+
    "\1\164\1\6\1\165\1\6\1\166\1\6\1\157\1\6"+
    "\1\156\1\163\1\147\1\0\1\6\1\167\1\151\1\161"+
    "\1\6\1\165\1\162\13\0\1\6\3\0\3\6\1\170"+
    "\1\6\1\154\1\171\1\172\7\6\1\146\3\6\1\173"+
    "\3\6\1\172\2\6\1\0\7\6\13\0\1\6\3\0"+
    "\1\6\1\174\1\6\1\175\5\6\1\160\20\6\1\0"+
    "\7\6\13\0\1\6\3\0\3\6\1\176\2\6\1\177"+
    "\7\6\1\200\11\6\1\200\1\6\1\0\7\6\13\0"+
    "\1\6\3\0\3\6\1\201\6\6\1\161\1\202\7\6"+
    "\1\203\6\6\1\0\3\6\1\161\2\6\1\202\13\0"+
    "\1\6\3\0\3\6\1\204\4\6\1\204\14\6\1\204"+
    "\4\6\1\0\7\6\13\0\1\6\3\0\3\6\1\205"+
    "\4\6\1\205\14\6\1\205\4\6\1\0\7\6\13\0"+
    "\1\6\3\0\3\6\1\206\3\6\1\207\11\6\1\165"+
    "\5\6\1\207\2\6\1\0\1\6\1\167\3\6\1\165"+
    "\1\6\13\0\1\6\3\0\1\6\1\144\1\6\1\210"+
    "\7\6\1\211\16\6\1\0\6\6\1\211\13\0\1\6"+
    "\3\0\3\6\1\212\3\6\1\213\7\6\1\214\7\6"+
    "\1\213\2\6\1\0\7\6\13\0\1\6\3\0\1\6"+
    "\1\215\1\6\1\216\12\6\1\217\11\6\1\217\1\6"+
    "\1\0\7\6\13\0\1\6\3\0\1\6\1\220\1\6"+
    "\1\220\26\6\1\0\7\6\13\0\1\6\3\0\3\6"+
    "\1\221\6\6\1\221\17\6\1\0\3\6\1\221\3\6"+
    "\13\0\1\6\3\0\3\6\1\222\3\6\1\207\11\6"+
    "\1\165\5\6\1\207\2\6\1\0\5\6\1\165\1\6"+
    "\13\0\1\6\3\0\3\6\1\223\5\6\1\160\4\6"+
    "\1\217\11\6\1\217\1\6\1\0\7\6\13\0\1\6"+
    "\3\0\3\6\1\160\5\6\1\160\20\6\1\0\7\6"+
    "\13\0\1\6\3\0\3\6\1\217\12\6\1\217\11\6"+
    "\1\217\1\6\1\0\7\6\13\0\1\6\3\0\3\6"+
    "\1\224\2\6\1\177\1\6\1\205\1\6\1\225\3\6"+
    "\1\200\6\6\1\205\2\6\1\200\1\6\1\0\3\6"+
    "\1\225\3\6\13\0\1\6\3\0\3\6\1\225\6\6"+
    "\1\225\17\6\1\0\3\6\1\225\3\6\13\0\1\6"+
    "\3\0\3\6\1\226\3\6\1\226\17\6\1\226\2\6"+
    "\1\0\7\6\13\0\1\6\3\0\3\6\1\227\1\6"+
    "\1\227\24\6\1\0\7\6\13\0\1\6\3\0\3\6"+
    "\1\151\26\6\1\0\2\6\1\151\4\6\13\0\1\6"+
    "\3\0\3\6\1\230\1\6\1\231\24\6\1\0\2\6"+
    "\1\151\4\6\13\0\1\6\3\0\3\6\1\231\1\6"+
    "\1\231\24\6\1\0\7\6\13\0\1\6\3\0\3\6"+
    "\1\173\17\6\1\173\6\6\1\0\7\6\13\0\1\6"+
    "\3\0\1\6\1\220\1\6\1\232\4\6\1\204\6\6"+
    "\1\214\5\6\1\204\4\6\1\0\7\6\13\0\1\6"+
    "\3\0\3\6\1\214\13\6\1\214\12\6\1\0\7\6"+
    "\13\0\1\6\3\0\2\6\2\147\25\6\1\147\1\0"+
    "\7\6\13\0\1\6\3\0\1\6\1\233\1\6\1\233"+
    "\26\6\1\0\7\6\13\0\1\6\3\0\1\6\1\174"+
    "\1\6\1\174\26\6\1\0\7\6\13\0\1\6\3\0"+
    "\1\6\1\215\1\6\1\215\26\6\1\0\7\6\13\0"+
    "\1\6\3\0\3\6\1\234\13\6\1\234\12\6\1\0"+
    "\7\6\13\0\1\6\3\0\3\6\1\235\2\6\1\171"+
    "\4\6\1\211\7\6\1\203\6\6\1\0\6\6\1\211"+
    "\13\0\1\6\3\0\3\6\1\171\2\6\1\171\23\6"+
    "\1\0\7\6\13\0\1\6\3\0\3\6\1\203\17\6"+
    "\1\203\6\6\1\0\7\6\13\0\1\6\3\0\3\6"+
    "\1\211\7\6\1\211\16\6\1\0\6\6\1\211\13\0"+
    "\1\6\3\0\3\6\1\236\3\6\1\172\3\6\1\202"+
    "\13\6\1\172\2\6\1\0\1\6\1\167\4\6\1\202"+
    "\13\0\1\6\3\0\3\6\1\172\3\6\1\172\17\6"+
    "\1\172\2\6\1\0\7\6\13\0\1\6\3\0\3\6"+
    "\1\202\7\6\1\202\16\6\1\0\6\6\1\202\13\0"+
    "\1\6\3\0\3\6\1\167\26\6\1\0\1\6\1\167"+
    "\5\6\13\0\1\6\3\0\3\6\1\205\4\6\1\237"+
    "\14\6\1\205\4\6\1\0\7\6\13\0\1\6\3\0"+
    "\3\6\1\240\2\6\1\240\23\6\1\0\7\6\13\0"+
    "\1\6\3\0\32\6\1\0\4\6\1\241\2\6\13\0"+
    "\1\6\3\0\3\6\1\242\12\6\1\242\11\6\1\242"+
    "\1\6\1\0\7\6\13\0\1\6\3\0\3\6\1\243"+
    "\17\6\1\243\6\6\1\0\7\6\13\0\1\6\3\0"+
    "\3\6\1\244\5\6\1\245\11\6\1\243\6\6\1\0"+
    "\7\6\13\0\1\6\3\0\3\6\1\245\5\6\1\245"+
    "\20\6\1\0\7\6\13\0\1\6\3\0\3\6\1\246"+
    "\12\6\1\246\11\6\1\246\1\6\1\0\7\6\13\0"+
    "\1\6\3\0\3\6\1\247\3\6\1\250\3\6\1\251"+
    "\7\6\1\243\3\6\1\250\2\6\1\0\6\6\1\251"+
    "\13\0\1\6\3\0\1\6\1\252\1\6\1\253\1\254"+
    "\2\6\1\255\1\256\1\257\1\6\1\260\1\261\1\6"+
    "\1\262\1\263\3\6\1\243\1\6\1\256\1\6\1\255"+
    "\1\262\1\6\1\0\6\6\1\260\13\0\1\6\3\0"+
    "\3\6\1\264\1\254\6\6\1\265\16\6\1\0\6\6"+
    "\1\265\13\0\1\6\3\0\1\6\1\266\1\6\1\267"+
    "\5\6\1\270\20\6\1\0\7\6\13\0\1\6\3\0"+
    "\1\6\1\271\1\6\1\272\5\6\1\273\4\6\1\242"+
    "\11\6\1\242\1\6\1\0\7\6\13\0\1\6\3\0"+
    "\3\6\1\274\3\6\1\275\6\6\1\276\10\6\1\275"+
    "\1\276\1\6\1\0\7\6\13\0\1\6\3\0\3\6"+
    "\1\277\12\6\1\277\11\6\1\277\1\6\1\0\7\6"+
    "\13\0\1\6\3\0\3\6\1\300\7\6\1\300\16\6"+
    "\1\0\6\6\1\300\13\0\1\6\3\0\3\6\1\301"+
    "\4\6\1\302\2\6\1\303\11\6\1\302\4\6\1\0"+
    "\6\6\1\303\13\0\1\6\3\0\3\6\1\304\1\305"+
    "\16\6\1\304\6\6\1\0\7\6\13\0\1\6\3\0"+
    "\3\6\1\263\13\6\1\263\12\6\1\0\7\6\13\0"+
    "\1\6\3\0\3\6\1\306\4\6\1\307\3\6\1\261"+
    "\10\6\1\307\4\6\1\0\7\6\13\0\1\6\3\0"+
    "\3\6\1\310\3\6\1\310\17\6\1\310\2\6\1\0"+
    "\7\6\13\0\1\6\3\0\3\6\1\311\1\254\3\6"+
    "\1\307\1\245\1\6\1\265\11\6\1\307\4\6\1\0"+
    "\6\6\1\265\13\0\1\6\3\0\3\6\1\307\4\6"+
    "\1\307\14\6\1\307\4\6\1\0\7\6\13\0\1\6"+
    "\3\0\3\6\1\312\3\6\1\312\17\6\1\312\2\6"+
    "\1\0\7\6\13\0\1\6\3\0\3\6\1\313\3\6"+
    "\1\312\6\6\1\277\10\6\1\312\1\277\1\6\1\0"+
    "\7\6\13\0\1\6\3\0\1\6\1\266\1\6\1\314"+
    "\1\305\4\6\1\270\20\6\1\0\7\6\13\0\1\6"+
    "\3\0\3\6\2\305\25\6\1\0\7\6\13\0\1\6"+
    "\3\0\3\6\1\315\7\6\1\316\1\261\15\6\1\0"+
    "\6\6\1\316\13\0\1\6\3\0\3\6\1\303\7\6"+
    "\1\303\16\6\1\0\6\6\1\303\13\0\1\6\3\0"+
    "\3\6\1\261\10\6\1\261\15\6\1\0\7\6\13\0"+
    "\1\6\3\0\3\6\1\276\12\6\1\276\11\6\1\276"+
    "\1\6\1\0\7\6\13\0\1\6\3\0\3\6\1\275"+
    "\3\6\1\275\17\6\1\275\2\6\1\0\7\6\13\0"+
    "\1\6\3\0\3\6\1\317\3\6\1\310\1\6\1\273"+
    "\5\6\1\263\7\6\1\310\2\6\1\0\7\6\13\0"+
    "\1\6\3\0\3\6\1\273\5\6\1\273\20\6\1\0"+
    "\7\6\13\0\1\6\3\0\3\6\1\320\4\6\1\302"+
    "\12\6\1\243\1\6\1\302\4\6\1\0\7\6\13\0"+
    "\1\6\3\0\3\6\1\302\4\6\1\302\14\6\1\302"+
    "\4\6\1\0\7\6\13\0\1\6\3\0\1\6\1\271"+
    "\1\6\1\321\12\6\1\242\11\6\1\242\1\6\1\0"+
    "\7\6\13\0\1\6\3\0\3\6\1\251\7\6\1\251"+
    "\16\6\1\0\6\6\1\251\13\0\1\6\3\0\3\6"+
    "\1\322\7\6\1\251\7\6\1\304\6\6\1\0\6\6"+
    "\1\251\13\0\1\6\3\0\3\6\1\304\17\6\1\304"+
    "\6\6\1\0\7\6\13\0\1\6\3\0\3\6\1\323"+
    "\3\6\1\323\17\6\1\323\2\6\1\0\7\6\13\0"+
    "\1\6\3\0\3\6\1\324\5\6\1\273\5\6\1\263"+
    "\12\6\1\0\7\6\13\0\1\6\3\0\3\6\1\277"+
    "\12\6\1\277\4\6\1\304\4\6\1\277\1\6\1\0"+
    "\7\6\13\0\1\6\3\0\1\6\1\266\1\6\1\325"+
    "\1\305\2\6\1\275\1\6\1\270\15\6\1\275\2\6"+
    "\1\0\7\6\13\0\1\6\3\0\1\6\1\271\1\6"+
    "\1\271\26\6\1\0\7\6\13\0\1\6\3\0\3\6"+
    "\1\265\7\6\1\265\16\6\1\0\6\6\1\265\13\0"+
    "\1\6\3\0\3\6\2\254\11\6\1\246\11\6\1\246"+
    "\1\6\1\0\7\6\13\0\1\6\3\0\3\6\2\254"+
    "\25\6\1\0\7\6\13\0\1\6\3\0\3\6\1\276"+
    "\3\6\1\323\6\6\1\276\10\6\1\323\1\276\1\6"+
    "\1\0\7\6\13\0\1\6\3\0\3\6\1\326\3\6"+
    "\1\312\3\6\1\251\13\6\1\312\2\6\1\0\6\6"+
    "\1\251\13\0\1\6\3\0\3\6\1\327\4\6\1\302"+
    "\3\6\1\261\10\6\1\302\4\6\1\0\7\6\13\0"+
    "\1\6\3\0\3\6\1\310\3\6\1\310\3\6\1\303"+
    "\13\6\1\310\2\6\1\0\6\6\1\303\13\0\1\6"+
    "\3\0\3\6\1\275\3\6\1\275\17\6\1\330\2\6"+
    "\1\0\7\6\13\0\1\6\3\0\32\6\1\0\5\6"+
    "\1\331\1\6\13\0\1\6\3\0\3\6\1\332\20\6"+
    "\1\332\5\6\1\0\7\6\13\0\1\6\3\0\3\6"+
    "\1\333\7\6\1\333\16\6\1\0\6\6\1\333\13\0"+
    "\1\6\3\0\3\6\1\334\12\6\1\334\11\6\1\334"+
    "\1\6\1\0\7\6\13\0\1\6\3\0\3\6\1\335"+
    "\12\6\1\335\11\6\1\335\1\6\1\0\7\6\13\0"+
    "\1\6\3\0\3\6\1\336\12\6\1\336\11\6\1\336"+
    "\1\6\1\0\7\6\13\0\1\6\3\0\3\6\1\337"+
    "\7\6\1\340\7\6\1\341\6\6\1\0\6\6\1\340"+
    "\13\0\1\6\3\0\1\6\1\342\1\6\1\343\1\6"+
    "\1\344\1\345\1\346\3\6\1\347\1\350\1\6\1\351"+
    "\4\6\1\341\1\332\2\6\1\346\1\351\1\6\1\0"+
    "\6\6\1\347\13\0\1\6\3\0\3\6\1\352\12\6"+
    "\1\352\11\6\1\352\1\6\1\0\7\6\13\0\1\6"+
    "\3\0\3\6\1\353\1\6\1\344\10\6\1\354\11\6"+
    "\1\354\1\6\1\0\7\6\13\0\1\6\3\0\3\6"+
    "\1\355\2\6\1\345\4\6\1\333\1\350\15\6\1\0"+
    "\6\6\1\333\13\0\1\6\3\0\1\6\1\356\1\6"+
    "\1\357\12\6\1\360\11\6\1\360\1\6\1\0\7\6"+
    "\13\0\1\6\3\0\3\6\1\346\3\6\1\346\17\6"+
    "\1\346\2\6\1\0\7\6\13\0\1\6\3\0\1\6"+
    "\1\361\1\6\1\362\20\6\1\332\5\6\1\0\7\6"+
    "\13\0\1\6\3\0\3\6\1\363\12\6\1\363\11\6"+
    "\1\363\1\6\1\0\7\6\13\0\1\6\3\0\3\6"+
    "\1\341\17\6\1\341\6\6\1\0\7\6\13\0\1\6"+
    "\3\0\3\6\1\364\10\6\1\350\6\6\1\341\6\6"+
    "\1\0\7\6\13\0\1\6\3\0\3\6\1\350\10\6"+
    "\1\350\15\6\1\0\7\6\13\0\1\6\3\0\3\6"+
    "\1\340\7\6\1\340\16\6\1\0\6\6\1\340\13\0"+
    "\1\6\3\0\3\6\1\365\2\6\1\345\4\6\1\340"+
    "\10\6\1\332\5\6\1\0\6\6\1\340\13\0\1\6"+
    "\3\0\3\6\1\345\2\6\1\345\23\6\1\0\7\6"+
    "\13\0\1\6\3\0\1\6\1\361\1\6\1\366\12\6"+
    "\1\367\11\6\1\367\1\6\1\0\7\6\13\0\1\6"+
    "\3\0\3\6\1\367\12\6\1\367\11\6\1\367\1\6"+
    "\1\0\7\6\13\0\1\6\3\0\1\6\1\361\1\6"+
    "\1\361\26\6\1\0\7\6\13\0\1\6\3\0\1\6"+
    "\1\356\1\6\1\356\26\6\1\0\7\6\13\0\1\6"+
    "\3\0\3\6\1\354\12\6\1\354\11\6\1\354\1\6"+
    "\1\0\7\6\13\0\1\6\3\0\3\6\1\370\1\6"+
    "\1\344\1\6\1\346\17\6\1\346\2\6\1\0\7\6"+
    "\13\0\1\6\3\0\3\6\1\344\1\6\1\344\24\6"+
    "\1\0\7\6\13\0\1\6\3\0\3\6\1\371\1\6"+
    "\1\344\5\6\1\333\2\6\1\363\11\6\1\363\1\6"+
    "\1\0\6\6\1\333\13\0\1\6\3\0\1\6\1\356"+
    "\1\6\1\372\3\6\1\346\17\6\1\346\2\6\1\0"+
    "\7\6\13\0\1\6\3\0\3\6\1\373\7\6\1\340"+
    "\10\6\1\332\5\6\1\0\6\6\1\340\13\0\1\6"+
    "\3\0\3\6\1\374\10\6\1\350\1\6\1\367\4\6"+
    "\1\341\4\6\1\367\1\6\1\0\7\6\13\0\1\6"+
    "\3\0\3\6\1\375\3\6\1\346\6\6\1\354\10\6"+
    "\1\346\1\354\1\6\1\0\7\6\13\0\1\6\3\0"+
    "\3\6\1\367\12\6\1\367\11\6\1\376\1\6\1\0"+
    "\7\6\13\0\1\6\3\0\32\6\1\0\6\6\1\377"+
    "\13\0\1\6\3\0\3\6\1\u0100\12\6\1\u0100\11\6"+
    "\1\u0100\1\6\1\0\7\6\13\0\1\6\3\0\3\6"+
    "\1\u0101\12\6\1\u0101\11\6\1\u0101\1\6\1\0\7\6"+
    "\13\0\1\6\3\0\3\6\1\u0102\7\6\1\u0102\16\6"+
    "\1\0\6\6\1\u0102\13\0\1\6\3\0\3\6\1\u0103"+
    "\20\6\1\u0103\5\6\1\0\7\6\13\0\1\6\3\0"+
    "\3\6\1\u0104\10\6\1\u0105\5\6\1\u0104\7\6\1\0"+
    "\7\6\13\0\1\6\3\0\1\6\1\u0106\1\u0107\1\u0108"+
    "\3\6\1\u0109\3\6\1\u010a\1\u0105\1\6\1\u010b\2\6"+
    "\1\u010c\1\u0104\1\u010d\1\u0103\2\6\1\u0109\1\u010b\1\u0107"+
    "\1\0\5\6\1\u010c\1\u010a\13\0\1\6\3\0\3\6"+
    "\1\u010e\7\6\1\u010e\16\6\1\0\6\6\1\u010e\13\0"+
    "\1\6\3\0\3\6\1\u010d\17\6\1\u010d\6\6\1\0"+
    "\7\6\13\0\1\6\3\0\1\6\1\u0106\1\6\1\u0106"+
    "\26\6\1\0\7\6\13\0\1\6\3\0\3\6\1\u0109"+
    "\3\6\1\u0109\17\6\1\u0109\2\6\1\0\7\6\13\0"+
    "\1\6\3\0\2\6\1\u0107\1\u010f\7\6\1\u0102\5\6"+
    "\1\u010c\7\6\1\u0107\1\0\5\6\1\u010c\1\u0102\13\0"+
    "\1\6\3\0\2\6\1\u0107\1\u0110\7\6\1\u0102\15\6"+
    "\1\u0107\1\0\6\6\1\u0102\13\0\1\6\3\0\3\6"+
    "\1\u010d\3\6\1\u0109\6\6\1\u0101\4\6\1\u010d\3\6"+
    "\1\u0109\1\u0101\1\6\1\0\7\6\13\0\1\6\3\0"+
    "\3\6\1\u0105\10\6\1\u0105\15\6\1\0\7\6\13\0"+
    "\1\6\3\0\3\6\1\u0111\10\6\1\u0105\4\6\1\u010c"+
    "\10\6\1\0\5\6\1\u010c\1\6\13\0\1\6\3\0"+
    "\3\6\1\u010c\15\6\1\u010c\10\6\1\0\5\6\1\u010c"+
    "\1\6\13\0\1\6\3\0\3\6\1\u0104\16\6\1\u0104"+
    "\7\6\1\0\7\6\13\0\1\6\3\0\3\6\1\u0112"+
    "\12\6\1\u0100\3\6\1\u0104\5\6\1\u0100\1\6\1\0"+
    "\7\6\13\0\1\6\3\0\3\6\1\u0103\3\6\1\u0109"+
    "\14\6\1\u0103\2\6\1\u0109\2\6\1\0\7\6\13\0"+
    "\1\6\3\0\3\6\1\u0113\12\6\1\u0100\4\6\1\u010d"+
    "\4\6\1\u0100\1\6\1\0\7\6\13\0\1\6\3\0"+
    "\2\6\1\u0107\1\u0104\16\6\1\u0104\6\6\1\u0107\1\0"+
    "\7\6\13\0\1\6\3\0\2\6\2\u0107\25\6\1\u0107"+
    "\1\0\7\6\13\0\1\6\3\0\1\6\1\u0106\1\6"+
    "\1\u0114\7\6\1\u010e\16\6\1\0\6\6\1\u010e\13\0"+
    "\1\6\3\0\3\6\1\u0115\7\6\1\u010e\2\6\1\u0101"+
    "\2\6\1\u010c\6\6\1\u0101\1\6\1\0\5\6\1\u010c"+
    "\1\u010e\13\0\1\6\3\0\1\6\1\u0106\1\6\1\u0116"+
    "\10\6\1\u0105\15\6\1\0\7\6\13\0\1\6\3\0"+
    "\2\6\1\u0107\1\u0103\3\6\1\u0109\14\6\1\u0103\2\6"+
    "\1\u0109\1\6\1\u0107\1\0\7\6\13\0\1\6\3\0"+
    "\2\6\2\u0107\25\6\1\u0117\1\0\7\6\13\0\1\6"+
    "\3\0\3\6\1\u0118\2\6\1\u0118\23\6\1\0\7\6"+
    "\13\0\1\6\3\0\1\6\1\u0119\1\6\1\u0119\26\6"+
    "\1\0\7\6\13\0\1\6\3\0\3\6\1\u011a\1\6"+
    "\1\u011a\24\6\1\0\7\6\13\0\1\6\3\0\1\6"+
    "\1\u0119\1\6\1\u011b\1\6\1\u011a\1\u0118\7\6\1\u011c"+
    "\4\6\1\u011d\4\6\1\u011c\1\6\1\0\7\6\13\0"+
    "\1\6\3\0\1\6\1\u0119\1\6\1\u011e\12\6\1\u011c"+
    "\11\6\1\u011c\1\6\1\0\7\6\13\0\1\6\3\0"+
    "\3\6\1\u011d\17\6\1\u011d\6\6\1\0\7\6\13\0"+
    "\1\6\3\0\3\6\1\u011c\12\6\1\u011c\11\6\1\u011c"+
    "\1\6\1\0\7\6\13\0\1\6\3\0\1\6\1\u0119"+
    "\1\6\1\u011f\17\6\1\u011d\6\6\1\0\7\6\13\0"+
    "\1\6\3\0\3\6\1\u0120\1\6\1\u011a\10\6\1\u011c"+
    "\11\6\1\u011c\1\6\1\0\7\6\13\0\1\6\3\0"+
    "\3\6\1\u011d\12\6\1\u011c\4\6\1\u011d\4\6\1\u011c"+
    "\1\6\1\0\7\6\13\0\1\6\3\0\32\6\1\u0121"+
    "\7\6\13\0\1\6\3\0\3\6\1\u0122\17\6\1\u0122"+
    "\6\6\1\0\7\6\13\0\1\6\3\0\3\6\1\u0123"+
    "\17\6\1\u0123\6\6\1\0\7\6\13\0\1\6\3\0"+
    "\3\6\1\u0124\17\6\1\u0124\6\6\1\0\7\6\22\0"+
    "\1\u0125\4\0\1\u0125\14\0\1\u0125\27\0\1\6\3\0"+
    "\3\6\1\u0126\12\6\1\u0126\11\6\1\u0126\1\6\1\0"+
    "\7\6\22\0\1\u0127\11\0\1\u0127\10\0\1\u0127\35\0"+
    "\1\u0128\4\0\1\u0128\14\0\1\u0128\36\0\1\u0129\3\0"+
    "\1\u0129\17\0\1\u0129\34\0\1\u012a\12\0\1\u012a\11\0"+
    "\1\u012a\32\0\2\u012b\25\0\1\u012b\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10339];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\27\1\1\11\2\1\6\11\2\1\2\11"+
    "\1\0\70\1\2\11\277\1\1\0\3\1\1\0\1\1"+
    "\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  lexercup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  lexercup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 25: 
          { return new Symbol(sym.tk_dim, yychar, yyline, yytext());
          }
        case 60: break;
        case 30: 
          { return new Symbol(sym.tk_and, yychar, yyline, yytext());
          }
        case 61: break;
        case 35: 
          { return new Symbol(sym.tk_true, yychar, yyline, yytext());
          }
        case 62: break;
        case 2: 
          { return new Symbol(sym.tk_Numero, yychar, yyline, yytext());
          }
        case 63: break;
        case 12: 
          { return new Symbol(sym.tk_mayorque, yychar, yyline, yytext());
          }
        case 64: break;
        case 59: 
          { return new Symbol(sym.tk_writeline, yychar, yyline, yytext());
          }
        case 65: break;
        case 9: 
          { return new Symbol(sym.tk_Division, yychar, yyline, yytext());
          }
        case 66: break;
        case 44: 
          { return new Symbol(sym.tk_write, yychar, yyline, yytext());
          }
        case 67: break;
        case 39: 
          { return new Symbol(sym.tk_read, yychar, yyline, yytext());
          }
        case 68: break;
        case 40: 
          { return new Symbol(sym.tk_else, yychar, yyline, yytext());
          }
        case 69: break;
        case 6: 
          { return new Symbol(sym.tk_Suma, yychar, yyline, yytext());
          }
        case 70: break;
        case 41: 
          { return new Symbol(sym.tk_then, yychar, yyline, yytext());
          }
        case 71: break;
        case 54: 
          { return new Symbol(sym.tk_return, yychar, yyline, yytext());
          }
        case 72: break;
        case 5: 
          { return new Symbol(sym.tk_Igual, yychar, yyline, yytext());
          }
        case 73: break;
        case 47: 
          { return new Symbol(sym.tk_byval, yychar, yyline, yytext());
          }
        case 74: break;
        case 19: 
          { return new Symbol(sym.tk_or, yychar, yyline, yytext());
          }
        case 75: break;
        case 33: 
          { return new Symbol(sym.tk_like, yychar, yyline, yytext());
          }
        case 76: break;
        case 52: 
          { return new Symbol(sym.tk_sys, yychar, yyline, yytext());
          }
        case 77: break;
        case 10: 
          { return new Symbol(sym.tk_ampersant, yychar, yyline, yytext());
          }
        case 78: break;
        case 31: 
          { return new Symbol(sym.tk_xor, yychar, yyline, yytext());
          }
        case 79: break;
        case 29: 
          { return new Symbol(sym.tk_end, yychar, yyline, yytext());
          }
        case 80: break;
        case 28: 
          { return new Symbol(sym.tk_sub, yychar, yyline, yytext());
          }
        case 81: break;
        case 57: 
          { return new Symbol(sym.tk_boolean, yychar, yyline, yytext());
          }
        case 82: break;
        case 45: 
          { return new Symbol(sym.tk_until, yychar, yyline, yytext());
          }
        case 83: break;
        case 14: 
          { return new Symbol(sym.tk_ParentesisA, yychar, yyline, yytext());
          }
        case 84: break;
        case 22: 
          { return new Symbol(sym.tk_menorigual, yychar, yyline, yytext());
          }
        case 85: break;
        case 49: 
          { return new Symbol(sym.tk_String, yychar, yyline, yytext());
          }
        case 86: break;
        case 46: 
          { return new Symbol(sym.tk_false, yychar, yyline, yytext());
          }
        case 87: break;
        case 58: 
          { return new Symbol(sym.tk_function, yychar, yyline, yytext());
          }
        case 88: break;
        case 23: 
          { return new Symbol(sym.tk_valorString, yychar, yyline, yytext());
          }
        case 89: break;
        case 48: 
          { return new Symbol(sym.tk_module, yychar, yyline, yytext());
          }
        case 90: break;
        case 56: 
          { return new Symbol(sym.tk_cs, yychar, yyline, yytext());
          }
        case 91: break;
        case 43: 
          { return new Symbol(sym.tk_while, yychar, yyline, yytext());
          }
        case 92: break;
        case 11: 
          { return new Symbol(sym.tk_punto, yychar, yyline, yytext());
          }
        case 93: break;
        case 38: 
          { return new Symbol(sym.tk_null, yychar, yyline, yytext());
          }
        case 94: break;
        case 8: 
          { return new Symbol(sym.tk_Multiplicacion, yychar, yyline, yytext());
          }
        case 95: break;
        case 4: 
          { return new Symbol(sym.tk_Identificador, yychar, yyline, yytext());
          }
        case 96: break;
        case 13: 
          { return new Symbol(sym.tk_menorque, yychar, yyline, yytext());
          }
        case 97: break;
        case 51: 
          { return new Symbol(sym.tk_public, yychar, yyline, yytext());
          }
        case 98: break;
        case 34: 
          { return new Symbol(sym.tk_exit, yychar, yyline, yytext());
          }
        case 99: break;
        case 20: 
          { return new Symbol(sym.tk_to, yychar, yyline, yytext());
          }
        case 100: break;
        case 18: 
          { return new Symbol(sym.tk_do, yychar, yyline, yytext());
          }
        case 101: break;
        case 7: 
          { return new Symbol(sym.tk_Resta, yychar, yyline, yytext());
          }
        case 102: break;
        case 32: 
          { return new Symbol(sym.tk_main, yychar, yyline, yytext());
          }
        case 103: break;
        case 17: 
          { return new Symbol(sym.tk_as, yychar, yyline, yytext());
          }
        case 104: break;
        case 15: 
          { return new Symbol(sym.tk_ParentesisC, yychar, yyline, yytext());
          }
        case 105: break;
        case 26: 
          { return new Symbol(sym.tk_for, yychar, yyline, yytext());
          }
        case 106: break;
        case 36: 
          { return new Symbol(sym.tk_loop, yychar, yyline, yytext());
          }
        case 107: break;
        case 21: 
          { return new Symbol(sym.tk_mayorigual, yychar, yyline, yytext());
          }
        case 108: break;
        case 53: 
          { return new Symbol(sym.tk_structure, yychar, yyline, yytext());
          }
        case 109: break;
        case 27: 
          { return new Symbol(sym.tk_not, yychar, yyline, yytext());
          }
        case 110: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 111: break;
        case 50: 
          { return new Symbol(sym.tk_elseif, yychar, yyline, yytext());
          }
        case 112: break;
        case 42: 
          { return new Symbol(sym.tk_step, yychar, yyline, yytext());
          }
        case 113: break;
        case 55: 
          { return new Symbol(sym.tk_integer, yychar, yyline, yytext());
          }
        case 114: break;
        case 37: 
          { return new Symbol(sym.tk_next, yychar, yyline, yytext());
          }
        case 115: break;
        case 24: 
          { return new Symbol(sym.tk_mod, yychar, yyline, yytext());
          }
        case 116: break;
        case 16: 
          { return new Symbol(sym.tk_if, yychar, yyline, yytext());
          }
        case 117: break;
        case 3: 
          { 
          }
        case 118: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
