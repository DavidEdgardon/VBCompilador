/* The following code was generated by JFlex 1.4.3 on 03-10-21 11:07 PM */

package analizadores;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 03-10-21 11:07 PM from the specification file
 * <tt>C:/Users/David/Documents/NetBeansProjects/VBCompilador/src/analizadores/lexercup.flex</tt>
 */
class lexercup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  4,  0,  2,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     2,  0,  3,  0,  0,  0, 45,  0, 49, 50, 42, 40, 44, 41, 46, 43, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0, 48, 32, 47,  0, 
     0, 23, 36, 18, 21, 20, 25, 27, 33,  7,  5, 35, 17,  8, 26, 11, 
    10,  5, 12, 14, 13, 15, 37, 22, 34, 19,  5,  0,  0,  0,  0,  5, 
     0, 38, 16, 18, 21, 30, 25, 27, 33,  7,  5, 35, 39, 31, 26, 11, 
    10,  5, 12,  6, 29, 24,  5, 22, 34, 28,  5,  0,  9,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\3\23\4"+
    "\1\5\2\4\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\0\3\4\2\21"+
    "\2\4\1\22\1\4\1\22\1\23\1\24\10\4\1\24"+
    "\1\4\2\25\16\4\2\23\3\4\1\22\13\4\1\26"+
    "\1\27\1\30\6\4\1\31\2\32\3\4\1\32\1\4"+
    "\1\33\1\34\1\4\1\35\2\4\1\36\3\4\2\33"+
    "\1\34\3\4\1\35\6\4\1\36\1\4\1\36\7\4"+
    "\2\35\5\4\1\36\1\4\1\37\1\35\1\33\1\34"+
    "\1\40\3\4\2\41\2\4\1\41\2\4\1\42\2\43"+
    "\2\44\3\4\1\45\1\46\1\47\1\4\1\50\1\4"+
    "\1\45\1\51\1\52\1\46\4\4\1\45\2\4\2\50"+
    "\2\4\1\47\1\46\1\4\1\45\2\50\1\47\1\4"+
    "\1\52\1\44\1\51\15\4\1\53\1\54\1\53\1\55"+
    "\1\4\1\55\2\56\1\4\1\55\2\4\1\56\1\55"+
    "\1\54\2\4\2\53\2\4\1\56\3\4\1\56\1\4"+
    "\1\55\1\57\1\60\1\61\1\62\1\4\1\63\1\64"+
    "\2\4\1\65\1\4\1\61\1\4\1\63\1\4\1\66"+
    "\2\60\1\65\1\64\1\66\1\4\1\63\1\65\1\60"+
    "\1\67\1\4\1\70\1\4\1\67\1\71\1\70\1\71"+
    "\1\70\1\0\1\4\2\72\1\0\1\73\4\0\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\63\0\231\0\314\0\377\0\u0132"+
    "\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca"+
    "\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462"+
    "\0\u0495\0\u04c8\0\63\0\u04fb\0\u052e\0\63\0\63\0\63"+
    "\0\63\0\63\0\63\0\63\0\u0561\0\u0594\0\63\0\63"+
    "\0\u05c7\0\u05fa\0\u062d\0\u0660\0\u0693\0\314\0\u0693\0\u06c6"+
    "\0\314\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b"+
    "\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\314\0\u095d\0\u0990"+
    "\0\314\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5"+
    "\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c5a"+
    "\0\314\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d26\0\u0d59\0\u0d8c"+
    "\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24"+
    "\0\63\0\63\0\u05c7\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023"+
    "\0\u1056\0\u1089\0\314\0\u10bc\0\u10bc\0\u10ef\0\u1122\0\u1155"+
    "\0\u1188\0\u0fbd\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287\0\u1089"+
    "\0\u12ba\0\u12ed\0\u1320\0\u1353\0\314\0\314\0\u1386\0\u13b9"+
    "\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551"+
    "\0\u1584\0\u1584\0\314\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1221"+
    "\0\u1683\0\u16b6\0\u0f8a\0\314\0\u16e9\0\u171c\0\u174f\0\u1782"+
    "\0\u17b5\0\u17e8\0\u181b\0\314\0\u171c\0\u184e\0\u1881\0\314"+
    "\0\u18b4\0\u18e7\0\u191a\0\u194d\0\314\0\u1980\0\u19b3\0\u19b3"+
    "\0\u19e6\0\u1a19\0\314\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18"+
    "\0\u1b4b\0\u1b7e\0\u1bb1\0\314\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d"+
    "\0\u1cb0\0\314\0\314\0\u1ce3\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c"+
    "\0\314\0\u1daf\0\u1de2\0\u1de2\0\314\0\u1e15\0\u1e48\0\314"+
    "\0\u1e7b\0\u1ae5\0\u1ae5\0\u1eae\0\u1daf\0\u1d7c\0\u1ee1\0\u1b18"+
    "\0\314\0\u1d7c\0\u1f14\0\u1ab2\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0"+
    "\0\u2013\0\u2046\0\u2079\0\u20ac\0\u20df\0\u2112\0\u2145\0\u2178"+
    "\0\u2178\0\314\0\u21ab\0\u21ab\0\314\0\u1fe0\0\314\0\u21de"+
    "\0\u2211\0\u2244\0\u2277\0\u20df\0\u22aa\0\u22dd\0\u2310\0\u2343"+
    "\0\u2376\0\u23a9\0\u23dc\0\u23a9\0\u240f\0\u2442\0\u2475\0\u24a8"+
    "\0\u20ac\0\u24db\0\u2277\0\314\0\314\0\314\0\314\0\u250e"+
    "\0\314\0\314\0\u2541\0\u2574\0\314\0\u25a7\0\u25da\0\u260d"+
    "\0\u250e\0\u2640\0\314\0\u2673\0\u2541\0\u2640\0\u250e\0\u250e"+
    "\0\u26a6\0\u26d9\0\u25a7\0\u270c\0\314\0\u273f\0\314\0\u2772"+
    "\0\u27a5\0\314\0\u273f\0\u273f\0\u2772\0\u27d8\0\u280b\0\314"+
    "\0\u280b\0\u283e\0\314\0\u2871\0\u28a4\0\u28d7\0\u290a\0\63";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\0\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\6\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\2\6\1\16\1\24\1\11\1\33"+
    "\1\6\1\34\1\6\1\35\1\6\1\27\1\22\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\64\0\1\3\61\0\4\51\1\0\56\51"+
    "\1\0\1\6\3\0\33\6\1\0\7\6\14\0\1\6"+
    "\3\0\4\6\1\52\3\6\1\53\5\6\1\54\10\6"+
    "\1\54\1\53\2\6\1\0\7\6\14\0\1\6\3\0"+
    "\4\6\1\55\17\6\1\56\1\57\5\6\1\0\7\6"+
    "\14\0\1\6\3\0\4\6\1\60\1\6\1\60\24\6"+
    "\1\0\7\6\14\0\1\6\3\0\1\6\1\61\1\62"+
    "\1\6\1\63\1\6\1\64\1\65\1\53\1\61\1\66"+
    "\1\6\1\67\1\6\1\54\1\70\2\6\1\71\1\66"+
    "\1\56\1\72\1\6\1\54\1\53\1\70\1\6\1\0"+
    "\1\73\1\74\3\6\1\71\1\67\14\0\1\6\3\0"+
    "\4\6\1\75\5\6\1\75\10\6\1\75\7\6\1\0"+
    "\7\6\14\0\1\6\3\0\4\6\1\76\2\6\1\76"+
    "\23\6\1\0\7\6\14\0\1\6\3\0\4\6\1\77"+
    "\12\6\1\77\11\6\1\77\1\6\1\0\7\6\14\0"+
    "\1\6\3\0\4\6\1\100\1\6\1\101\1\102\23\6"+
    "\1\0\1\103\6\6\14\0\1\6\3\0\4\6\1\104"+
    "\3\6\1\53\1\6\1\105\3\6\1\54\4\6\1\105"+
    "\3\6\1\106\1\53\2\6\1\0\7\6\14\0\1\6"+
    "\3\0\4\6\1\107\20\6\1\107\5\6\1\0\7\6"+
    "\14\0\1\6\3\0\4\6\1\110\1\6\1\110\24\6"+
    "\1\0\7\6\14\0\1\6\3\0\2\6\1\111\1\6"+
    "\1\112\1\6\1\113\24\6\1\0\7\6\14\0\1\6"+
    "\3\0\4\6\1\114\1\6\1\114\24\6\1\0\7\6"+
    "\14\0\1\6\3\0\4\6\1\115\7\6\1\67\10\6"+
    "\1\116\5\6\1\0\1\6\1\74\4\6\1\67\14\0"+
    "\1\6\3\0\2\6\1\117\1\6\1\120\1\6\1\121"+
    "\24\6\1\0\7\6\14\0\1\6\3\0\4\6\1\122"+
    "\2\6\1\123\23\6\1\0\1\124\6\6\14\0\1\6"+
    "\3\0\1\6\1\61\2\6\1\125\4\6\1\61\13\6"+
    "\1\126\5\6\1\0\7\6\14\0\1\6\3\0\4\6"+
    "\1\127\5\6\1\105\10\6\1\105\1\6\1\107\5\6"+
    "\1\0\7\6\14\0\1\6\3\0\4\6\1\130\1\6"+
    "\1\131\3\6\1\132\7\6\1\71\1\132\7\6\1\0"+
    "\5\6\1\71\1\6\14\0\1\6\3\0\4\6\1\133"+
    "\1\6\1\134\3\6\1\135\4\6\1\136\3\6\1\135"+
    "\5\6\1\136\1\6\1\0\7\6\14\0\1\6\3\0"+
    "\4\6\1\137\1\6\1\137\24\6\1\0\7\6\14\0"+
    "\1\6\3\0\4\6\1\110\1\6\1\110\20\6\1\140"+
    "\3\6\1\0\7\6\53\0\1\141\62\0\1\142\22\0"+
    "\3\51\1\143\1\0\56\51\1\0\1\6\3\0\1\6"+
    "\1\144\2\6\1\145\2\6\1\146\1\6\1\144\5\6"+
    "\1\147\11\6\1\147\1\6\1\0\7\6\14\0\1\6"+
    "\3\0\4\6\1\150\2\6\1\146\7\6\1\147\11\6"+
    "\1\147\1\6\1\0\7\6\14\0\1\6\3\0\1\6"+
    "\1\144\2\6\1\144\4\6\1\144\21\6\1\0\7\6"+
    "\14\0\1\6\3\0\4\6\1\151\3\6\1\151\17\6"+
    "\1\151\2\6\1\0\7\6\14\0\1\6\3\0\4\6"+
    "\1\152\13\6\1\152\12\6\1\0\7\6\14\0\1\6"+
    "\3\0\3\6\1\153\1\154\25\6\1\153\1\0\2\6"+
    "\1\155\4\6\14\0\1\6\3\0\1\6\1\156\1\157"+
    "\1\153\1\160\1\6\1\161\1\162\1\163\1\156\1\164"+
    "\1\165\1\166\2\6\1\167\1\170\1\6\1\171\1\164"+
    "\1\6\1\172\2\6\1\163\1\167\1\153\1\0\1\6"+
    "\1\173\1\155\1\165\1\6\1\171\1\166\14\0\1\6"+
    "\3\0\4\6\1\174\1\6\1\161\1\175\1\176\7\6"+
    "\1\152\4\6\1\177\2\6\1\176\2\6\1\0\7\6"+
    "\14\0\1\6\3\0\2\6\1\200\1\6\1\201\5\6"+
    "\1\164\10\6\1\164\7\6\1\0\7\6\14\0\1\6"+
    "\3\0\4\6\1\202\6\6\1\165\1\203\10\6\1\204"+
    "\5\6\1\0\3\6\1\165\2\6\1\203\14\0\1\6"+
    "\3\0\1\6\1\205\2\6\1\205\4\6\1\205\21\6"+
    "\1\0\7\6\14\0\1\6\3\0\4\6\1\206\3\6"+
    "\1\207\11\6\1\171\5\6\1\207\2\6\1\0\1\6"+
    "\1\173\3\6\1\171\1\6\14\0\1\6\3\0\4\6"+
    "\1\210\7\6\1\210\16\6\1\0\6\6\1\210\14\0"+
    "\1\6\3\0\4\6\1\211\3\6\1\212\7\6\1\213"+
    "\7\6\1\212\2\6\1\0\7\6\14\0\1\6\3\0"+
    "\2\6\1\214\1\6\1\215\12\6\1\216\11\6\1\216"+
    "\1\6\1\0\7\6\14\0\1\6\3\0\2\6\1\217"+
    "\1\6\1\217\26\6\1\0\7\6\14\0\1\6\3\0"+
    "\4\6\1\220\6\6\1\220\17\6\1\0\3\6\1\220"+
    "\3\6\14\0\1\6\3\0\4\6\1\221\3\6\1\207"+
    "\11\6\1\171\5\6\1\207\2\6\1\0\5\6\1\171"+
    "\1\6\14\0\1\6\3\0\4\6\1\222\5\6\1\164"+
    "\4\6\1\216\3\6\1\164\5\6\1\216\1\6\1\0"+
    "\7\6\14\0\1\6\3\0\4\6\1\164\5\6\1\164"+
    "\10\6\1\164\7\6\1\0\7\6\14\0\1\6\3\0"+
    "\4\6\1\216\12\6\1\216\11\6\1\216\1\6\1\0"+
    "\7\6\14\0\1\6\3\0\1\6\1\144\2\6\1\223"+
    "\2\6\1\146\1\6\1\144\1\6\1\224\3\6\1\147"+
    "\11\6\1\147\1\6\1\0\3\6\1\224\3\6\14\0"+
    "\1\6\3\0\4\6\1\224\6\6\1\224\17\6\1\0"+
    "\3\6\1\224\3\6\14\0\1\6\3\0\1\6\1\225"+
    "\2\6\1\144\4\6\1\144\21\6\1\0\7\6\14\0"+
    "\1\6\3\0\4\6\1\226\3\6\1\226\17\6\1\226"+
    "\2\6\1\0\7\6\14\0\1\6\3\0\4\6\1\227"+
    "\1\6\1\227\24\6\1\0\7\6\14\0\1\6\3\0"+
    "\4\6\1\155\26\6\1\0\2\6\1\155\4\6\14\0"+
    "\1\6\3\0\4\6\1\230\1\6\1\231\24\6\1\0"+
    "\2\6\1\155\4\6\14\0\1\6\3\0\4\6\1\231"+
    "\1\6\1\231\24\6\1\0\7\6\14\0\1\6\3\0"+
    "\4\6\1\177\20\6\1\177\5\6\1\0\7\6\14\0"+
    "\1\6\3\0\1\6\1\205\1\217\1\6\1\232\4\6"+
    "\1\205\6\6\1\213\12\6\1\0\7\6\14\0\1\6"+
    "\3\0\4\6\1\213\13\6\1\213\12\6\1\0\7\6"+
    "\14\0\1\6\3\0\3\6\2\153\25\6\1\153\1\0"+
    "\7\6\14\0\1\6\3\0\2\6\1\233\1\6\1\233"+
    "\26\6\1\0\7\6\14\0\1\6\3\0\2\6\1\200"+
    "\1\6\1\200\26\6\1\0\7\6\14\0\1\6\3\0"+
    "\2\6\1\214\1\6\1\214\26\6\1\0\7\6\14\0"+
    "\1\6\3\0\4\6\1\234\13\6\1\234\12\6\1\0"+
    "\7\6\14\0\1\6\3\0\4\6\1\235\3\6\1\226"+
    "\2\6\1\224\14\6\1\226\2\6\1\0\3\6\1\224"+
    "\3\6\14\0\1\6\3\0\4\6\1\236\2\6\1\175"+
    "\4\6\1\210\10\6\1\204\5\6\1\0\6\6\1\210"+
    "\14\0\1\6\3\0\4\6\1\175\2\6\1\175\23\6"+
    "\1\0\7\6\14\0\1\6\3\0\4\6\1\204\20\6"+
    "\1\204\5\6\1\0\7\6\14\0\1\6\3\0\4\6"+
    "\1\237\3\6\1\176\3\6\1\203\13\6\1\176\2\6"+
    "\1\0\1\6\1\173\4\6\1\203\14\0\1\6\3\0"+
    "\4\6\1\176\3\6\1\176\17\6\1\176\2\6\1\0"+
    "\7\6\14\0\1\6\3\0\4\6\1\203\7\6\1\203"+
    "\16\6\1\0\6\6\1\203\14\0\1\6\3\0\4\6"+
    "\1\173\26\6\1\0\1\6\1\173\5\6\14\0\1\6"+
    "\3\0\4\6\1\240\2\6\1\240\23\6\1\0\7\6"+
    "\14\0\1\6\3\0\33\6\1\0\4\6\1\241\2\6"+
    "\14\0\1\6\3\0\4\6\1\242\3\6\1\242\17\6"+
    "\1\242\2\6\1\0\7\6\14\0\1\6\3\0\2\6"+
    "\1\243\1\6\1\244\1\245\2\6\1\242\1\6\1\246"+
    "\10\6\1\246\4\6\1\242\2\6\1\0\7\6\14\0"+
    "\1\6\3\0\2\6\1\243\1\6\1\247\5\6\1\246"+
    "\10\6\1\246\7\6\1\0\7\6\14\0\1\6\3\0"+
    "\4\6\2\245\25\6\1\0\7\6\14\0\1\6\3\0"+
    "\2\6\1\243\1\6\1\250\1\245\4\6\1\246\10\6"+
    "\1\246\7\6\1\0\7\6\14\0\1\6\3\0\4\6"+
    "\1\251\12\6\1\251\11\6\1\251\1\6\1\0\7\6"+
    "\14\0\1\6\3\0\4\6\1\252\5\6\1\252\10\6"+
    "\1\252\7\6\1\0\7\6\14\0\1\6\3\0\4\6"+
    "\1\253\12\6\1\253\11\6\1\253\1\6\1\0\7\6"+
    "\14\0\1\6\3\0\4\6\1\254\3\6\1\242\6\6"+
    "\1\255\10\6\1\242\1\255\1\6\1\0\7\6\14\0"+
    "\1\6\3\0\4\6\1\256\3\6\1\257\3\6\1\260"+
    "\13\6\1\257\2\6\1\0\6\6\1\260\14\0\1\6"+
    "\3\0\1\6\1\261\1\262\1\6\1\263\1\264\2\6"+
    "\1\265\1\261\1\266\1\6\1\267\1\270\1\6\1\271"+
    "\1\272\2\6\1\266\1\6\1\273\2\6\1\265\1\271"+
    "\1\6\1\0\6\6\1\267\14\0\1\6\3\0\4\6"+
    "\1\274\1\264\6\6\1\275\16\6\1\0\6\6\1\275"+
    "\14\0\1\6\3\0\2\6\1\276\1\6\1\277\5\6"+
    "\1\300\4\6\1\251\3\6\1\300\5\6\1\251\1\6"+
    "\1\0\7\6\14\0\1\6\3\0\4\6\1\301\12\6"+
    "\1\301\11\6\1\301\1\6\1\0\7\6\14\0\1\6"+
    "\3\0\4\6\1\302\7\6\1\302\16\6\1\0\6\6"+
    "\1\302\14\0\1\6\3\0\1\6\1\303\2\6\1\304"+
    "\4\6\1\303\2\6\1\305\16\6\1\0\6\6\1\305"+
    "\14\0\1\6\3\0\4\6\1\273\1\245\17\6\1\273"+
    "\5\6\1\0\7\6\14\0\1\6\3\0\4\6\1\272"+
    "\13\6\1\272\12\6\1\0\7\6\14\0\1\6\3\0"+
    "\1\6\1\306\2\6\1\307\4\6\1\306\3\6\1\270"+
    "\15\6\1\0\7\6\14\0\1\6\3\0\4\6\1\310"+
    "\3\6\1\310\17\6\1\310\2\6\1\0\7\6\14\0"+
    "\1\6\3\0\1\6\1\306\2\6\1\311\1\264\3\6"+
    "\1\306\1\252\1\6\1\275\6\6\1\252\7\6\1\0"+
    "\6\6\1\275\14\0\1\6\3\0\1\6\1\306\2\6"+
    "\1\306\4\6\1\306\21\6\1\0\7\6\14\0\1\6"+
    "\3\0\4\6\1\312\3\6\1\312\17\6\1\312\2\6"+
    "\1\0\7\6\14\0\1\6\3\0\4\6\1\313\3\6"+
    "\1\312\6\6\1\301\10\6\1\312\1\301\1\6\1\0"+
    "\7\6\14\0\1\6\3\0\4\6\1\314\7\6\1\315"+
    "\1\270\15\6\1\0\6\6\1\315\14\0\1\6\3\0"+
    "\4\6\1\305\7\6\1\305\16\6\1\0\6\6\1\305"+
    "\14\0\1\6\3\0\4\6\1\270\10\6\1\270\15\6"+
    "\1\0\7\6\14\0\1\6\3\0\4\6\1\255\12\6"+
    "\1\255\11\6\1\255\1\6\1\0\7\6\14\0\1\6"+
    "\3\0\4\6\1\316\3\6\1\310\1\6\1\300\5\6"+
    "\1\272\2\6\1\300\4\6\1\310\2\6\1\0\7\6"+
    "\14\0\1\6\3\0\4\6\1\300\5\6\1\300\10\6"+
    "\1\300\7\6\1\0\7\6\14\0\1\6\3\0\1\6"+
    "\1\303\2\6\1\303\4\6\1\303\21\6\1\0\7\6"+
    "\14\0\1\6\3\0\2\6\1\276\1\6\1\317\12\6"+
    "\1\251\11\6\1\251\1\6\1\0\7\6\14\0\1\6"+
    "\3\0\4\6\1\260\7\6\1\260\16\6\1\0\6\6"+
    "\1\260\14\0\1\6\3\0\4\6\1\320\7\6\1\260"+
    "\10\6\1\273\5\6\1\0\6\6\1\260\14\0\1\6"+
    "\3\0\4\6\1\273\20\6\1\273\5\6\1\0\7\6"+
    "\14\0\1\6\3\0\4\6\1\321\3\6\1\321\17\6"+
    "\1\321\2\6\1\0\7\6\14\0\1\6\3\0\4\6"+
    "\1\322\5\6\1\300\5\6\1\272\2\6\1\300\7\6"+
    "\1\0\7\6\14\0\1\6\3\0\4\6\1\301\12\6"+
    "\1\301\5\6\1\273\3\6\1\301\1\6\1\0\7\6"+
    "\14\0\1\6\3\0\4\6\1\242\3\6\1\242\17\6"+
    "\1\323\2\6\1\0\7\6\14\0\1\6\3\0\2\6"+
    "\1\276\1\6\1\276\26\6\1\0\7\6\14\0\1\6"+
    "\3\0\4\6\1\275\7\6\1\275\16\6\1\0\6\6"+
    "\1\275\14\0\1\6\3\0\4\6\2\264\11\6\1\253"+
    "\11\6\1\253\1\6\1\0\7\6\14\0\1\6\3\0"+
    "\4\6\2\264\25\6\1\0\7\6\14\0\1\6\3\0"+
    "\4\6\1\255\3\6\1\321\6\6\1\255\10\6\1\321"+
    "\1\255\1\6\1\0\7\6\14\0\1\6\3\0\4\6"+
    "\1\324\3\6\1\312\3\6\1\260\13\6\1\312\2\6"+
    "\1\0\6\6\1\260\14\0\1\6\3\0\1\6\1\303"+
    "\2\6\1\325\4\6\1\303\3\6\1\270\15\6\1\0"+
    "\7\6\14\0\1\6\3\0\4\6\1\310\3\6\1\310"+
    "\3\6\1\305\13\6\1\310\2\6\1\0\6\6\1\305"+
    "\14\0\1\6\3\0\33\6\1\0\5\6\1\326\1\6"+
    "\14\0\1\6\3\0\4\6\1\327\12\6\1\327\11\6"+
    "\1\327\1\6\1\0\7\6\14\0\1\6\3\0\4\6"+
    "\1\330\20\6\1\330\5\6\1\0\7\6\14\0\1\6"+
    "\3\0\4\6\1\331\10\6\1\332\1\6\1\327\5\6"+
    "\1\330\3\6\1\327\1\6\1\0\7\6\14\0\1\6"+
    "\3\0\4\6\1\332\10\6\1\332\15\6\1\0\7\6"+
    "\14\0\1\6\3\0\4\6\1\333\10\6\1\332\7\6"+
    "\1\330\5\6\1\0\7\6\14\0\1\6\3\0\4\6"+
    "\1\334\21\6\1\334\4\6\1\0\7\6\14\0\1\6"+
    "\3\0\4\6\1\335\7\6\1\335\16\6\1\0\6\6"+
    "\1\335\14\0\1\6\3\0\2\6\1\336\1\6\1\337"+
    "\12\6\1\327\11\6\1\327\1\6\1\0\7\6\14\0"+
    "\1\6\3\0\2\6\1\336\1\6\1\336\26\6\1\0"+
    "\7\6\14\0\1\6\3\0\4\6\1\340\12\6\1\340"+
    "\11\6\1\340\1\6\1\0\7\6\14\0\1\6\3\0"+
    "\4\6\1\341\12\6\1\341\11\6\1\341\1\6\1\0"+
    "\7\6\14\0\1\6\3\0\4\6\1\342\12\6\1\342"+
    "\11\6\1\342\1\6\1\0\7\6\14\0\1\6\3\0"+
    "\4\6\1\343\1\6\1\344\10\6\1\345\11\6\1\345"+
    "\1\6\1\0\7\6\14\0\1\6\3\0\4\6\1\346"+
    "\7\6\1\347\10\6\1\330\5\6\1\0\6\6\1\347"+
    "\14\0\1\6\3\0\2\6\1\350\1\6\1\351\1\6"+
    "\1\344\1\352\1\353\3\6\1\354\1\332\1\6\1\355"+
    "\5\6\1\330\1\334\1\6\1\353\1\355\1\6\1\0"+
    "\6\6\1\354\14\0\1\6\3\0\4\6\1\356\12\6"+
    "\1\356\11\6\1\356\1\6\1\0\7\6\14\0\1\6"+
    "\3\0\4\6\1\357\2\6\1\352\4\6\1\335\1\332"+
    "\15\6\1\0\6\6\1\335\14\0\1\6\3\0\2\6"+
    "\1\360\1\6\1\361\12\6\1\362\11\6\1\362\1\6"+
    "\1\0\7\6\14\0\1\6\3\0\4\6\1\353\3\6"+
    "\1\353\17\6\1\353\2\6\1\0\7\6\14\0\1\6"+
    "\3\0\2\6\1\336\1\6\1\363\21\6\1\334\4\6"+
    "\1\0\7\6\14\0\1\6\3\0\4\6\1\364\12\6"+
    "\1\364\11\6\1\364\1\6\1\0\7\6\14\0\1\6"+
    "\3\0\4\6\1\347\7\6\1\347\16\6\1\0\6\6"+
    "\1\347\14\0\1\6\3\0\4\6\1\365\2\6\1\352"+
    "\4\6\1\347\11\6\1\334\4\6\1\0\6\6\1\347"+
    "\14\0\1\6\3\0\4\6\1\352\2\6\1\352\23\6"+
    "\1\0\7\6\14\0\1\6\3\0\2\6\1\360\1\6"+
    "\1\360\26\6\1\0\7\6\14\0\1\6\3\0\4\6"+
    "\1\345\12\6\1\345\11\6\1\345\1\6\1\0\7\6"+
    "\14\0\1\6\3\0\4\6\1\344\1\6\1\344\24\6"+
    "\1\0\7\6\14\0\1\6\3\0\4\6\1\366\1\6"+
    "\1\344\1\6\1\353\17\6\1\353\2\6\1\0\7\6"+
    "\14\0\1\6\3\0\4\6\1\367\1\6\1\344\5\6"+
    "\1\335\2\6\1\364\11\6\1\364\1\6\1\0\6\6"+
    "\1\335\14\0\1\6\3\0\2\6\1\360\1\6\1\370"+
    "\3\6\1\353\17\6\1\353\2\6\1\0\7\6\14\0"+
    "\1\6\3\0\4\6\1\371\7\6\1\347\11\6\1\334"+
    "\4\6\1\0\6\6\1\347\14\0\1\6\3\0\4\6"+
    "\1\327\12\6\1\327\11\6\1\372\1\6\1\0\7\6"+
    "\14\0\1\6\3\0\4\6\1\373\3\6\1\353\6\6"+
    "\1\345\10\6\1\353\1\345\1\6\1\0\7\6\14\0"+
    "\1\6\3\0\33\6\1\0\6\6\1\374\14\0\1\6"+
    "\3\0\3\6\2\375\25\6\1\375\1\0\7\6\14\0"+
    "\1\6\3\0\4\6\1\376\21\6\1\376\4\6\1\0"+
    "\7\6\14\0\1\6\3\0\3\6\1\375\1\376\3\6"+
    "\1\377\15\6\1\376\1\6\1\377\1\6\1\375\1\0"+
    "\7\6\14\0\1\6\3\0\4\6\1\377\3\6\1\377"+
    "\17\6\1\377\2\6\1\0\7\6\14\0\1\6\3\0"+
    "\4\6\1\376\3\6\1\377\15\6\1\376\1\6\1\377"+
    "\2\6\1\0\7\6\14\0\1\6\3\0\4\6\1\u0100"+
    "\12\6\1\u0100\11\6\1\u0100\1\6\1\0\7\6\14\0"+
    "\1\6\3\0\4\6\1\u0101\12\6\1\u0101\11\6\1\u0101"+
    "\1\6\1\0\7\6\14\0\1\6\3\0\4\6\1\u0102"+
    "\17\6\1\u0102\6\6\1\0\7\6\14\0\1\6\3\0"+
    "\3\6\1\375\1\u0102\17\6\1\u0102\5\6\1\375\1\0"+
    "\7\6\14\0\1\6\3\0\4\6\1\u0103\7\6\1\u0103"+
    "\16\6\1\0\6\6\1\u0103\14\0\1\6\3\0\4\6"+
    "\1\u0104\7\6\1\u0104\16\6\1\0\6\6\1\u0104\14\0"+
    "\1\6\3\0\4\6\1\u0102\10\6\1\u0105\6\6\1\u0102"+
    "\6\6\1\0\7\6\14\0\1\6\3\0\2\6\1\u0106"+
    "\1\375\1\u0107\3\6\1\377\3\6\1\u0108\1\u0105\1\6"+
    "\1\u0109\2\6\1\u010a\1\6\1\u0102\1\u010b\1\376\1\6"+
    "\1\377\1\u0109\1\375\1\0\5\6\1\u010a\1\u0108\14\0"+
    "\1\6\3\0\4\6\1\u010b\20\6\1\u010b\5\6\1\0"+
    "\7\6\14\0\1\6\3\0\2\6\1\u0106\1\6\1\u0106"+
    "\26\6\1\0\7\6\14\0\1\6\3\0\3\6\1\375"+
    "\1\u010c\7\6\1\u0103\5\6\1\u010a\7\6\1\375\1\0"+
    "\5\6\1\u010a\1\u0103\14\0\1\6\3\0\3\6\1\375"+
    "\1\u010d\7\6\1\u0103\15\6\1\375\1\0\6\6\1\u0103"+
    "\14\0\1\6\3\0\4\6\1\u010b\3\6\1\377\6\6"+
    "\1\u0101\5\6\1\u010b\2\6\1\377\1\u0101\1\6\1\0"+
    "\7\6\14\0\1\6\3\0\4\6\1\u0105\10\6\1\u0105"+
    "\15\6\1\0\7\6\14\0\1\6\3\0\4\6\1\u010e"+
    "\10\6\1\u0105\4\6\1\u010a\10\6\1\0\5\6\1\u010a"+
    "\1\6\14\0\1\6\3\0\4\6\1\u010a\15\6\1\u010a"+
    "\10\6\1\0\5\6\1\u010a\1\6\14\0\1\6\3\0"+
    "\4\6\1\u010f\12\6\1\u0100\4\6\1\u0102\4\6\1\u0100"+
    "\1\6\1\0\7\6\14\0\1\6\3\0\4\6\1\u0110"+
    "\12\6\1\u0100\5\6\1\u010b\3\6\1\u0100\1\6\1\0"+
    "\7\6\14\0\1\6\3\0\2\6\1\u0106\1\6\1\u0111"+
    "\7\6\1\u0104\16\6\1\0\6\6\1\u0104\14\0\1\6"+
    "\3\0\4\6\1\u0112\7\6\1\u0104\2\6\1\u0101\2\6"+
    "\1\u010a\6\6\1\u0101\1\6\1\0\5\6\1\u010a\1\u0104"+
    "\14\0\1\6\3\0\2\6\1\u0106\1\6\1\u0113\10\6"+
    "\1\u0105\15\6\1\0\7\6\14\0\1\6\3\0\3\6"+
    "\2\375\25\6\1\u0114\1\0\7\6\14\0\1\6\3\0"+
    "\4\6\1\u0115\2\6\1\u0115\23\6\1\0\7\6\14\0"+
    "\1\6\3\0\2\6\1\u0116\1\6\1\u0116\26\6\1\0"+
    "\7\6\14\0\1\6\3\0\4\6\1\u0117\12\6\1\u0117"+
    "\11\6\1\u0117\1\6\1\0\7\6\14\0\1\6\3\0"+
    "\4\6\1\u0118\1\6\1\u0118\24\6\1\0\7\6\14\0"+
    "\1\6\3\0\2\6\1\u0116\1\6\1\u0119\1\6\1\u0118"+
    "\1\u0115\7\6\1\u0117\5\6\1\u011a\3\6\1\u0117\1\6"+
    "\1\0\7\6\14\0\1\6\3\0\2\6\1\u0116\1\6"+
    "\1\u011b\12\6\1\u0117\11\6\1\u0117\1\6\1\0\7\6"+
    "\14\0\1\6\3\0\4\6\1\u011a\20\6\1\u011a\5\6"+
    "\1\0\7\6\14\0\1\6\3\0\2\6\1\u0116\1\6"+
    "\1\u011c\20\6\1\u011a\5\6\1\0\7\6\14\0\1\6"+
    "\3\0\4\6\1\u011d\1\6\1\u0118\10\6\1\u0117\11\6"+
    "\1\u0117\1\6\1\0\7\6\14\0\1\6\3\0\4\6"+
    "\1\u011a\12\6\1\u0117\5\6\1\u011a\3\6\1\u0117\1\6"+
    "\1\0\7\6\14\0\1\6\3\0\33\6\1\u011e\7\6"+
    "\14\0\1\6\3\0\4\6\1\u011f\20\6\1\u011f\5\6"+
    "\1\0\7\6\14\0\1\6\3\0\4\6\1\u0120\20\6"+
    "\1\u0120\5\6\1\0\7\6\14\0\1\6\3\0\4\6"+
    "\1\u0121\20\6\1\u0121\5\6\1\0\7\6\21\0\1\u0122"+
    "\2\0\1\u0122\4\0\1\u0122\45\0\1\6\3\0\4\6"+
    "\1\u0123\12\6\1\u0123\11\6\1\u0123\1\6\1\0\7\6"+
    "\24\0\1\u0124\11\0\1\u0124\10\0\1\u0124\34\0\1\u0125"+
    "\2\0\1\u0125\4\0\1\u0125\55\0\1\u0126\3\0\1\u0126"+
    "\17\0\1\u0126\36\0\1\u0127\12\0\1\u0127\11\0\1\u0127"+
    "\34\0\2\u0128\25\0\1\u0128\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10557];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\26\1\1\11\2\1\7\11"+
    "\2\1\2\11\1\0\67\1\2\11\273\1\1\0\3\1"+
    "\1\0\1\1\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  lexercup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  lexercup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 31: 
          { return new Symbol(sym.tk_and, yychar, yyline, yytext());
          }
        case 60: break;
        case 37: 
          { return new Symbol(sym.tk_true, yychar, yyline, yytext());
          }
        case 61: break;
        case 2: 
          { return new Symbol(sym.tk_Numero, yychar, yyline, yytext());
          }
        case 62: break;
        case 13: 
          { return new Symbol(sym.tk_mayorque, yychar, yyline, yytext());
          }
        case 63: break;
        case 59: 
          { return new Symbol(sym.tk_writeline, yychar, yyline, yytext());
          }
        case 64: break;
        case 9: 
          { return new Symbol(sym.tk_Division, yychar, yyline, yytext());
          }
        case 65: break;
        case 44: 
          { return new Symbol(sym.tk_write, yychar, yyline, yytext());
          }
        case 66: break;
        case 41: 
          { return new Symbol(sym.tk_read, yychar, yyline, yytext());
          }
        case 67: break;
        case 6: 
          { return new Symbol(sym.tk_Suma, yychar, yyline, yytext());
          }
        case 68: break;
        case 35: 
          { return new Symbol(sym.tk_else, yychar, yyline, yytext());
          }
        case 69: break;
        case 42: 
          { return new Symbol(sym.tk_then, yychar, yyline, yytext());
          }
        case 70: break;
        case 54: 
          { return new Symbol(sym.tk_return, yychar, yyline, yytext());
          }
        case 71: break;
        case 5: 
          { return new Symbol(sym.tk_Igual, yychar, yyline, yytext());
          }
        case 72: break;
        case 47: 
          { return new Symbol(sym.tk_byval, yychar, yyline, yytext());
          }
        case 73: break;
        case 20: 
          { return new Symbol(sym.tk_or, yychar, yyline, yytext());
          }
        case 74: break;
        case 10: 
          { return new Symbol(sym.tk_Coma, yychar, yyline, yytext());
          }
        case 75: break;
        case 34: 
          { return new Symbol(sym.tk_like, yychar, yyline, yytext());
          }
        case 76: break;
        case 48: 
          { return new Symbol(sym.tk_sys, yychar, yyline, yytext());
          }
        case 77: break;
        case 11: 
          { return new Symbol(sym.tk_ampersant, yychar, yyline, yytext());
          }
        case 78: break;
        case 32: 
          { return new Symbol(sym.tk_xor, yychar, yyline, yytext());
          }
        case 79: break;
        case 30: 
          { return new Symbol(sym.tk_end, yychar, yyline, yytext());
          }
        case 80: break;
        case 29: 
          { return new Symbol(sym.tk_sub, yychar, yyline, yytext());
          }
        case 81: break;
        case 57: 
          { return new Symbol(sym.tk_boolean, yychar, yyline, yytext());
          }
        case 82: break;
        case 46: 
          { return new Symbol(sym.tk_until, yychar, yyline, yytext());
          }
        case 83: break;
        case 15: 
          { return new Symbol(sym.tk_ParentesisA, yychar, yyline, yytext());
          }
        case 84: break;
        case 23: 
          { return new Symbol(sym.tk_menorigual, yychar, yyline, yytext());
          }
        case 85: break;
        case 49: 
          { return new Symbol(sym.tk_String, yychar, yyline, yytext());
          }
        case 86: break;
        case 45: 
          { return new Symbol(sym.tk_false, yychar, yyline, yytext());
          }
        case 87: break;
        case 58: 
          { return new Symbol(sym.tk_function, yychar, yyline, yytext());
          }
        case 88: break;
        case 24: 
          { return new Symbol(sym.tk_valorString, yychar, yyline, yytext());
          }
        case 89: break;
        case 51: 
          { return new Symbol(sym.tk_module, yychar, yyline, yytext());
          }
        case 90: break;
        case 56: 
          { return new Symbol(sym.tk_cs, yychar, yyline, yytext());
          }
        case 91: break;
        case 43: 
          { return new Symbol(sym.tk_while, yychar, yyline, yytext());
          }
        case 92: break;
        case 12: 
          { return new Symbol(sym.tk_punto, yychar, yyline, yytext());
          }
        case 93: break;
        case 40: 
          { return new Symbol(sym.tk_null, yychar, yyline, yytext());
          }
        case 94: break;
        case 8: 
          { return new Symbol(sym.tk_Multiplicacion, yychar, yyline, yytext());
          }
        case 95: break;
        case 4: 
          { return new Symbol(sym.tk_Identificador, yychar, yyline, yytext());
          }
        case 96: break;
        case 14: 
          { return new Symbol(sym.tk_menorque, yychar, yyline, yytext());
          }
        case 97: break;
        case 53: 
          { return new Symbol(sym.tk_public, yychar, yyline, yytext());
          }
        case 98: break;
        case 36: 
          { return new Symbol(sym.tk_exit, yychar, yyline, yytext());
          }
        case 99: break;
        case 21: 
          { return new Symbol(sym.tk_to, yychar, yyline, yytext());
          }
        case 100: break;
        case 19: 
          { return new Symbol(sym.tk_do, yychar, yyline, yytext());
          }
        case 101: break;
        case 7: 
          { return new Symbol(sym.tk_Resta, yychar, yyline, yytext());
          }
        case 102: break;
        case 18: 
          { return new Symbol(sym.tk_as, yychar, yyline, yytext());
          }
        case 103: break;
        case 16: 
          { return new Symbol(sym.tk_ParentesisC, yychar, yyline, yytext());
          }
        case 104: break;
        case 27: 
          { return new Symbol(sym.tk_for, yychar, yyline, yytext());
          }
        case 105: break;
        case 38: 
          { return new Symbol(sym.tk_loop, yychar, yyline, yytext());
          }
        case 106: break;
        case 26: 
          { return Symbol(sym.tk_dim, yychar, yyline, yytext());
          }
        case 107: break;
        case 22: 
          { return new Symbol(sym.tk_mayorigual, yychar, yyline, yytext());
          }
        case 108: break;
        case 50: 
          { return new Symbol(sym.tk_structure, yychar, yyline, yytext());
          }
        case 109: break;
        case 28: 
          { return new Symbol(sym.tk_not, yychar, yyline, yytext());
          }
        case 110: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 111: break;
        case 52: 
          { return new Symbol(sym.tk_elseif, yychar, yyline, yytext());
          }
        case 112: break;
        case 33: 
          { return new Symbol(sym.tk_step, yychar, yyline, yytext());
          }
        case 113: break;
        case 55: 
          { return new Symbol(sym.tk_integer, yychar, yyline, yytext());
          }
        case 114: break;
        case 39: 
          { return new Symbol(sym.tk_next, yychar, yyline, yytext());
          }
        case 115: break;
        case 25: 
          { return new Symbol(sym.tk_mod, yychar, yyline, yytext());
          }
        case 116: break;
        case 17: 
          { return new Symbol(sym.tk_if, yychar, yyline, yytext());
          }
        case 117: break;
        case 3: 
          { 
          }
        case 118: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
