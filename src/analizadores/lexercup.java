/* The following code was generated by JFlex 1.4.3 on 03-17-21 10:32 AM */

package analizadores;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 03-17-21 10:32 AM from the specification file
 * <tt>C:/Users/David/Documents/NetBeansProjects/VBCompilador/src/analizadores/lexercup.flex</tt>
 */
class lexercup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  5,  0,  0,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     2,  0,  4,  0,  0, 42, 45,  6, 49, 50, 40, 38, 44, 39, 46, 41, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0, 48, 33, 47,  0, 
     0, 24, 17, 19, 22, 21, 26, 27, 34,  8,  7, 36, 18,  9, 25, 12, 
    11,  7, 13, 28, 14, 16, 37, 23, 35, 20,  7,  0,  0,  0, 43,  7, 
     0, 24, 17, 19, 22, 31, 26, 27, 34,  8,  7, 36, 18, 32, 25, 12, 
    11,  7, 13, 15, 30, 16, 37, 23, 35, 29,  7,  0, 10,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\1\24\5\1\6"+
    "\1\5\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\0\1\24"+
    "\1\25\1\5\1\25\4\5\1\26\1\27\1\30\1\5"+
    "\1\26\11\5\1\30\1\5\2\31\20\5\2\27\3\5"+
    "\1\26\13\5\1\32\1\33\1\34\2\5\2\35\2\36"+
    "\2\5\1\36\1\5\1\37\1\40\2\5\1\41\2\5"+
    "\1\42\4\5\2\37\1\40\6\5\1\41\11\5\1\42"+
    "\1\5\1\42\7\5\2\41\5\5\1\42\1\5\1\43"+
    "\1\40\1\37\1\5\1\44\1\5\2\45\1\5\1\46"+
    "\1\45\1\47\2\5\1\50\1\51\1\52\2\5\1\53"+
    "\1\5\1\50\2\5\1\51\7\5\1\54\1\5\1\54"+
    "\1\50\1\5\1\53\1\5\1\53\1\55\1\56\2\5"+
    "\1\52\1\51\1\5\1\50\1\56\2\53\1\5\1\52"+
    "\1\45\1\5\1\55\1\47\1\5\1\56\6\5\1\57"+
    "\1\60\1\57\2\61\2\5\1\62\3\5\1\62\1\5"+
    "\1\63\1\60\2\63\2\5\2\57\3\5\1\62\2\5"+
    "\1\61\5\5\1\62\1\5\1\61\1\5\1\62\1\63"+
    "\2\5\1\64\1\5\1\65\1\66\1\67\1\5\1\70"+
    "\1\65\2\5\1\64\1\5\1\71\3\5\1\64\2\70"+
    "\1\71\1\67\1\66\1\65\1\71\1\5\1\64\1\67"+
    "\1\71\1\70\1\72\4\5\1\72\1\5\1\73\1\74"+
    "\1\73\2\74\1\73\1\0\1\5\1\75\1\76\1\75"+
    "\1\5\1\75\1\0\1\77\1\100\4\0\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd"+
    "\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495"+
    "\0\u04c8\0\u04fb\0\u052e\0\63\0\u0561\0\63\0\63\0\63"+
    "\0\63\0\63\0\63\0\63\0\63\0\63\0\u0594\0\u05c7"+
    "\0\63\0\63\0\u05fa\0\u0132\0\u062d\0\u062d\0\u0165\0\u0660"+
    "\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5\0\u0165"+
    "\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d"+
    "\0\u0990\0\u0165\0\u09c3\0\u09f6\0\u0165\0\u0a29\0\u0a5c\0\u0a8f"+
    "\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27"+
    "\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d26\0\u0165\0\u0d59"+
    "\0\u0d8c\0\u0dbf\0\u0df2\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe"+
    "\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\63\0\63"+
    "\0\u05fa\0\u1023\0\u1056\0\u1089\0\u10bc\0\u0165\0\u10ef\0\u10ef"+
    "\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287"+
    "\0\u12ba\0\u12ed\0\u10bc\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec"+
    "\0\u0165\0\u0165\0\u141f\0\u1452\0\u1485\0\u14b8\0\u11bb\0\u14eb"+
    "\0\u151e\0\u1551\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683"+
    "\0\u16b6\0\u16e9\0\u171c\0\u171c\0\u0165\0\u174f\0\u1782\0\u17b5"+
    "\0\u17e8\0\u1287\0\u181b\0\u184e\0\u1881\0\u0165\0\u18b4\0\u18e7"+
    "\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u0165\0\u1a19\0\u1a4c"+
    "\0\u1a7f\0\u0165\0\u1ab2\0\u0165\0\u1ae5\0\u1ae5\0\u0165\0\u1b18"+
    "\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\u0165\0\u1c17\0\u1c4a\0\u1c7d"+
    "\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c\0\u1daf\0\u1daf\0\u1de2"+
    "\0\u1e15\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a"+
    "\0\u0165\0\u1fad\0\u1fe0\0\u1fe0\0\u0165\0\u0165\0\u0165\0\u2013"+
    "\0\u2046\0\u0165\0\u2079\0\u1b4b\0\u1b4b\0\u1e15\0\u20ac\0\u1fad"+
    "\0\u20df\0\u2112\0\u1fe0\0\u2145\0\u1b7e\0\u0165\0\u2112\0\u2178"+
    "\0\u21ab\0\u1b18\0\u21de\0\u2211\0\u2244\0\u2277\0\u22aa\0\u22aa"+
    "\0\u0165\0\u22dd\0\u0165\0\u22dd\0\u2310\0\u2343\0\u2376\0\u23a9"+
    "\0\u23dc\0\u240f\0\u2442\0\u2475\0\u24a8\0\u2376\0\u0165\0\u24db"+
    "\0\u250e\0\u2541\0\u2574\0\u25a7\0\u25da\0\u260d\0\u0165\0\u2574"+
    "\0\u2640\0\u2673\0\u26a6\0\u26d9\0\u270c\0\u273f\0\u2772\0\u26d9"+
    "\0\u27a5\0\u2244\0\u27d8\0\u2574\0\u23dc\0\u280b\0\u283e\0\u0165"+
    "\0\u2871\0\u0165\0\u0165\0\u0165\0\u28a4\0\u0165\0\u28d7\0\u290a"+
    "\0\u293d\0\u283e\0\u2970\0\u0165\0\u29a3\0\u29d6\0\u2a09\0\u2a09"+
    "\0\u2a3c\0\u2871\0\u290a\0\u2970\0\u283e\0\u290a\0\u283e\0\u2a6f"+
    "\0\u2aa2\0\u29d6\0\u2a09\0\u2ad5\0\u0165\0\u2b08\0\u2b3b\0\u2b6e"+
    "\0\u2ba1\0\u2bd4\0\u2c07\0\u0165\0\u2ba1\0\u2b08\0\u0165\0\u2b08"+
    "\0\u2b6e\0\u2c3a\0\u2c6d\0\u0165\0\u0165\0\u2ca0\0\u2ca0\0\u2c6d"+
    "\0\u2cd3\0\u0165\0\u0165\0\u2d06\0\u2d39\0\u2d6c\0\u2d9f\0\63";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\10\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\10\1\33\1\10\1\17\1\25"+
    "\1\12\1\34\1\10\1\35\2\10\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\64\0\1\3\63\0\1\4\63\0\1\5"+
    "\1\0\1\5\55\0\5\53\1\0\55\53\5\54\1\0"+
    "\55\54\1\0\1\10\5\0\32\10\1\0\4\10\16\0"+
    "\1\10\5\0\3\10\1\55\16\10\1\56\1\57\6\10"+
    "\1\0\4\10\16\0\1\10\5\0\3\10\1\60\1\10"+
    "\1\61\13\10\1\62\10\10\1\0\4\10\16\0\1\10"+
    "\5\0\1\10\1\63\1\10\1\64\1\10\1\65\1\66"+
    "\1\67\1\70\1\71\1\10\1\72\1\10\1\73\1\74"+
    "\2\10\1\75\1\76\1\57\1\10\1\70\1\73\1\67"+
    "\1\74\1\10\1\0\1\77\1\100\2\10\16\0\1\10"+
    "\5\0\3\10\1\101\5\10\1\101\20\10\1\0\4\10"+
    "\16\0\1\10\5\0\3\10\1\102\2\10\1\102\23\10"+
    "\1\0\4\10\16\0\1\10\5\0\3\10\1\103\12\10"+
    "\1\103\11\10\1\103\1\10\1\0\4\10\16\0\1\10"+
    "\5\0\3\10\1\104\1\10\1\105\1\106\23\10\1\0"+
    "\1\107\3\10\16\0\1\10\5\0\3\10\1\110\3\10"+
    "\1\67\1\10\1\111\3\10\1\112\10\10\1\112\1\67"+
    "\2\10\1\0\4\10\16\0\1\10\5\0\3\10\1\113"+
    "\16\10\1\113\7\10\1\0\4\10\16\0\1\10\5\0"+
    "\3\10\1\114\1\10\1\115\7\10\1\116\10\10\1\116"+
    "\3\10\1\0\4\10\16\0\1\10\5\0\1\10\1\117"+
    "\1\10\1\120\1\10\1\121\24\10\1\0\4\10\16\0"+
    "\1\10\5\0\3\10\1\122\1\10\1\122\24\10\1\0"+
    "\4\10\16\0\1\10\5\0\3\10\1\123\7\10\1\72"+
    "\6\10\1\124\7\10\1\0\1\10\1\100\2\10\16\0"+
    "\1\10\5\0\1\10\1\125\1\10\1\126\1\10\1\127"+
    "\24\10\1\0\4\10\16\0\1\10\5\0\3\10\1\130"+
    "\2\10\1\131\23\10\1\0\1\132\3\10\16\0\1\10"+
    "\5\0\3\10\1\133\4\10\1\70\11\10\1\134\2\10"+
    "\1\70\4\10\1\0\4\10\16\0\1\10\5\0\3\10"+
    "\1\135\1\10\1\136\3\10\1\137\4\10\1\140\11\10"+
    "\1\140\1\10\1\0\4\10\16\0\1\10\5\0\3\10"+
    "\1\141\1\10\1\142\3\10\1\143\7\10\1\144\10\10"+
    "\1\0\4\10\16\0\1\10\5\0\3\10\1\110\3\10"+
    "\1\67\1\10\1\111\3\10\1\112\10\10\1\145\1\67"+
    "\2\10\1\0\4\10\16\0\1\10\5\0\3\10\1\146"+
    "\1\10\1\146\24\10\1\0\4\10\56\0\1\147\62\0"+
    "\1\150\21\0\4\53\1\151\1\0\55\53\1\0\1\10"+
    "\5\0\3\10\1\152\3\10\1\152\17\10\1\152\2\10"+
    "\1\0\4\10\16\0\1\10\5\0\1\10\1\153\1\10"+
    "\1\154\13\10\1\155\12\10\1\0\4\10\16\0\1\10"+
    "\5\0\3\10\1\155\13\10\1\155\12\10\1\0\4\10"+
    "\16\0\1\10\5\0\1\10\1\153\1\10\1\153\26\10"+
    "\1\0\4\10\16\0\1\10\5\0\2\10\1\156\1\157"+
    "\25\10\1\156\1\0\2\10\1\160\1\10\16\0\1\10"+
    "\5\0\1\10\1\161\1\156\1\162\1\10\1\163\1\164"+
    "\1\165\1\166\1\167\1\170\1\171\2\10\1\172\1\173"+
    "\1\10\1\174\1\175\2\10\1\166\1\10\1\165\1\172"+
    "\1\156\1\0\1\10\1\176\1\160\1\177\16\0\1\10"+
    "\5\0\3\10\1\200\1\10\1\163\1\201\1\202\7\10"+
    "\1\155\2\10\1\203\4\10\1\202\2\10\1\0\4\10"+
    "\16\0\1\10\5\0\1\10\1\204\1\10\1\205\5\10"+
    "\1\167\20\10\1\0\4\10\16\0\1\10\5\0\3\10"+
    "\1\206\2\10\1\207\7\10\1\210\11\10\1\210\1\10"+
    "\1\0\4\10\16\0\1\10\5\0\3\10\1\211\6\10"+
    "\1\170\1\212\6\10\1\213\7\10\1\0\4\10\16\0"+
    "\1\10\5\0\3\10\1\214\4\10\1\214\14\10\1\214"+
    "\4\10\1\0\4\10\16\0\1\10\5\0\3\10\1\215"+
    "\4\10\1\216\14\10\1\216\4\10\1\0\3\10\1\177"+
    "\16\0\1\10\5\0\3\10\1\217\3\10\1\220\11\10"+
    "\1\174\5\10\1\220\2\10\1\0\1\10\1\176\2\10"+
    "\16\0\1\10\5\0\1\10\1\153\1\10\1\221\7\10"+
    "\1\222\16\10\1\0\4\10\16\0\1\10\5\0\3\10"+
    "\1\223\3\10\1\224\7\10\1\225\7\10\1\224\2\10"+
    "\1\0\4\10\16\0\1\10\5\0\1\10\1\226\1\10"+
    "\1\227\12\10\1\230\11\10\1\230\1\10\1\0\4\10"+
    "\16\0\1\10\5\0\1\10\1\231\1\10\1\231\26\10"+
    "\1\0\4\10\16\0\1\10\5\0\3\10\1\232\6\10"+
    "\1\232\17\10\1\0\4\10\16\0\1\10\5\0\3\10"+
    "\1\233\3\10\1\220\11\10\1\174\5\10\1\220\2\10"+
    "\1\0\4\10\16\0\1\10\5\0\3\10\1\234\5\10"+
    "\1\167\4\10\1\230\11\10\1\230\1\10\1\0\4\10"+
    "\16\0\1\10\5\0\3\10\1\167\5\10\1\167\20\10"+
    "\1\0\4\10\16\0\1\10\5\0\3\10\1\230\12\10"+
    "\1\230\11\10\1\230\1\10\1\0\4\10\16\0\1\10"+
    "\5\0\3\10\1\235\2\10\1\207\1\10\1\216\1\10"+
    "\1\236\3\10\1\210\6\10\1\216\2\10\1\210\1\10"+
    "\1\0\4\10\16\0\1\10\5\0\3\10\1\236\6\10"+
    "\1\236\17\10\1\0\4\10\16\0\1\10\5\0\3\10"+
    "\1\216\4\10\1\216\14\10\1\216\4\10\1\0\4\10"+
    "\16\0\1\10\5\0\3\10\1\237\3\10\1\237\17\10"+
    "\1\237\2\10\1\0\4\10\16\0\1\10\5\0\3\10"+
    "\1\240\1\10\1\241\24\10\1\0\3\10\1\177\16\0"+
    "\1\10\5\0\3\10\1\241\1\10\1\241\24\10\1\0"+
    "\4\10\16\0\1\10\5\0\3\10\1\177\26\10\1\0"+
    "\3\10\1\177\16\0\1\10\5\0\3\10\1\160\26\10"+
    "\1\0\2\10\1\160\1\10\16\0\1\10\5\0\3\10"+
    "\1\242\1\10\1\243\24\10\1\0\2\10\1\160\1\10"+
    "\16\0\1\10\5\0\3\10\1\243\1\10\1\243\24\10"+
    "\1\0\4\10\16\0\1\10\5\0\3\10\1\203\16\10"+
    "\1\203\7\10\1\0\4\10\16\0\1\10\5\0\1\10"+
    "\1\231\1\10\1\244\4\10\1\214\6\10\1\225\5\10"+
    "\1\214\4\10\1\0\4\10\16\0\1\10\5\0\3\10"+
    "\1\225\13\10\1\225\12\10\1\0\4\10\16\0\1\10"+
    "\5\0\2\10\2\156\25\10\1\156\1\0\4\10\16\0"+
    "\1\10\5\0\1\10\1\245\1\10\1\245\26\10\1\0"+
    "\4\10\16\0\1\10\5\0\1\10\1\204\1\10\1\204"+
    "\26\10\1\0\4\10\16\0\1\10\5\0\1\10\1\226"+
    "\1\10\1\226\26\10\1\0\4\10\16\0\1\10\5\0"+
    "\3\10\1\246\13\10\1\246\12\10\1\0\4\10\16\0"+
    "\1\10\5\0\3\10\1\247\3\10\1\202\3\10\1\212"+
    "\13\10\1\202\2\10\1\0\1\10\1\176\2\10\16\0"+
    "\1\10\5\0\3\10\1\202\3\10\1\202\17\10\1\202"+
    "\2\10\1\0\4\10\16\0\1\10\5\0\3\10\1\212"+
    "\7\10\1\212\16\10\1\0\4\10\16\0\1\10\5\0"+
    "\3\10\1\176\26\10\1\0\1\10\1\176\2\10\16\0"+
    "\1\10\5\0\3\10\1\250\2\10\1\201\4\10\1\222"+
    "\6\10\1\213\7\10\1\0\4\10\16\0\1\10\5\0"+
    "\3\10\1\201\2\10\1\201\23\10\1\0\4\10\16\0"+
    "\1\10\5\0\3\10\1\213\16\10\1\213\7\10\1\0"+
    "\4\10\16\0\1\10\5\0\3\10\1\222\7\10\1\222"+
    "\16\10\1\0\4\10\16\0\1\10\5\0\3\10\1\216"+
    "\4\10\1\251\14\10\1\216\4\10\1\0\4\10\16\0"+
    "\1\10\5\0\3\10\1\252\2\10\1\252\23\10\1\0"+
    "\4\10\16\0\1\10\5\0\3\10\1\253\12\10\1\253"+
    "\11\10\1\253\1\10\1\0\4\10\16\0\1\10\5\0"+
    "\3\10\1\254\16\10\1\254\7\10\1\0\4\10\16\0"+
    "\1\10\5\0\3\10\1\255\5\10\1\256\10\10\1\254"+
    "\7\10\1\0\4\10\16\0\1\10\5\0\3\10\1\256"+
    "\5\10\1\256\20\10\1\0\4\10\16\0\1\10\5\0"+
    "\3\10\1\257\12\10\1\257\11\10\1\257\1\10\1\0"+
    "\4\10\16\0\1\10\5\0\3\10\1\260\3\10\1\261"+
    "\3\10\1\262\6\10\1\254\4\10\1\261\2\10\1\0"+
    "\4\10\16\0\1\10\5\0\1\10\1\263\1\10\1\264"+
    "\1\265\2\10\1\266\1\267\1\270\1\10\1\271\1\272"+
    "\1\10\1\273\1\274\1\10\1\275\1\254\2\10\1\267"+
    "\1\10\1\266\1\273\1\10\1\0\4\10\16\0\1\10"+
    "\5\0\3\10\1\276\1\265\6\10\1\277\16\10\1\0"+
    "\4\10\16\0\1\10\5\0\1\10\1\300\1\10\1\301"+
    "\5\10\1\302\20\10\1\0\4\10\16\0\1\10\5\0"+
    "\1\10\1\303\1\10\1\304\5\10\1\305\4\10\1\253"+
    "\11\10\1\253\1\10\1\0\4\10\16\0\1\10\5\0"+
    "\3\10\1\306\3\10\1\307\6\10\1\310\10\10\1\307"+
    "\1\310\1\10\1\0\4\10\16\0\1\10\5\0\3\10"+
    "\1\311\12\10\1\311\11\10\1\311\1\10\1\0\4\10"+
    "\16\0\1\10\5\0\3\10\1\312\7\10\1\312\16\10"+
    "\1\0\4\10\16\0\1\10\5\0\3\10\1\313\4\10"+
    "\1\314\2\10\1\315\11\10\1\314\4\10\1\0\4\10"+
    "\16\0\1\10\5\0\3\10\1\316\1\317\15\10\1\316"+
    "\7\10\1\0\4\10\16\0\1\10\5\0\3\10\1\274"+
    "\13\10\1\274\12\10\1\0\4\10\16\0\1\10\5\0"+
    "\3\10\1\320\4\10\1\321\3\10\1\272\10\10\1\321"+
    "\4\10\1\0\4\10\16\0\1\10\5\0\3\10\1\322"+
    "\3\10\1\322\17\10\1\322\2\10\1\0\4\10\16\0"+
    "\1\10\5\0\3\10\1\275\15\10\1\275\10\10\1\0"+
    "\4\10\16\0\1\10\5\0\3\10\1\323\1\265\3\10"+
    "\1\321\1\256\1\10\1\277\11\10\1\321\4\10\1\0"+
    "\4\10\16\0\1\10\5\0\3\10\1\321\4\10\1\321"+
    "\14\10\1\321\4\10\1\0\4\10\16\0\1\10\5\0"+
    "\3\10\1\324\3\10\1\324\17\10\1\324\2\10\1\0"+
    "\4\10\16\0\1\10\5\0\3\10\1\325\3\10\1\324"+
    "\6\10\1\311\10\10\1\324\1\311\1\10\1\0\4\10"+
    "\16\0\1\10\5\0\1\10\1\300\1\10\1\326\1\317"+
    "\4\10\1\302\20\10\1\0\4\10\16\0\1\10\5\0"+
    "\3\10\2\317\25\10\1\0\4\10\16\0\1\10\5\0"+
    "\3\10\1\327\7\10\1\330\1\272\15\10\1\0\4\10"+
    "\16\0\1\10\5\0\3\10\1\315\7\10\1\315\16\10"+
    "\1\0\4\10\16\0\1\10\5\0\3\10\1\272\10\10"+
    "\1\272\15\10\1\0\4\10\16\0\1\10\5\0\3\10"+
    "\1\310\12\10\1\310\11\10\1\310\1\10\1\0\4\10"+
    "\16\0\1\10\5\0\3\10\1\331\3\10\1\307\11\10"+
    "\1\275\5\10\1\307\2\10\1\0\4\10\16\0\1\10"+
    "\5\0\3\10\1\307\3\10\1\307\17\10\1\307\2\10"+
    "\1\0\4\10\16\0\1\10\5\0\3\10\1\332\3\10"+
    "\1\322\1\10\1\305\5\10\1\274\7\10\1\322\2\10"+
    "\1\0\4\10\16\0\1\10\5\0\3\10\1\305\5\10"+
    "\1\305\20\10\1\0\4\10\16\0\1\10\5\0\3\10"+
    "\1\333\4\10\1\314\11\10\1\254\2\10\1\314\4\10"+
    "\1\0\4\10\16\0\1\10\5\0\3\10\1\314\4\10"+
    "\1\314\14\10\1\314\4\10\1\0\4\10\16\0\1\10"+
    "\5\0\1\10\1\303\1\10\1\334\12\10\1\253\11\10"+
    "\1\253\1\10\1\0\4\10\16\0\1\10\5\0\3\10"+
    "\1\262\7\10\1\262\16\10\1\0\4\10\16\0\1\10"+
    "\5\0\3\10\1\335\7\10\1\262\6\10\1\316\7\10"+
    "\1\0\4\10\16\0\1\10\5\0\3\10\1\316\16\10"+
    "\1\316\7\10\1\0\4\10\16\0\1\10\5\0\3\10"+
    "\1\336\3\10\1\336\17\10\1\336\2\10\1\0\4\10"+
    "\16\0\1\10\5\0\3\10\1\337\5\10\1\305\5\10"+
    "\1\274\12\10\1\0\4\10\16\0\1\10\5\0\3\10"+
    "\1\311\12\10\1\311\3\10\1\316\5\10\1\311\1\10"+
    "\1\0\4\10\16\0\1\10\5\0\1\10\1\300\1\10"+
    "\1\340\1\317\2\10\1\307\1\10\1\302\15\10\1\307"+
    "\2\10\1\0\4\10\16\0\1\10\5\0\1\10\1\303"+
    "\1\10\1\303\26\10\1\0\4\10\16\0\1\10\5\0"+
    "\3\10\1\341\7\10\1\277\5\10\1\275\10\10\1\0"+
    "\4\10\16\0\1\10\5\0\3\10\1\277\7\10\1\277"+
    "\16\10\1\0\4\10\16\0\1\10\5\0\3\10\2\265"+
    "\11\10\1\257\11\10\1\257\1\10\1\0\4\10\16\0"+
    "\1\10\5\0\3\10\2\265\25\10\1\0\4\10\16\0"+
    "\1\10\5\0\3\10\1\310\3\10\1\336\6\10\1\310"+
    "\10\10\1\336\1\310\1\10\1\0\4\10\16\0\1\10"+
    "\5\0\3\10\1\342\3\10\1\324\3\10\1\262\13\10"+
    "\1\324\2\10\1\0\4\10\16\0\1\10\5\0\3\10"+
    "\1\322\3\10\1\322\3\10\1\315\13\10\1\322\2\10"+
    "\1\0\4\10\16\0\1\10\5\0\3\10\1\343\4\10"+
    "\1\314\3\10\1\272\10\10\1\314\4\10\1\0\4\10"+
    "\16\0\1\10\5\0\3\10\1\307\3\10\1\307\17\10"+
    "\1\344\2\10\1\0\4\10\16\0\1\10\5\0\3\10"+
    "\1\345\20\10\1\345\5\10\1\0\4\10\16\0\1\10"+
    "\5\0\3\10\1\346\7\10\1\346\16\10\1\0\4\10"+
    "\16\0\1\10\5\0\3\10\1\347\12\10\1\347\11\10"+
    "\1\347\1\10\1\0\4\10\16\0\1\10\5\0\3\10"+
    "\1\350\12\10\1\350\11\10\1\350\1\10\1\0\4\10"+
    "\16\0\1\10\5\0\3\10\1\351\12\10\1\351\11\10"+
    "\1\351\1\10\1\0\4\10\16\0\1\10\5\0\3\10"+
    "\1\352\7\10\1\353\6\10\1\354\7\10\1\0\4\10"+
    "\16\0\1\10\5\0\1\10\1\355\1\10\1\356\1\10"+
    "\1\357\1\360\1\361\3\10\1\362\1\363\1\10\1\364"+
    "\3\10\1\354\1\10\1\345\2\10\1\361\1\364\1\10"+
    "\1\0\4\10\16\0\1\10\5\0\3\10\1\365\12\10"+
    "\1\365\11\10\1\365\1\10\1\0\4\10\16\0\1\10"+
    "\5\0\3\10\1\366\1\10\1\357\10\10\1\367\11\10"+
    "\1\367\1\10\1\0\4\10\16\0\1\10\5\0\3\10"+
    "\1\370\2\10\1\360\4\10\1\346\1\363\15\10\1\0"+
    "\4\10\16\0\1\10\5\0\1\10\1\371\1\10\1\372"+
    "\12\10\1\373\11\10\1\373\1\10\1\0\4\10\16\0"+
    "\1\10\5\0\3\10\1\361\3\10\1\361\17\10\1\361"+
    "\2\10\1\0\4\10\16\0\1\10\5\0\1\10\1\374"+
    "\1\10\1\375\20\10\1\345\5\10\1\0\4\10\16\0"+
    "\1\10\5\0\3\10\1\376\7\10\1\376\16\10\1\0"+
    "\4\10\16\0\1\10\5\0\3\10\1\377\7\10\1\377"+
    "\16\10\1\0\4\10\16\0\1\10\5\0\3\10\1\u0100"+
    "\12\10\1\u0100\11\10\1\u0100\1\10\1\0\4\10\16\0"+
    "\1\10\5\0\3\10\1\354\16\10\1\354\7\10\1\0"+
    "\4\10\16\0\1\10\5\0\3\10\1\u0101\10\10\1\363"+
    "\5\10\1\354\7\10\1\0\4\10\16\0\1\10\5\0"+
    "\3\10\1\363\10\10\1\363\15\10\1\0\4\10\16\0"+
    "\1\10\5\0\3\10\1\353\7\10\1\353\16\10\1\0"+
    "\4\10\16\0\1\10\5\0\3\10\1\u0102\2\10\1\360"+
    "\4\10\1\353\10\10\1\345\5\10\1\0\4\10\16\0"+
    "\1\10\5\0\3\10\1\360\2\10\1\360\23\10\1\0"+
    "\4\10\16\0\1\10\5\0\1\10\1\374\1\10\1\u0103"+
    "\12\10\1\u0104\11\10\1\u0104\1\10\1\0\4\10\16\0"+
    "\1\10\5\0\3\10\1\u0104\12\10\1\u0104\11\10\1\u0104"+
    "\1\10\1\0\4\10\16\0\1\10\5\0\1\10\1\374"+
    "\1\10\1\374\26\10\1\0\4\10\16\0\1\10\5\0"+
    "\1\10\1\371\1\10\1\371\26\10\1\0\4\10\16\0"+
    "\1\10\5\0\3\10\1\367\12\10\1\367\11\10\1\367"+
    "\1\10\1\0\4\10\16\0\1\10\5\0\3\10\1\u0105"+
    "\1\10\1\357\1\10\1\361\17\10\1\361\2\10\1\0"+
    "\4\10\16\0\1\10\5\0\3\10\1\357\1\10\1\357"+
    "\24\10\1\0\4\10\16\0\1\10\5\0\3\10\1\u0106"+
    "\1\10\1\357\5\10\1\346\2\10\1\u0100\11\10\1\u0100"+
    "\1\10\1\0\4\10\16\0\1\10\5\0\1\10\1\371"+
    "\1\10\1\u0107\3\10\1\361\17\10\1\361\2\10\1\0"+
    "\4\10\16\0\1\10\5\0\3\10\1\u0108\7\10\1\377"+
    "\2\10\1\u0104\11\10\1\u0104\1\10\1\0\4\10\16\0"+
    "\1\10\5\0\3\10\1\u0109\2\10\1\360\4\10\1\376"+
    "\16\10\1\0\4\10\16\0\1\10\5\0\3\10\1\u010a"+
    "\7\10\1\353\10\10\1\345\5\10\1\0\4\10\16\0"+
    "\1\10\5\0\3\10\1\u010b\10\10\1\363\1\10\1\u0104"+
    "\3\10\1\354\5\10\1\u0104\1\10\1\0\4\10\16\0"+
    "\1\10\5\0\3\10\1\u010c\7\10\1\377\2\10\1\u0100"+
    "\11\10\1\u0100\1\10\1\0\4\10\16\0\1\10\5\0"+
    "\3\10\1\u010d\3\10\1\361\6\10\1\367\10\10\1\361"+
    "\1\367\1\10\1\0\4\10\16\0\1\10\5\0\3\10"+
    "\1\u0104\12\10\1\u0104\11\10\1\u010e\1\10\1\0\4\10"+
    "\16\0\1\10\5\0\3\10\1\u010f\12\10\1\u010f\11\10"+
    "\1\u010f\1\10\1\0\4\10\16\0\1\10\5\0\3\10"+
    "\1\u0110\12\10\1\u0110\11\10\1\u0110\1\10\1\0\4\10"+
    "\16\0\1\10\5\0\3\10\1\u0111\7\10\1\u0111\16\10"+
    "\1\0\4\10\16\0\1\10\5\0\3\10\1\u0112\20\10"+
    "\1\u0112\5\10\1\0\4\10\16\0\1\10\5\0\3\10"+
    "\1\u0113\10\10\1\u0114\6\10\1\u0113\6\10\1\0\4\10"+
    "\16\0\1\10\5\0\1\10\1\u0115\1\u0116\1\u0117\3\10"+
    "\1\u0118\3\10\1\u0119\1\u0114\1\10\1\u011a\2\10\1\u011b"+
    "\1\u011c\1\u0113\1\u0112\2\10\1\u0118\1\u011a\1\u0116\1\0"+
    "\4\10\16\0\1\10\5\0\3\10\1\u011d\7\10\1\u011d"+
    "\16\10\1\0\4\10\16\0\1\10\5\0\3\10\1\u011c"+
    "\16\10\1\u011c\7\10\1\0\4\10\16\0\1\10\5\0"+
    "\1\10\1\u011e\1\10\1\u011e\26\10\1\0\4\10\16\0"+
    "\1\10\5\0\1\10\1\u011f\1\10\1\u0120\12\10\1\u0110"+
    "\11\10\1\u0110\1\10\1\0\4\10\16\0\1\10\5\0"+
    "\3\10\1\u0118\3\10\1\u0118\17\10\1\u0118\2\10\1\0"+
    "\4\10\16\0\1\10\5\0\2\10\1\u0116\1\u0121\7\10"+
    "\1\u0111\5\10\1\u011b\7\10\1\u0116\1\0\4\10\16\0"+
    "\1\10\5\0\2\10\1\u0116\1\u0122\7\10\1\u0111\15\10"+
    "\1\u0116\1\0\4\10\16\0\1\10\5\0\3\10\1\u0123"+
    "\3\10\1\u0118\6\10\1\u0110\3\10\1\u011c\4\10\1\u0118"+
    "\1\u0110\1\10\1\0\4\10\16\0\1\10\5\0\3\10"+
    "\1\u0114\10\10\1\u0114\15\10\1\0\4\10\16\0\1\10"+
    "\5\0\3\10\1\u0124\10\10\1\u0114\4\10\1\u011b\10\10"+
    "\1\0\4\10\16\0\1\10\5\0\3\10\1\u011b\15\10"+
    "\1\u011b\10\10\1\0\4\10\16\0\1\10\5\0\3\10"+
    "\1\u0113\17\10\1\u0113\6\10\1\0\4\10\16\0\1\10"+
    "\5\0\3\10\1\u0125\12\10\1\u010f\4\10\1\u0113\4\10"+
    "\1\u010f\1\10\1\0\4\10\16\0\1\10\5\0\1\10"+
    "\1\u011f\1\10\1\u011f\26\10\1\0\4\10\16\0\1\10"+
    "\5\0\3\10\1\u0126\3\10\1\u0118\14\10\1\u0112\2\10"+
    "\1\u0118\2\10\1\0\4\10\16\0\1\10\5\0\3\10"+
    "\1\u0127\12\10\1\u010f\3\10\1\u011c\5\10\1\u010f\1\10"+
    "\1\0\4\10\16\0\1\10\5\0\2\10\1\u0116\1\u0113"+
    "\17\10\1\u0113\5\10\1\u0116\1\0\4\10\16\0\1\10"+
    "\5\0\2\10\2\u0116\25\10\1\u0116\1\0\4\10\16\0"+
    "\1\10\5\0\1\10\1\u011e\1\10\1\u0128\7\10\1\u011d"+
    "\16\10\1\0\4\10\16\0\1\10\5\0\3\10\1\u0129"+
    "\7\10\1\u011d\2\10\1\u0110\2\10\1\u011b\6\10\1\u0110"+
    "\1\10\1\0\4\10\16\0\1\10\5\0\1\10\1\u011e"+
    "\1\10\1\u012a\10\10\1\u0114\15\10\1\0\4\10\16\0"+
    "\1\10\5\0\1\10\1\u011f\1\10\1\u012b\16\10\1\u011c"+
    "\7\10\1\0\4\10\16\0\1\10\5\0\2\10\1\u0116"+
    "\1\u0126\3\10\1\u0118\14\10\1\u0112\2\10\1\u0118\1\10"+
    "\1\u0116\1\0\4\10\16\0\1\10\5\0\2\10\2\u0116"+
    "\25\10\1\u012c\1\0\4\10\16\0\1\10\5\0\3\10"+
    "\1\u012d\2\10\1\u012d\23\10\1\0\4\10\16\0\1\10"+
    "\5\0\1\10\1\u012e\1\10\1\u012e\26\10\1\0\4\10"+
    "\16\0\1\10\5\0\3\10\1\u012f\1\10\1\u0130\14\10"+
    "\1\u0131\7\10\1\0\4\10\16\0\1\10\5\0\1\10"+
    "\1\u012e\1\10\1\u0132\1\10\1\u0130\1\u012d\2\10\1\u0133"+
    "\4\10\1\u0134\3\10\1\u0135\5\10\1\u0134\1\10\1\0"+
    "\4\10\16\0\1\10\5\0\3\10\1\u0133\5\10\1\u0133"+
    "\20\10\1\0\4\10\16\0\1\10\5\0\1\10\1\u012e"+
    "\1\10\1\u0136\12\10\1\u0134\11\10\1\u0134\1\10\1\0"+
    "\4\10\16\0\1\10\5\0\3\10\1\u0137\16\10\1\u0137"+
    "\7\10\1\0\4\10\16\0\1\10\5\0\3\10\1\u0134"+
    "\12\10\1\u0134\11\10\1\u0134\1\10\1\0\4\10\16\0"+
    "\1\10\5\0\3\10\1\u0130\1\10\1\u0130\24\10\1\0"+
    "\4\10\16\0\1\10\5\0\3\10\1\u0131\16\10\1\u0131"+
    "\7\10\1\0\4\10\16\0\1\10\5\0\1\10\1\u012e"+
    "\1\10\1\u0138\16\10\1\u0137\7\10\1\0\4\10\16\0"+
    "\1\10\5\0\3\10\1\u0139\1\10\1\u0130\10\10\1\u0134"+
    "\11\10\1\u0134\1\10\1\0\4\10\16\0\1\10\5\0"+
    "\3\10\1\u0137\12\10\1\u0134\3\10\1\u0137\5\10\1\u0134"+
    "\1\10\1\0\4\10\16\0\1\10\5\0\32\10\1\u013a"+
    "\4\10\16\0\1\10\5\0\3\10\1\u013b\16\10\1\u013b"+
    "\7\10\1\0\4\10\16\0\1\10\5\0\3\10\1\u013c"+
    "\12\10\1\u013d\3\10\1\u013c\5\10\1\u013d\1\10\1\0"+
    "\4\10\16\0\1\10\5\0\3\10\1\u013c\16\10\1\u013c"+
    "\7\10\1\0\4\10\16\0\1\10\5\0\3\10\1\u013d"+
    "\12\10\1\u013d\11\10\1\u013d\1\10\1\0\4\10\16\0"+
    "\1\10\5\0\3\10\1\u013e\2\10\1\u013f\7\10\1\u013d"+
    "\3\10\1\u0140\5\10\1\u013d\1\10\1\0\4\10\16\0"+
    "\1\10\5\0\3\10\1\u013f\2\10\1\u013f\23\10\1\0"+
    "\4\10\27\0\1\u0141\4\0\1\u0141\14\0\1\u0141\27\0"+
    "\1\10\5\0\3\10\1\u0142\12\10\1\u0142\11\10\1\u0142"+
    "\1\10\1\0\4\10\16\0\1\10\5\0\3\10\1\u0143"+
    "\12\10\1\u0143\11\10\1\u0143\1\10\1\0\4\10\27\0"+
    "\1\u0144\11\0\1\u0144\10\0\1\u0144\37\0\1\u0145\4\0"+
    "\1\u0145\14\0\1\u0145\40\0\1\u0146\3\0\1\u0146\17\0"+
    "\1\u0146\36\0\1\u0147\12\0\1\u0147\11\0\1\u0147\34\0"+
    "\2\u0148\25\0\1\u0148\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11730];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\31\1\1\11\1\1\11\11\2\1\2\11"+
    "\1\0\73\1\2\11\321\1\1\0\6\1\1\0\2\1"+
    "\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  lexercup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  lexercup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 30: 
          { return new Symbol(sym.tk_dim, yychar, yyline, yytext());
          }
        case 65: break;
        case 35: 
          { return new Symbol(sym.tk_and, yychar, yyline, yytext());
          }
        case 66: break;
        case 40: 
          { return new Symbol(sym.tk_true, yychar, yyline, yytext());
          }
        case 67: break;
        case 11: 
          { return new Symbol(sym.tk_Signomod, yychar, yyline, yytext());
          }
        case 68: break;
        case 2: 
          { return new Symbol(sym.tk_Numero, yychar, yyline, yytext());
          }
        case 69: break;
        case 16: 
          { return new Symbol(sym.tk_mayorque, yychar, yyline, yytext());
          }
        case 70: break;
        case 63: 
          { return new Symbol(sym.tk_writeline, yychar, yyline, yytext());
          }
        case 71: break;
        case 10: 
          { return new Symbol(sym.tk_Division, yychar, yyline, yytext());
          }
        case 72: break;
        case 48: 
          { return new Symbol(sym.tk_write, yychar, yyline, yytext());
          }
        case 73: break;
        case 44: 
          { return new Symbol(sym.tk_else, yychar, yyline, yytext());
          }
        case 74: break;
        case 7: 
          { return new Symbol(sym.tk_Suma, yychar, yyline, yytext());
          }
        case 75: break;
        case 45: 
          { return new Symbol(sym.tk_then, yychar, yyline, yytext());
          }
        case 76: break;
        case 57: 
          { return new Symbol(sym.tk_return, yychar, yyline, yytext());
          }
        case 77: break;
        case 6: 
          { return new Symbol(sym.tk_Igual, yychar, yyline, yytext());
          }
        case 78: break;
        case 50: 
          { return new Symbol(sym.tk_byval, yychar, yyline, yytext());
          }
        case 79: break;
        case 24: 
          { return new Symbol(sym.tk_or, yychar, yyline, yytext());
          }
        case 80: break;
        case 38: 
          { return new Symbol(sym.tk_like, yychar, yyline, yytext());
          }
        case 81: break;
        case 13: 
          { return new Symbol(sym.tk_Coma, yychar, yyline, yytext());
          }
        case 82: break;
        case 56: 
          { return new Symbol(sym.tk_sys, yychar, yyline, yytext());
          }
        case 83: break;
        case 14: 
          { return new Symbol(sym.tk_ampersant, yychar, yyline, yytext());
          }
        case 84: break;
        case 36: 
          { return new Symbol(sym.tk_xor, yychar, yyline, yytext());
          }
        case 85: break;
        case 34: 
          { return new Symbol(sym.tk_end, yychar, yyline, yytext());
          }
        case 86: break;
        case 33: 
          { return new Symbol(sym.tk_sub, yychar, yyline, yytext());
          }
        case 87: break;
        case 60: 
          { return new Symbol(sym.tk_boolean, yychar, yyline, yytext());
          }
        case 88: break;
        case 49: 
          { return new Symbol(sym.tk_until, yychar, yyline, yytext());
          }
        case 89: break;
        case 18: 
          { return new Symbol(sym.tk_ParentesisA, yychar, yyline, yytext());
          }
        case 90: break;
        case 27: 
          { return new Symbol(sym.tk_menorigual, yychar, yyline, yytext());
          }
        case 91: break;
        case 53: 
          { return new Symbol(sym.tk_String, yychar, yyline, yytext());
          }
        case 92: break;
        case 51: 
          { return new Symbol(sym.tk_false, yychar, yyline, yytext());
          }
        case 93: break;
        case 61: 
          { return new Symbol(sym.tk_function, yychar, yyline, yytext());
          }
        case 94: break;
        case 28: 
          { return new Symbol(sym.tk_valorString, yychar, yyline, yytext());
          }
        case 95: break;
        case 52: 
          { return new Symbol(sym.tk_module, yychar, yyline, yytext());
          }
        case 96: break;
        case 59: 
          { return new Symbol(sym.tk_cs, yychar, yyline, yytext());
          }
        case 97: break;
        case 47: 
          { return new Symbol(sym.tk_while, yychar, yyline, yytext());
          }
        case 98: break;
        case 15: 
          { return new Symbol(sym.tk_punto, yychar, yyline, yytext());
          }
        case 99: break;
        case 20: 
          { return new Symbol(sym.tk_comentario, yychar, yyline, yytext());
          }
        case 100: break;
        case 43: 
          { return new Symbol(sym.tk_null, yychar, yyline, yytext());
          }
        case 101: break;
        case 9: 
          { return new Symbol(sym.tk_Multiplicacion, yychar, yyline, yytext());
          }
        case 102: break;
        case 5: 
          { return new Symbol(sym.tk_Identificador, yychar, yyline, yytext());
          }
        case 103: break;
        case 17: 
          { return new Symbol(sym.tk_menorque, yychar, yyline, yytext());
          }
        case 104: break;
        case 62: 
          { return new Symbol(sym.tk_readline, yychar, yyline, yytext());
          }
        case 105: break;
        case 12: 
          { return new Symbol(sym.tk_Potencia, yychar, yyline, yytext());
          }
        case 106: break;
        case 55: 
          { return new Symbol(sym.tk_public, yychar, yyline, yytext());
          }
        case 107: break;
        case 39: 
          { return new Symbol(sym.tk_exit, yychar, yyline, yytext());
          }
        case 108: break;
        case 25: 
          { return new Symbol(sym.tk_to, yychar, yyline, yytext());
          }
        case 109: break;
        case 23: 
          { return new Symbol(sym.tk_do, yychar, yyline, yytext());
          }
        case 110: break;
        case 8: 
          { return new Symbol(sym.tk_Resta, yychar, yyline, yytext());
          }
        case 111: break;
        case 37: 
          { return new Symbol(sym.tk_main, yychar, yyline, yytext());
          }
        case 112: break;
        case 22: 
          { return new Symbol(sym.tk_as, yychar, yyline, yytext());
          }
        case 113: break;
        case 19: 
          { return new Symbol(sym.tk_ParentesisC, yychar, yyline, yytext());
          }
        case 114: break;
        case 31: 
          { return new Symbol(sym.tk_for, yychar, yyline, yytext());
          }
        case 115: break;
        case 41: 
          { return new Symbol(sym.tk_loop, yychar, yyline, yytext());
          }
        case 116: break;
        case 26: 
          { return new Symbol(sym.tk_mayorigual, yychar, yyline, yytext());
          }
        case 117: break;
        case 64: 
          { return new Symbol(sym.tk_structure, yychar, yyline, yytext());
          }
        case 118: break;
        case 32: 
          { return new Symbol(sym.tk_not, yychar, yyline, yytext());
          }
        case 119: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 120: break;
        case 54: 
          { return new Symbol(sym.tk_elseif, yychar, yyline, yytext());
          }
        case 121: break;
        case 46: 
          { return new Symbol(sym.tk_step, yychar, yyline, yytext());
          }
        case 122: break;
        case 4: 
          { return new Symbol(sym.tk_Linea, yychar, yyline, yytext());
          }
        case 123: break;
        case 58: 
          { return new Symbol(sym.tk_integer, yychar, yyline, yytext());
          }
        case 124: break;
        case 42: 
          { return new Symbol(sym.tk_next, yychar, yyline, yytext());
          }
        case 125: break;
        case 29: 
          { return new Symbol(sym.tk_mod, yychar, yyline, yytext());
          }
        case 126: break;
        case 21: 
          { return new Symbol(sym.tk_if, yychar, yyline, yytext());
          }
        case 127: break;
        case 3: 
          { 
          }
        case 128: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
