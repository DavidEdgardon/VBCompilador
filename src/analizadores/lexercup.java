/* The following code was generated by JFlex 1.4.3 on 03-16-21 10:57 AM */

package analizadores;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 03-16-21 10:57 AM from the specification file
 * <tt>C:/Users/David/Documents/NetBeansProjects/VBCompilador/src/analizadores/lexercup.flex</tt>
 */
class lexercup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  5,  0,  0,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     2,  0,  4,  0,  0,  0, 42,  0, 46, 47, 39, 37, 41, 38, 43, 40, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0, 45, 32, 44,  0, 
     0, 23, 16, 18, 21, 20, 24, 26, 33,  7,  6, 35, 17,  8, 25, 11, 
    10,  6, 12, 27, 13, 15, 36, 22, 34, 19,  6,  0,  0,  0,  0,  6, 
     0, 23, 16, 18, 21, 30, 24, 26, 33,  7,  6, 35, 17, 31, 25, 11, 
    10,  6, 12, 14, 29, 15, 36, 22, 34, 28,  6,  0,  9,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\24\5\1\6"+
    "\1\5\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\0\2\22\5\5\1\23"+
    "\1\24\1\25\1\5\1\23\11\5\1\25\1\5\2\26"+
    "\20\5\2\24\3\5\1\23\13\5\1\27\1\30\1\31"+
    "\2\5\2\32\2\33\2\5\1\33\1\5\1\34\1\35"+
    "\2\5\1\36\2\5\1\37\4\5\2\34\1\35\6\5"+
    "\1\36\11\5\1\37\1\5\1\37\7\5\2\36\5\5"+
    "\1\37\1\5\1\40\1\34\1\35\1\5\1\41\1\5"+
    "\2\42\1\5\1\43\1\42\1\44\2\5\1\45\1\46"+
    "\1\47\2\5\1\50\1\5\1\45\1\51\1\5\1\46"+
    "\7\5\1\52\1\5\1\52\1\45\1\5\1\50\1\5"+
    "\1\50\1\53\1\54\2\5\1\47\1\46\1\5\1\45"+
    "\1\54\2\50\1\5\1\47\1\42\1\5\1\53\1\44"+
    "\1\51\1\54\6\5\1\55\1\56\1\55\2\57\2\5"+
    "\1\60\3\5\1\60\1\5\1\61\1\56\2\61\2\5"+
    "\2\55\2\5\1\60\2\5\1\57\5\5\1\60\1\57"+
    "\1\5\1\60\1\61\2\5\1\62\1\5\1\63\1\64"+
    "\1\65\1\5\1\66\1\63\2\5\1\62\1\5\1\67"+
    "\1\5\2\66\1\67\1\65\1\64\1\63\1\67\1\5"+
    "\1\62\1\65\1\66\1\70\2\5\1\70\1\5\1\71"+
    "\1\72\1\71\1\72\1\71\1\0\1\5\2\73\1\5"+
    "\1\73\1\0\1\74\1\75\4\0\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[314];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u0450"+
    "\0\u0480\0\u04b0\0\60\0\u04e0\0\60\0\60\0\60\0\60"+
    "\0\60\0\60\0\60\0\u0510\0\u0540\0\60\0\60\0\u0570"+
    "\0\u05a0\0\u0120\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660\0\u0690"+
    "\0\u06c0\0\u06f0\0\u0720\0\u0120\0\u0750\0\u0780\0\u07b0\0\u07e0"+
    "\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0120\0\u0900\0\u0930"+
    "\0\u0120\0\u0960\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80"+
    "\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00"+
    "\0\u0c30\0\u0c30\0\u0120\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0cf0"+
    "\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70"+
    "\0\u0ea0\0\u0ed0\0\60\0\60\0\u0570\0\u0f00\0\u0f30\0\u0f60"+
    "\0\u0f90\0\u0120\0\u0fc0\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\u1080"+
    "\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0\0\u0f90\0\u11d0"+
    "\0\u1200\0\u1230\0\u1260\0\u1290\0\u0120\0\u0120\0\u12c0\0\u12f0"+
    "\0\u1320\0\u1350\0\u1080\0\u1380\0\u13b0\0\u13e0\0\u1410\0\u1440"+
    "\0\u1470\0\u14a0\0\u14d0\0\u1500\0\u1530\0\u1560\0\u1590\0\u1590"+
    "\0\u0120\0\u15c0\0\u15f0\0\u1620\0\u1650\0\u1140\0\u1680\0\u16b0"+
    "\0\u16e0\0\u0120\0\u1710\0\u1740\0\u1770\0\u17a0\0\u17d0\0\u1800"+
    "\0\u1830\0\u0120\0\u1860\0\u1890\0\u18c0\0\u0120\0\u18f0\0\u0120"+
    "\0\u1920\0\u1920\0\u0120\0\u1950\0\u1980\0\u19b0\0\u19e0\0\u1a10"+
    "\0\u0120\0\u1a40\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u0120"+
    "\0\u1b60\0\u1b90\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20\0\u1c50\0\u1c80"+
    "\0\u1cb0\0\u1ce0\0\u1d10\0\u1d40\0\u0120\0\u1d70\0\u1da0\0\u1da0"+
    "\0\u0120\0\u0120\0\u0120\0\u1dd0\0\u1e00\0\u0120\0\u1e30\0\u1980"+
    "\0\u1980\0\u1bf0\0\u1e60\0\u1d70\0\u1e90\0\u1cb0\0\u1da0\0\u1ec0"+
    "\0\u19b0\0\u0120\0\u1cb0\0\u1ef0\0\u1f20\0\u1950\0\u1f50\0\u1f80"+
    "\0\u1fb0\0\u1fe0\0\u2010\0\u2010\0\u0120\0\u2040\0\u0120\0\u2040"+
    "\0\u2070\0\u20a0\0\u20d0\0\u2100\0\u2130\0\u1fe0\0\u2160\0\u2190"+
    "\0\u21c0\0\u20d0\0\u0120\0\u21f0\0\u2220\0\u2250\0\u2280\0\u22b0"+
    "\0\u22e0\0\u0120\0\u2280\0\u2310\0\u2340\0\u2370\0\u23a0\0\u23d0"+
    "\0\u2400\0\u2430\0\u23a0\0\u1fb0\0\u2460\0\u2280\0\u2130\0\u2490"+
    "\0\u24c0\0\u0120\0\u24f0\0\u0120\0\u0120\0\u0120\0\u2520\0\u0120"+
    "\0\u2550\0\u2580\0\u25b0\0\u24c0\0\u25e0\0\u0120\0\u2610\0\u2640"+
    "\0\u24f0\0\u2580\0\u25e0\0\u24c0\0\u2580\0\u24c0\0\u2670\0\u26a0"+
    "\0\u2520\0\u26d0\0\u0120\0\u2700\0\u2730\0\u2760\0\u2790\0\u0120"+
    "\0\u0120\0\u2700\0\u2700\0\u2730\0\u27c0\0\u27f0\0\u0120\0\u2820"+
    "\0\u2820\0\u27f0\0\u2850\0\u0120\0\u0120\0\u2880\0\u28b0\0\u28e0"+
    "\0\u2910\0\60";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[314];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\7\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\7\1\32\1\7\1\16\1\24\1\11"+
    "\1\33\1\7\1\34\2\7\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\61\0"+
    "\1\3\60\0\1\4\60\0\1\5\1\0\1\5\52\0"+
    "\5\50\1\0\52\50\1\0\1\7\4\0\32\7\1\0"+
    "\4\7\14\0\1\7\4\0\3\7\1\51\16\7\1\52"+
    "\1\53\6\7\1\0\4\7\14\0\1\7\4\0\3\7"+
    "\1\54\1\7\1\55\13\7\1\56\10\7\1\0\4\7"+
    "\14\0\1\7\4\0\1\7\1\57\1\7\1\60\1\7"+
    "\1\61\1\62\1\63\1\64\1\65\1\7\1\66\1\7"+
    "\1\67\1\70\2\7\1\71\1\52\1\72\1\7\1\64"+
    "\1\67\1\63\1\70\1\7\1\0\1\73\1\74\2\7"+
    "\14\0\1\7\4\0\3\7\1\75\5\7\1\75\20\7"+
    "\1\0\4\7\14\0\1\7\4\0\3\7\1\76\2\7"+
    "\1\76\23\7\1\0\4\7\14\0\1\7\4\0\3\7"+
    "\1\77\12\7\1\77\11\7\1\77\1\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\100\1\7\1\101\1\102"+
    "\23\7\1\0\1\103\3\7\14\0\1\7\4\0\3\7"+
    "\1\104\3\7\1\63\1\7\1\105\3\7\1\106\10\7"+
    "\1\106\1\63\2\7\1\0\4\7\14\0\1\7\4\0"+
    "\3\7\1\107\17\7\1\107\6\7\1\0\4\7\14\0"+
    "\1\7\4\0\3\7\1\110\1\7\1\111\7\7\1\112"+
    "\10\7\1\112\3\7\1\0\4\7\14\0\1\7\4\0"+
    "\1\7\1\113\1\7\1\114\1\7\1\115\24\7\1\0"+
    "\4\7\14\0\1\7\4\0\3\7\1\116\1\7\1\116"+
    "\24\7\1\0\4\7\14\0\1\7\4\0\3\7\1\117"+
    "\7\7\1\66\7\7\1\120\6\7\1\0\1\7\1\74"+
    "\2\7\14\0\1\7\4\0\1\7\1\121\1\7\1\122"+
    "\1\7\1\123\24\7\1\0\4\7\14\0\1\7\4\0"+
    "\3\7\1\124\2\7\1\125\23\7\1\0\1\126\3\7"+
    "\14\0\1\7\4\0\3\7\1\127\4\7\1\64\12\7"+
    "\1\130\1\7\1\64\4\7\1\0\4\7\14\0\1\7"+
    "\4\0\3\7\1\131\1\7\1\132\3\7\1\133\7\7"+
    "\1\134\10\7\1\0\4\7\14\0\1\7\4\0\3\7"+
    "\1\135\1\7\1\136\3\7\1\137\4\7\1\140\11\7"+
    "\1\140\1\7\1\0\4\7\14\0\1\7\4\0\3\7"+
    "\1\104\3\7\1\63\1\7\1\105\3\7\1\106\10\7"+
    "\1\141\1\63\2\7\1\0\4\7\14\0\1\7\4\0"+
    "\3\7\1\142\1\7\1\142\24\7\1\0\4\7\53\0"+
    "\1\143\57\0\1\144\17\0\4\50\1\145\1\0\52\50"+
    "\1\0\1\7\4\0\3\7\1\146\3\7\1\146\17\7"+
    "\1\146\2\7\1\0\4\7\14\0\1\7\4\0\1\7"+
    "\1\147\1\7\1\150\13\7\1\151\12\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\151\13\7\1\151\12\7"+
    "\1\0\4\7\14\0\1\7\4\0\1\7\1\147\1\7"+
    "\1\147\26\7\1\0\4\7\14\0\1\7\4\0\2\7"+
    "\1\152\1\153\25\7\1\152\1\0\2\7\1\154\1\7"+
    "\14\0\1\7\4\0\1\7\1\155\1\152\1\156\1\7"+
    "\1\157\1\160\1\161\1\162\1\163\1\164\1\165\2\7"+
    "\1\166\1\167\1\7\1\170\1\7\1\171\1\7\1\162"+
    "\1\7\1\161\1\166\1\152\1\0\1\7\1\172\1\154"+
    "\1\173\14\0\1\7\4\0\3\7\1\174\1\7\1\157"+
    "\1\175\1\176\7\7\1\151\3\7\1\177\3\7\1\176"+
    "\2\7\1\0\4\7\14\0\1\7\4\0\1\7\1\200"+
    "\1\7\1\201\5\7\1\163\20\7\1\0\4\7\14\0"+
    "\1\7\4\0\3\7\1\202\2\7\1\203\7\7\1\204"+
    "\11\7\1\204\1\7\1\0\4\7\14\0\1\7\4\0"+
    "\3\7\1\205\6\7\1\164\1\206\7\7\1\207\6\7"+
    "\1\0\4\7\14\0\1\7\4\0\3\7\1\210\4\7"+
    "\1\210\14\7\1\210\4\7\1\0\4\7\14\0\1\7"+
    "\4\0\3\7\1\211\4\7\1\212\14\7\1\212\4\7"+
    "\1\0\3\7\1\173\14\0\1\7\4\0\3\7\1\213"+
    "\3\7\1\214\11\7\1\170\5\7\1\214\2\7\1\0"+
    "\1\7\1\172\2\7\14\0\1\7\4\0\1\7\1\147"+
    "\1\7\1\215\7\7\1\216\16\7\1\0\4\7\14\0"+
    "\1\7\4\0\3\7\1\217\3\7\1\220\7\7\1\221"+
    "\7\7\1\220\2\7\1\0\4\7\14\0\1\7\4\0"+
    "\1\7\1\222\1\7\1\223\12\7\1\224\11\7\1\224"+
    "\1\7\1\0\4\7\14\0\1\7\4\0\1\7\1\225"+
    "\1\7\1\225\26\7\1\0\4\7\14\0\1\7\4\0"+
    "\3\7\1\226\6\7\1\226\17\7\1\0\4\7\14\0"+
    "\1\7\4\0\3\7\1\227\3\7\1\214\11\7\1\170"+
    "\5\7\1\214\2\7\1\0\4\7\14\0\1\7\4\0"+
    "\3\7\1\230\5\7\1\163\4\7\1\224\11\7\1\224"+
    "\1\7\1\0\4\7\14\0\1\7\4\0\3\7\1\163"+
    "\5\7\1\163\20\7\1\0\4\7\14\0\1\7\4\0"+
    "\3\7\1\224\12\7\1\224\11\7\1\224\1\7\1\0"+
    "\4\7\14\0\1\7\4\0\3\7\1\231\2\7\1\203"+
    "\1\7\1\212\1\7\1\232\3\7\1\204\6\7\1\212"+
    "\2\7\1\204\1\7\1\0\4\7\14\0\1\7\4\0"+
    "\3\7\1\232\6\7\1\232\17\7\1\0\4\7\14\0"+
    "\1\7\4\0\3\7\1\212\4\7\1\212\14\7\1\212"+
    "\4\7\1\0\4\7\14\0\1\7\4\0\3\7\1\233"+
    "\3\7\1\233\17\7\1\233\2\7\1\0\4\7\14\0"+
    "\1\7\4\0\3\7\1\234\1\7\1\235\24\7\1\0"+
    "\3\7\1\173\14\0\1\7\4\0\3\7\1\235\1\7"+
    "\1\235\24\7\1\0\4\7\14\0\1\7\4\0\3\7"+
    "\1\173\26\7\1\0\3\7\1\173\14\0\1\7\4\0"+
    "\3\7\1\154\26\7\1\0\2\7\1\154\1\7\14\0"+
    "\1\7\4\0\3\7\1\236\1\7\1\237\24\7\1\0"+
    "\2\7\1\154\1\7\14\0\1\7\4\0\3\7\1\237"+
    "\1\7\1\237\24\7\1\0\4\7\14\0\1\7\4\0"+
    "\3\7\1\177\17\7\1\177\6\7\1\0\4\7\14\0"+
    "\1\7\4\0\1\7\1\225\1\7\1\240\4\7\1\210"+
    "\6\7\1\221\5\7\1\210\4\7\1\0\4\7\14\0"+
    "\1\7\4\0\3\7\1\221\13\7\1\221\12\7\1\0"+
    "\4\7\14\0\1\7\4\0\2\7\2\152\25\7\1\152"+
    "\1\0\4\7\14\0\1\7\4\0\1\7\1\241\1\7"+
    "\1\241\26\7\1\0\4\7\14\0\1\7\4\0\1\7"+
    "\1\200\1\7\1\200\26\7\1\0\4\7\14\0\1\7"+
    "\4\0\1\7\1\222\1\7\1\222\26\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\242\13\7\1\242\12\7"+
    "\1\0\4\7\14\0\1\7\4\0\3\7\1\243\2\7"+
    "\1\175\4\7\1\216\7\7\1\207\6\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\175\2\7\1\175\23\7"+
    "\1\0\4\7\14\0\1\7\4\0\3\7\1\207\17\7"+
    "\1\207\6\7\1\0\4\7\14\0\1\7\4\0\3\7"+
    "\1\216\7\7\1\216\16\7\1\0\4\7\14\0\1\7"+
    "\4\0\3\7\1\244\3\7\1\176\3\7\1\206\13\7"+
    "\1\176\2\7\1\0\1\7\1\172\2\7\14\0\1\7"+
    "\4\0\3\7\1\176\3\7\1\176\17\7\1\176\2\7"+
    "\1\0\4\7\14\0\1\7\4\0\3\7\1\206\7\7"+
    "\1\206\16\7\1\0\4\7\14\0\1\7\4\0\3\7"+
    "\1\172\26\7\1\0\1\7\1\172\2\7\14\0\1\7"+
    "\4\0\3\7\1\212\4\7\1\245\14\7\1\212\4\7"+
    "\1\0\4\7\14\0\1\7\4\0\3\7\1\246\2\7"+
    "\1\246\23\7\1\0\4\7\14\0\1\7\4\0\3\7"+
    "\1\247\12\7\1\247\11\7\1\247\1\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\250\17\7\1\250\6\7"+
    "\1\0\4\7\14\0\1\7\4\0\3\7\1\251\5\7"+
    "\1\252\11\7\1\250\6\7\1\0\4\7\14\0\1\7"+
    "\4\0\3\7\1\252\5\7\1\252\20\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\253\12\7\1\253\11\7"+
    "\1\253\1\7\1\0\4\7\14\0\1\7\4\0\3\7"+
    "\1\254\3\7\1\255\3\7\1\256\7\7\1\250\3\7"+
    "\1\255\2\7\1\0\4\7\14\0\1\7\4\0\1\7"+
    "\1\257\1\7\1\260\1\261\2\7\1\262\1\263\1\264"+
    "\1\7\1\265\1\266\1\7\1\267\1\270\1\7\1\271"+
    "\1\7\1\250\1\7\1\263\1\7\1\262\1\267\1\7"+
    "\1\0\4\7\14\0\1\7\4\0\3\7\1\272\1\261"+
    "\6\7\1\273\16\7\1\0\4\7\14\0\1\7\4\0"+
    "\1\7\1\274\1\7\1\275\5\7\1\276\20\7\1\0"+
    "\4\7\14\0\1\7\4\0\1\7\1\277\1\7\1\300"+
    "\5\7\1\301\4\7\1\247\11\7\1\247\1\7\1\0"+
    "\4\7\14\0\1\7\4\0\3\7\1\302\3\7\1\303"+
    "\6\7\1\304\10\7\1\303\1\304\1\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\305\12\7\1\305\11\7"+
    "\1\305\1\7\1\0\4\7\14\0\1\7\4\0\3\7"+
    "\1\306\7\7\1\306\16\7\1\0\4\7\14\0\1\7"+
    "\4\0\3\7\1\307\4\7\1\310\2\7\1\311\11\7"+
    "\1\310\4\7\1\0\4\7\14\0\1\7\4\0\3\7"+
    "\1\312\1\313\16\7\1\312\6\7\1\0\4\7\14\0"+
    "\1\7\4\0\3\7\1\270\13\7\1\270\12\7\1\0"+
    "\4\7\14\0\1\7\4\0\3\7\1\314\4\7\1\315"+
    "\3\7\1\266\10\7\1\315\4\7\1\0\4\7\14\0"+
    "\1\7\4\0\3\7\1\316\3\7\1\316\17\7\1\316"+
    "\2\7\1\0\4\7\14\0\1\7\4\0\3\7\1\271"+
    "\15\7\1\271\10\7\1\0\4\7\14\0\1\7\4\0"+
    "\3\7\1\317\1\261\3\7\1\315\1\252\1\7\1\273"+
    "\11\7\1\315\4\7\1\0\4\7\14\0\1\7\4\0"+
    "\3\7\1\315\4\7\1\315\14\7\1\315\4\7\1\0"+
    "\4\7\14\0\1\7\4\0\3\7\1\320\3\7\1\320"+
    "\17\7\1\320\2\7\1\0\4\7\14\0\1\7\4\0"+
    "\3\7\1\321\3\7\1\320\6\7\1\305\10\7\1\320"+
    "\1\305\1\7\1\0\4\7\14\0\1\7\4\0\1\7"+
    "\1\274\1\7\1\322\1\313\4\7\1\276\20\7\1\0"+
    "\4\7\14\0\1\7\4\0\3\7\2\313\25\7\1\0"+
    "\4\7\14\0\1\7\4\0\3\7\1\323\7\7\1\324"+
    "\1\266\15\7\1\0\4\7\14\0\1\7\4\0\3\7"+
    "\1\311\7\7\1\311\16\7\1\0\4\7\14\0\1\7"+
    "\4\0\3\7\1\266\10\7\1\266\15\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\304\12\7\1\304\11\7"+
    "\1\304\1\7\1\0\4\7\14\0\1\7\4\0\3\7"+
    "\1\325\3\7\1\303\11\7\1\271\5\7\1\303\2\7"+
    "\1\0\4\7\14\0\1\7\4\0\3\7\1\303\3\7"+
    "\1\303\17\7\1\303\2\7\1\0\4\7\14\0\1\7"+
    "\4\0\3\7\1\326\3\7\1\316\1\7\1\301\5\7"+
    "\1\270\7\7\1\316\2\7\1\0\4\7\14\0\1\7"+
    "\4\0\3\7\1\301\5\7\1\301\20\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\327\4\7\1\310\12\7"+
    "\1\250\1\7\1\310\4\7\1\0\4\7\14\0\1\7"+
    "\4\0\3\7\1\310\4\7\1\310\14\7\1\310\4\7"+
    "\1\0\4\7\14\0\1\7\4\0\1\7\1\277\1\7"+
    "\1\330\12\7\1\247\11\7\1\247\1\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\256\7\7\1\256\16\7"+
    "\1\0\4\7\14\0\1\7\4\0\3\7\1\331\7\7"+
    "\1\256\7\7\1\312\6\7\1\0\4\7\14\0\1\7"+
    "\4\0\3\7\1\312\17\7\1\312\6\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\332\3\7\1\332\17\7"+
    "\1\332\2\7\1\0\4\7\14\0\1\7\4\0\3\7"+
    "\1\333\5\7\1\301\5\7\1\270\12\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\305\12\7\1\305\4\7"+
    "\1\312\4\7\1\305\1\7\1\0\4\7\14\0\1\7"+
    "\4\0\1\7\1\274\1\7\1\334\1\313\2\7\1\303"+
    "\1\7\1\276\15\7\1\303\2\7\1\0\4\7\14\0"+
    "\1\7\4\0\1\7\1\277\1\7\1\277\26\7\1\0"+
    "\4\7\14\0\1\7\4\0\3\7\1\335\7\7\1\273"+
    "\5\7\1\271\10\7\1\0\4\7\14\0\1\7\4\0"+
    "\3\7\1\273\7\7\1\273\16\7\1\0\4\7\14\0"+
    "\1\7\4\0\3\7\2\261\11\7\1\253\11\7\1\253"+
    "\1\7\1\0\4\7\14\0\1\7\4\0\3\7\2\261"+
    "\25\7\1\0\4\7\14\0\1\7\4\0\3\7\1\304"+
    "\3\7\1\332\6\7\1\304\10\7\1\332\1\304\1\7"+
    "\1\0\4\7\14\0\1\7\4\0\3\7\1\336\3\7"+
    "\1\320\3\7\1\256\13\7\1\320\2\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\337\4\7\1\310\3\7"+
    "\1\266\10\7\1\310\4\7\1\0\4\7\14\0\1\7"+
    "\4\0\3\7\1\316\3\7\1\316\3\7\1\311\13\7"+
    "\1\316\2\7\1\0\4\7\14\0\1\7\4\0\3\7"+
    "\1\303\3\7\1\303\17\7\1\340\2\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\341\20\7\1\341\5\7"+
    "\1\0\4\7\14\0\1\7\4\0\3\7\1\342\7\7"+
    "\1\342\16\7\1\0\4\7\14\0\1\7\4\0\3\7"+
    "\1\343\12\7\1\343\11\7\1\343\1\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\344\12\7\1\344\11\7"+
    "\1\344\1\7\1\0\4\7\14\0\1\7\4\0\3\7"+
    "\1\345\12\7\1\345\11\7\1\345\1\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\346\7\7\1\347\7\7"+
    "\1\350\6\7\1\0\4\7\14\0\1\7\4\0\1\7"+
    "\1\351\1\7\1\352\1\7\1\353\1\354\1\355\3\7"+
    "\1\356\1\357\1\7\1\360\4\7\1\350\1\341\2\7"+
    "\1\355\1\360\1\7\1\0\4\7\14\0\1\7\4\0"+
    "\3\7\1\361\12\7\1\361\11\7\1\361\1\7\1\0"+
    "\4\7\14\0\1\7\4\0\3\7\1\362\1\7\1\353"+
    "\10\7\1\363\11\7\1\363\1\7\1\0\4\7\14\0"+
    "\1\7\4\0\3\7\1\364\2\7\1\354\4\7\1\342"+
    "\1\357\15\7\1\0\4\7\14\0\1\7\4\0\1\7"+
    "\1\365\1\7\1\366\12\7\1\367\11\7\1\367\1\7"+
    "\1\0\4\7\14\0\1\7\4\0\3\7\1\355\3\7"+
    "\1\355\17\7\1\355\2\7\1\0\4\7\14\0\1\7"+
    "\4\0\1\7\1\370\1\7\1\371\20\7\1\341\5\7"+
    "\1\0\4\7\14\0\1\7\4\0\3\7\1\372\7\7"+
    "\1\372\16\7\1\0\4\7\14\0\1\7\4\0\3\7"+
    "\1\373\12\7\1\373\11\7\1\373\1\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\350\17\7\1\350\6\7"+
    "\1\0\4\7\14\0\1\7\4\0\3\7\1\374\10\7"+
    "\1\357\6\7\1\350\6\7\1\0\4\7\14\0\1\7"+
    "\4\0\3\7\1\357\10\7\1\357\15\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\347\7\7\1\347\16\7"+
    "\1\0\4\7\14\0\1\7\4\0\3\7\1\375\2\7"+
    "\1\354\4\7\1\347\10\7\1\341\5\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\354\2\7\1\354\23\7"+
    "\1\0\4\7\14\0\1\7\4\0\1\7\1\370\1\7"+
    "\1\376\12\7\1\377\11\7\1\377\1\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\377\12\7\1\377\11\7"+
    "\1\377\1\7\1\0\4\7\14\0\1\7\4\0\1\7"+
    "\1\370\1\7\1\370\26\7\1\0\4\7\14\0\1\7"+
    "\4\0\1\7\1\365\1\7\1\365\26\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\363\12\7\1\363\11\7"+
    "\1\363\1\7\1\0\4\7\14\0\1\7\4\0\3\7"+
    "\1\u0100\1\7\1\353\1\7\1\355\17\7\1\355\2\7"+
    "\1\0\4\7\14\0\1\7\4\0\3\7\1\353\1\7"+
    "\1\353\24\7\1\0\4\7\14\0\1\7\4\0\3\7"+
    "\1\u0101\1\7\1\353\5\7\1\342\2\7\1\373\11\7"+
    "\1\373\1\7\1\0\4\7\14\0\1\7\4\0\1\7"+
    "\1\365\1\7\1\u0102\3\7\1\355\17\7\1\355\2\7"+
    "\1\0\4\7\14\0\1\7\4\0\3\7\1\u0103\7\7"+
    "\1\372\2\7\1\377\11\7\1\377\1\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\u0104\7\7\1\347\10\7"+
    "\1\341\5\7\1\0\4\7\14\0\1\7\4\0\3\7"+
    "\1\u0105\10\7\1\357\1\7\1\377\4\7\1\350\4\7"+
    "\1\377\1\7\1\0\4\7\14\0\1\7\4\0\3\7"+
    "\1\u0106\7\7\1\372\2\7\1\373\11\7\1\373\1\7"+
    "\1\0\4\7\14\0\1\7\4\0\3\7\1\u0107\3\7"+
    "\1\355\6\7\1\363\10\7\1\355\1\363\1\7\1\0"+
    "\4\7\14\0\1\7\4\0\3\7\1\377\12\7\1\377"+
    "\11\7\1\u0108\1\7\1\0\4\7\14\0\1\7\4\0"+
    "\3\7\1\u0109\12\7\1\u0109\11\7\1\u0109\1\7\1\0"+
    "\4\7\14\0\1\7\4\0\3\7\1\u010a\12\7\1\u010a"+
    "\11\7\1\u010a\1\7\1\0\4\7\14\0\1\7\4\0"+
    "\3\7\1\u010b\7\7\1\u010b\16\7\1\0\4\7\14\0"+
    "\1\7\4\0\3\7\1\u010c\20\7\1\u010c\5\7\1\0"+
    "\4\7\14\0\1\7\4\0\3\7\1\u010d\10\7\1\u010e"+
    "\5\7\1\u010d\7\7\1\0\4\7\14\0\1\7\4\0"+
    "\1\7\1\u010f\1\u0110\1\u0111\3\7\1\u0112\3\7\1\u0113"+
    "\1\u010e\1\7\1\u0114\2\7\1\u0115\1\u010d\1\u0116\1\u010c"+
    "\2\7\1\u0112\1\u0114\1\u0110\1\0\4\7\14\0\1\7"+
    "\4\0\3\7\1\u0117\7\7\1\u0117\16\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\u0116\17\7\1\u0116\6\7"+
    "\1\0\4\7\14\0\1\7\4\0\1\7\1\u010f\1\7"+
    "\1\u010f\26\7\1\0\4\7\14\0\1\7\4\0\3\7"+
    "\1\u0112\3\7\1\u0112\17\7\1\u0112\2\7\1\0\4\7"+
    "\14\0\1\7\4\0\2\7\1\u0110\1\u0118\7\7\1\u010b"+
    "\5\7\1\u0115\7\7\1\u0110\1\0\4\7\14\0\1\7"+
    "\4\0\2\7\1\u0110\1\u0119\7\7\1\u010b\15\7\1\u0110"+
    "\1\0\4\7\14\0\1\7\4\0\3\7\1\u011a\3\7"+
    "\1\u0112\6\7\1\u010a\4\7\1\u0116\3\7\1\u0112\1\u010a"+
    "\1\7\1\0\4\7\14\0\1\7\4\0\3\7\1\u010e"+
    "\10\7\1\u010e\15\7\1\0\4\7\14\0\1\7\4\0"+
    "\3\7\1\u011b\10\7\1\u010e\4\7\1\u0115\10\7\1\0"+
    "\4\7\14\0\1\7\4\0\3\7\1\u0115\15\7\1\u0115"+
    "\10\7\1\0\4\7\14\0\1\7\4\0\3\7\1\u010d"+
    "\16\7\1\u010d\7\7\1\0\4\7\14\0\1\7\4\0"+
    "\3\7\1\u011c\12\7\1\u0109\3\7\1\u010d\5\7\1\u0109"+
    "\1\7\1\0\4\7\14\0\1\7\4\0\3\7\1\u011d"+
    "\3\7\1\u0112\14\7\1\u010c\2\7\1\u0112\2\7\1\0"+
    "\4\7\14\0\1\7\4\0\3\7\1\u011e\12\7\1\u0109"+
    "\4\7\1\u0116\4\7\1\u0109\1\7\1\0\4\7\14\0"+
    "\1\7\4\0\2\7\1\u0110\1\u010d\16\7\1\u010d\6\7"+
    "\1\u0110\1\0\4\7\14\0\1\7\4\0\2\7\2\u0110"+
    "\25\7\1\u0110\1\0\4\7\14\0\1\7\4\0\1\7"+
    "\1\u010f\1\7\1\u011f\7\7\1\u0117\16\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\u0120\7\7\1\u0117\2\7"+
    "\1\u010a\2\7\1\u0115\6\7\1\u010a\1\7\1\0\4\7"+
    "\14\0\1\7\4\0\1\7\1\u010f\1\7\1\u0121\10\7"+
    "\1\u010e\15\7\1\0\4\7\14\0\1\7\4\0\2\7"+
    "\1\u0110\1\u011d\3\7\1\u0112\14\7\1\u010c\2\7\1\u0112"+
    "\1\7\1\u0110\1\0\4\7\14\0\1\7\4\0\2\7"+
    "\2\u0110\25\7\1\u0122\1\0\4\7\14\0\1\7\4\0"+
    "\3\7\1\u0123\2\7\1\u0123\23\7\1\0\4\7\14\0"+
    "\1\7\4\0\1\7\1\u0124\1\7\1\u0124\26\7\1\0"+
    "\4\7\14\0\1\7\4\0\3\7\1\u0125\1\7\1\u0125"+
    "\24\7\1\0\4\7\14\0\1\7\4\0\1\7\1\u0124"+
    "\1\7\1\u0126\1\7\1\u0125\1\u0123\2\7\1\u0127\4\7"+
    "\1\u0128\4\7\1\u0129\4\7\1\u0128\1\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\u0127\5\7\1\u0127\20\7"+
    "\1\0\4\7\14\0\1\7\4\0\1\7\1\u0124\1\7"+
    "\1\u012a\12\7\1\u0128\11\7\1\u0128\1\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\u0129\17\7\1\u0129\6\7"+
    "\1\0\4\7\14\0\1\7\4\0\3\7\1\u0128\12\7"+
    "\1\u0128\11\7\1\u0128\1\7\1\0\4\7\14\0\1\7"+
    "\4\0\1\7\1\u0124\1\7\1\u012b\17\7\1\u0129\6\7"+
    "\1\0\4\7\14\0\1\7\4\0\3\7\1\u012c\1\7"+
    "\1\u0125\10\7\1\u0128\11\7\1\u0128\1\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\u0129\12\7\1\u0128\4\7"+
    "\1\u0129\4\7\1\u0128\1\7\1\0\4\7\14\0\1\7"+
    "\4\0\32\7\1\u012d\4\7\14\0\1\7\4\0\3\7"+
    "\1\u012e\17\7\1\u012e\6\7\1\0\4\7\14\0\1\7"+
    "\4\0\3\7\1\u012f\17\7\1\u012f\6\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\u0130\2\7\1\u0131\14\7"+
    "\1\u0132\6\7\1\0\4\7\14\0\1\7\4\0\3\7"+
    "\1\u0131\2\7\1\u0131\23\7\1\0\4\7\24\0\1\u0133"+
    "\4\0\1\u0133\14\0\1\u0133\25\0\1\7\4\0\3\7"+
    "\1\u0134\12\7\1\u0134\11\7\1\u0134\1\7\1\0\4\7"+
    "\14\0\1\7\4\0\3\7\1\u0135\12\7\1\u0135\11\7"+
    "\1\u0135\1\7\1\0\4\7\24\0\1\u0136\11\0\1\u0136"+
    "\10\0\1\u0136\34\0\1\u0137\4\0\1\u0137\14\0\1\u0137"+
    "\35\0\1\u0138\3\0\1\u0138\17\0\1\u0138\33\0\1\u0139"+
    "\12\0\1\u0139\11\0\1\u0139\31\0\2\u013a\25\0\1\u013a"+
    "\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10560];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\30\1\1\11\1\1\7\11\2\1\2\11"+
    "\1\0\72\1\2\11\310\1\1\0\5\1\1\0\2\1"+
    "\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[314];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  lexercup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  lexercup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 27: 
          { return new Symbol(sym.tk_dim, yychar, yyline, yytext());
          }
        case 62: break;
        case 32: 
          { return new Symbol(sym.tk_and, yychar, yyline, yytext());
          }
        case 63: break;
        case 37: 
          { return new Symbol(sym.tk_true, yychar, yyline, yytext());
          }
        case 64: break;
        case 2: 
          { return new Symbol(sym.tk_Numero, yychar, yyline, yytext());
          }
        case 65: break;
        case 14: 
          { return new Symbol(sym.tk_mayorque, yychar, yyline, yytext());
          }
        case 66: break;
        case 60: 
          { return new Symbol(sym.tk_writeline, yychar, yyline, yytext());
          }
        case 67: break;
        case 10: 
          { return new Symbol(sym.tk_Division, yychar, yyline, yytext());
          }
        case 68: break;
        case 46: 
          { return new Symbol(sym.tk_write, yychar, yyline, yytext());
          }
        case 69: break;
        case 41: 
          { return new Symbol(sym.tk_read, yychar, yyline, yytext());
          }
        case 70: break;
        case 42: 
          { return new Symbol(sym.tk_else, yychar, yyline, yytext());
          }
        case 71: break;
        case 7: 
          { return new Symbol(sym.tk_Suma, yychar, yyline, yytext());
          }
        case 72: break;
        case 43: 
          { return new Symbol(sym.tk_then, yychar, yyline, yytext());
          }
        case 73: break;
        case 55: 
          { return new Symbol(sym.tk_return, yychar, yyline, yytext());
          }
        case 74: break;
        case 6: 
          { return new Symbol(sym.tk_Igual, yychar, yyline, yytext());
          }
        case 75: break;
        case 48: 
          { return new Symbol(sym.tk_byval, yychar, yyline, yytext());
          }
        case 76: break;
        case 21: 
          { return new Symbol(sym.tk_or, yychar, yyline, yytext());
          }
        case 77: break;
        case 11: 
          { return new Symbol(sym.tk_Coma, yychar, yyline, yytext());
          }
        case 78: break;
        case 35: 
          { return new Symbol(sym.tk_like, yychar, yyline, yytext());
          }
        case 79: break;
        case 54: 
          { return new Symbol(sym.tk_sys, yychar, yyline, yytext());
          }
        case 80: break;
        case 12: 
          { return new Symbol(sym.tk_ampersant, yychar, yyline, yytext());
          }
        case 81: break;
        case 33: 
          { return new Symbol(sym.tk_xor, yychar, yyline, yytext());
          }
        case 82: break;
        case 31: 
          { return new Symbol(sym.tk_end, yychar, yyline, yytext());
          }
        case 83: break;
        case 30: 
          { return new Symbol(sym.tk_sub, yychar, yyline, yytext());
          }
        case 84: break;
        case 58: 
          { return new Symbol(sym.tk_boolean, yychar, yyline, yytext());
          }
        case 85: break;
        case 47: 
          { return new Symbol(sym.tk_until, yychar, yyline, yytext());
          }
        case 86: break;
        case 16: 
          { return new Symbol(sym.tk_ParentesisA, yychar, yyline, yytext());
          }
        case 87: break;
        case 24: 
          { return new Symbol(sym.tk_menorigual, yychar, yyline, yytext());
          }
        case 88: break;
        case 51: 
          { return new Symbol(sym.tk_String, yychar, yyline, yytext());
          }
        case 89: break;
        case 49: 
          { return new Symbol(sym.tk_false, yychar, yyline, yytext());
          }
        case 90: break;
        case 59: 
          { return new Symbol(sym.tk_function, yychar, yyline, yytext());
          }
        case 91: break;
        case 25: 
          { return new Symbol(sym.tk_valorString, yychar, yyline, yytext());
          }
        case 92: break;
        case 50: 
          { return new Symbol(sym.tk_module, yychar, yyline, yytext());
          }
        case 93: break;
        case 57: 
          { return new Symbol(sym.tk_cs, yychar, yyline, yytext());
          }
        case 94: break;
        case 45: 
          { return new Symbol(sym.tk_while, yychar, yyline, yytext());
          }
        case 95: break;
        case 13: 
          { return new Symbol(sym.tk_punto, yychar, yyline, yytext());
          }
        case 96: break;
        case 40: 
          { return new Symbol(sym.tk_null, yychar, yyline, yytext());
          }
        case 97: break;
        case 9: 
          { return new Symbol(sym.tk_Multiplicacion, yychar, yyline, yytext());
          }
        case 98: break;
        case 5: 
          { return new Symbol(sym.tk_Identificador, yychar, yyline, yytext());
          }
        case 99: break;
        case 15: 
          { return new Symbol(sym.tk_menorque, yychar, yyline, yytext());
          }
        case 100: break;
        case 53: 
          { return new Symbol(sym.tk_public, yychar, yyline, yytext());
          }
        case 101: break;
        case 36: 
          { return new Symbol(sym.tk_exit, yychar, yyline, yytext());
          }
        case 102: break;
        case 22: 
          { return new Symbol(sym.tk_to, yychar, yyline, yytext());
          }
        case 103: break;
        case 20: 
          { return new Symbol(sym.tk_do, yychar, yyline, yytext());
          }
        case 104: break;
        case 8: 
          { return new Symbol(sym.tk_Resta, yychar, yyline, yytext());
          }
        case 105: break;
        case 34: 
          { return new Symbol(sym.tk_main, yychar, yyline, yytext());
          }
        case 106: break;
        case 19: 
          { return new Symbol(sym.tk_as, yychar, yyline, yytext());
          }
        case 107: break;
        case 17: 
          { return new Symbol(sym.tk_ParentesisC, yychar, yyline, yytext());
          }
        case 108: break;
        case 28: 
          { return new Symbol(sym.tk_for, yychar, yyline, yytext());
          }
        case 109: break;
        case 38: 
          { return new Symbol(sym.tk_loop, yychar, yyline, yytext());
          }
        case 110: break;
        case 23: 
          { return new Symbol(sym.tk_mayorigual, yychar, yyline, yytext());
          }
        case 111: break;
        case 61: 
          { return new Symbol(sym.tk_structure, yychar, yyline, yytext());
          }
        case 112: break;
        case 29: 
          { return new Symbol(sym.tk_not, yychar, yyline, yytext());
          }
        case 113: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 114: break;
        case 52: 
          { return new Symbol(sym.tk_elseif, yychar, yyline, yytext());
          }
        case 115: break;
        case 44: 
          { return new Symbol(sym.tk_step, yychar, yyline, yytext());
          }
        case 116: break;
        case 4: 
          { return new Symbol(sym.tk_Linea, yychar, yyline, yytext());
          }
        case 117: break;
        case 56: 
          { return new Symbol(sym.tk_integer, yychar, yyline, yytext());
          }
        case 118: break;
        case 39: 
          { return new Symbol(sym.tk_next, yychar, yyline, yytext());
          }
        case 119: break;
        case 26: 
          { return new Symbol(sym.tk_mod, yychar, yyline, yytext());
          }
        case 120: break;
        case 18: 
          { return new Symbol(sym.tk_if, yychar, yyline, yytext());
          }
        case 121: break;
        case 3: 
          { 
          }
        case 122: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
