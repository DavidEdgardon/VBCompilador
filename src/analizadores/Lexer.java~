/* The following code was generated by JFlex 1.4.3 on 03-01-21 11:27 PM */

package analizadores;
import static analizadores.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 03-01-21 11:27 PM from the specification file
 * <tt>C:/Users/David/Documents/NetBeansProjects/VBCompilador/src/analizadores/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\4\1\0\1\2\23\0\1\2\1\0\1\3\3\0"+
    "\1\63\1\5\1\67\1\70\1\60\1\56\1\62\1\57\1\64\1\61"+
    "\12\1\2\0\1\66\1\41\1\65\2\0\1\30\1\45\1\23\1\26"+
    "\1\25\1\32\1\34\1\42\1\10\1\6\1\44\1\22\1\11\1\33"+
    "\1\14\1\13\1\6\1\15\1\17\1\16\1\20\1\46\1\27\1\43"+
    "\1\24\1\6\4\0\1\6\1\0\1\47\1\21\1\52\1\26\1\37"+
    "\1\55\1\34\1\42\1\51\1\6\1\44\1\50\1\40\1\33\1\54"+
    "\1\13\1\6\1\53\1\7\1\36\1\31\1\6\1\27\1\43\1\35"+
    "\1\6\1\0\1\12\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\3\24\5\1\6\2\5\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\0"+
    "\1\22\4\5\2\23\3\5\1\24\1\5\1\24\1\25"+
    "\1\26\10\5\1\26\1\5\2\27\16\5\2\25\3\5"+
    "\1\24\13\5\1\30\1\31\1\32\6\5\1\33\1\5"+
    "\2\34\3\5\1\34\1\5\1\35\1\36\1\5\1\37"+
    "\2\5\1\40\3\5\2\35\1\36\3\5\1\37\6\5"+
    "\1\40\1\5\1\40\6\5\2\37\5\5\1\40\1\5"+
    "\1\41\1\37\1\35\1\36\1\42\13\5\1\43\2\44"+
    "\2\45\3\5\1\46\1\47\1\50\1\5\1\51\1\5"+
    "\1\46\1\52\1\53\1\47\4\5\1\46\2\5\2\51"+
    "\2\5\1\50\1\47\1\5\1\46\2\51\1\50\1\5"+
    "\1\53\1\45\1\52\20\5\1\54\1\55\1\54\1\56"+
    "\1\5\1\56\2\57\1\5\1\56\2\5\1\57\1\56"+
    "\1\55\3\5\2\54\2\5\1\57\3\5\1\57\1\5"+
    "\1\56\1\60\1\61\1\62\1\63\3\5\1\64\1\5"+
    "\1\65\2\5\1\66\1\5\1\62\1\63\1\5\1\64"+
    "\1\5\2\67\2\61\1\66\1\65\1\67\1\5\1\64"+
    "\1\66\1\61\1\70\1\71\2\5\1\72\1\5\1\71"+
    "\1\73\1\72\1\73\1\72\1\0\2\5\2\74\1\0"+
    "\1\5\1\75\2\0\1\5\2\0\1\5\2\0\1\5"+
    "\2\0\1\5\1\62\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\2\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[340];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\71\0\253\0\71\0\344\0\u011d"+
    "\0\u0156\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5"+
    "\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad"+
    "\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\71\0\u0603\0\u063c"+
    "\0\71\0\71\0\71\0\71\0\71\0\71\0\71\0\u0675"+
    "\0\u06ae\0\71\0\71\0\u06e7\0\344\0\u0720\0\u0759\0\u0792"+
    "\0\u07cb\0\u0804\0\u011d\0\u083d\0\u0876\0\u08af\0\u011d\0\u08e8"+
    "\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0"+
    "\0\u0ae9\0\u0b22\0\u0b5b\0\u011d\0\u0b94\0\u0bcd\0\u011d\0\u0c06"+
    "\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce"+
    "\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0eeb\0\u011d\0\u0f24"+
    "\0\u0f5d\0\u0f96\0\u0fcf\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3"+
    "\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\71\0\71"+
    "\0\u06e7\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398"+
    "\0\u13d1\0\u011d\0\u140a\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee"+
    "\0\u12b4\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1398\0\u1644"+
    "\0\u167d\0\u16b6\0\u16ef\0\u011d\0\u011d\0\u1728\0\u1761\0\u179a"+
    "\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962"+
    "\0\u1962\0\u011d\0\u199b\0\u19d4\0\u1a0d\0\u1599\0\u1a46\0\u1a7f"+
    "\0\u127b\0\u011d\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5"+
    "\0\u1c0e\0\u011d\0\u1af1\0\u1c47\0\u1c80\0\u011d\0\u1cb9\0\u1cf2"+
    "\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba"+
    "\0\u1ef3\0\u011d\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049"+
    "\0\u2082\0\u20bb\0\u011d\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8"+
    "\0\u011d\0\u011d\0\u2211\0\u2211\0\u224a\0\u2283\0\u22bc\0\u011d"+
    "\0\u22f5\0\u232e\0\u232e\0\u011d\0\u2367\0\u23a0\0\u011d\0\u23d9"+
    "\0\u1fd7\0\u1fd7\0\u2412\0\u22f5\0\u22bc\0\u244b\0\u2010\0\u011d"+
    "\0\u22bc\0\u2484\0\u1f9e\0\u24bd\0\u24f6\0\u252f\0\u2568\0\u25a1"+
    "\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be\0\u26f7\0\u2730\0\u2769"+
    "\0\u27a2\0\u27db\0\u27db\0\u011d\0\u2814\0\u2814\0\u011d\0\u2568"+
    "\0\u011d\0\u284d\0\u2886\0\u28bf\0\u28f8\0\u26f7\0\u2931\0\u296a"+
    "\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0\0\u2a87\0\u2af9"+
    "\0\u2b32\0\u2b6b\0\u2ba4\0\u26be\0\u2bdd\0\u28f8\0\u011d\0\u011d"+
    "\0\u011d\0\u011d\0\u2c16\0\u2c4f\0\u2c88\0\u011d\0\u2cc1\0\u011d"+
    "\0\u2cfa\0\u2d33\0\u011d\0\u2d6c\0\u2da5\0\u2c16\0\u2dde\0\u2c88"+
    "\0\u2e17\0\u011d\0\u2c16\0\u2e50\0\u2cfa\0\u2e17\0\u2c88\0\u2c88"+
    "\0\u2e89\0\u2ec2\0\u2d6c\0\u2efb\0\u011d\0\u011d\0\u2f34\0\u2f6d"+
    "\0\u011d\0\u2fa6\0\u2fdf\0\u011d\0\u2f6d\0\u2f6d\0\u2fa6\0\u3018"+
    "\0\u3051\0\u308a\0\u011d\0\u308a\0\u30c3\0\u30fc\0\u011d\0\u3135"+
    "\0\u316e\0\u31a7\0\u31e0\0\u3219\0\u3252\0\u328b\0\u32c4\0\u32fd"+
    "\0\u3336\0\u336f\0\u33a8\0\71\0\u33e1\0\u341a\0\u3453\0\u348c"+
    "\0\u34c5\0\u34fe\0\u3537\0\u3570\0\u35a9\0\u35e2\0\u361b\0\u3654"+
    "\0\u368d\0\u36c6\0\71\0\u011d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[340];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\10\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\2\10\1\20\1\26\1\35"+
    "\1\36\1\10\1\37\1\10\1\40\1\10\1\31\1\24"+
    "\1\12\1\25\1\17\1\16\1\33\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\72\0\1\3\67\0\4\54\1\0\64\54\4\55\1\0"+
    "\64\55\1\0\1\10\4\0\33\10\1\0\14\10\14\0"+
    "\1\10\4\0\4\10\1\56\3\10\1\57\5\10\1\60"+
    "\10\10\1\60\1\57\2\10\1\0\14\10\14\0\1\10"+
    "\4\0\3\10\1\61\1\62\17\10\1\63\1\64\4\10"+
    "\1\61\1\0\13\10\1\63\14\0\1\10\4\0\4\10"+
    "\1\65\1\10\1\65\24\10\1\0\7\10\1\66\2\10"+
    "\1\65\1\10\14\0\1\10\4\0\1\10\1\67\1\70"+
    "\1\61\1\71\1\10\1\72\1\73\1\57\1\67\1\74"+
    "\1\10\1\75\1\10\1\60\1\76\2\10\1\77\1\74"+
    "\1\63\1\100\1\10\1\60\1\57\1\76\1\61\1\0"+
    "\1\101\1\102\3\10\1\77\1\75\1\70\1\10\1\73"+
    "\1\72\1\63\14\0\1\10\4\0\4\10\1\103\5\10"+
    "\1\103\10\10\1\103\7\10\1\0\14\10\14\0\1\10"+
    "\4\0\4\10\1\104\2\10\1\104\23\10\1\0\11\10"+
    "\1\104\2\10\14\0\1\10\4\0\4\10\1\105\12\10"+
    "\1\105\11\10\1\105\1\10\1\0\14\10\14\0\1\10"+
    "\4\0\4\10\1\106\1\10\1\107\1\110\23\10\1\0"+
    "\1\111\10\10\1\110\1\107\1\10\14\0\1\10\4\0"+
    "\4\10\1\112\3\10\1\57\1\10\1\113\3\10\1\60"+
    "\4\10\1\113\3\10\1\114\1\57\2\10\1\0\14\10"+
    "\14\0\1\10\4\0\4\10\1\115\20\10\1\115\5\10"+
    "\1\0\14\10\14\0\1\10\4\0\4\10\1\116\1\10"+
    "\1\116\24\10\1\0\12\10\1\116\1\10\14\0\1\10"+
    "\4\0\2\10\1\117\1\10\1\120\1\10\1\121\24\10"+
    "\1\0\7\10\1\117\2\10\1\121\1\10\14\0\1\10"+
    "\4\0\4\10\1\122\1\10\1\122\24\10\1\0\12\10"+
    "\1\122\1\10\14\0\1\10\4\0\4\10\1\123\7\10"+
    "\1\75\10\10\1\124\5\10\1\0\1\10\1\102\4\10"+
    "\1\75\5\10\14\0\1\10\4\0\2\10\1\125\1\10"+
    "\1\126\1\10\1\127\24\10\1\0\7\10\1\125\2\10"+
    "\1\127\1\10\14\0\1\10\4\0\4\10\1\130\2\10"+
    "\1\131\23\10\1\0\1\132\10\10\1\131\2\10\14\0"+
    "\1\10\4\0\1\10\1\67\2\10\1\133\4\10\1\67"+
    "\13\10\1\134\5\10\1\0\14\10\14\0\1\10\4\0"+
    "\4\10\1\135\5\10\1\113\10\10\1\113\1\10\1\115"+
    "\5\10\1\0\14\10\14\0\1\10\4\0\4\10\1\136"+
    "\1\10\1\137\3\10\1\140\7\10\1\77\1\140\7\10"+
    "\1\0\5\10\1\77\4\10\1\137\1\10\14\0\1\10"+
    "\4\0\4\10\1\141\1\10\1\142\3\10\1\143\4\10"+
    "\1\144\3\10\1\143\5\10\1\144\1\10\1\0\12\10"+
    "\1\142\1\10\14\0\1\10\4\0\4\10\1\65\1\10"+
    "\1\65\24\10\1\0\12\10\1\65\1\10\14\0\1\10"+
    "\4\0\4\10\1\145\1\10\1\145\24\10\1\0\12\10"+
    "\1\145\1\10\14\0\1\10\4\0\4\10\1\116\1\10"+
    "\1\116\20\10\1\146\3\10\1\0\12\10\1\116\1\10"+
    "\54\0\1\147\70\0\1\150\27\0\3\54\1\151\1\0"+
    "\64\54\1\0\1\10\4\0\1\10\1\152\2\10\1\153"+
    "\2\10\1\154\1\10\1\152\21\10\1\0\11\10\1\154"+
    "\2\10\14\0\1\10\4\0\4\10\1\154\2\10\1\154"+
    "\23\10\1\0\11\10\1\154\2\10\14\0\1\10\4\0"+
    "\1\10\1\152\2\10\1\152\4\10\1\152\21\10\1\0"+
    "\14\10\14\0\1\10\4\0\4\10\2\155\25\10\1\0"+
    "\14\10\14\0\1\10\4\0\4\10\1\156\1\155\2\10"+
    "\1\157\17\10\1\157\2\10\1\0\14\10\14\0\1\10"+
    "\4\0\4\10\1\157\3\10\1\157\17\10\1\157\2\10"+
    "\1\0\14\10\14\0\1\10\4\0\4\10\1\160\13\10"+
    "\1\160\12\10\1\0\14\10\14\0\1\10\4\0\33\10"+
    "\1\0\10\10\1\161\3\10\14\0\1\10\4\0\3\10"+
    "\1\162\1\163\25\10\1\162\1\0\2\10\1\164\11\10"+
    "\14\0\1\10\4\0\1\10\1\165\1\166\1\162\1\167"+
    "\1\155\1\170\1\171\1\172\1\165\1\173\1\174\1\175"+
    "\2\10\1\176\1\177\1\10\1\200\1\173\1\10\1\201"+
    "\2\10\1\172\1\176\1\162\1\0\1\10\1\202\1\164"+
    "\1\174\1\10\1\200\1\175\1\166\1\10\1\171\1\170"+
    "\1\10\14\0\1\10\4\0\4\10\1\203\1\10\1\170"+
    "\1\204\1\205\7\10\1\160\4\10\1\206\2\10\1\205"+
    "\2\10\1\0\11\10\1\204\1\170\1\10\14\0\1\10"+
    "\4\0\2\10\1\207\1\10\1\210\5\10\1\173\10\10"+
    "\1\173\7\10\1\0\7\10\1\207\4\10\14\0\1\10"+
    "\4\0\4\10\1\211\6\10\1\174\1\212\10\10\1\213"+
    "\5\10\1\0\3\10\1\174\2\10\1\212\5\10\14\0"+
    "\1\10\4\0\1\10\1\214\2\10\1\214\4\10\1\214"+
    "\21\10\1\0\14\10\14\0\1\10\4\0\4\10\1\215"+
    "\3\10\1\216\11\10\1\200\5\10\1\216\2\10\1\0"+
    "\1\10\1\202\3\10\1\200\6\10\14\0\1\10\4\0"+
    "\4\10\1\217\7\10\1\217\16\10\1\0\6\10\1\217"+
    "\5\10\14\0\1\10\4\0\4\10\1\220\3\10\1\221"+
    "\7\10\1\222\7\10\1\221\2\10\1\0\14\10\14\0"+
    "\1\10\4\0\2\10\1\223\1\10\1\224\12\10\1\176"+
    "\11\10\1\176\1\10\1\0\7\10\1\223\4\10\14\0"+
    "\1\10\4\0\2\10\1\225\1\10\1\225\26\10\1\0"+
    "\7\10\1\225\4\10\14\0\1\10\4\0\4\10\1\226"+
    "\6\10\1\226\17\10\1\0\3\10\1\226\10\10\14\0"+
    "\1\10\4\0\4\10\1\227\3\10\1\216\11\10\1\200"+
    "\5\10\1\216\2\10\1\0\5\10\1\200\6\10\14\0"+
    "\1\10\4\0\4\10\1\230\5\10\1\173\4\10\1\176"+
    "\3\10\1\173\5\10\1\176\1\10\1\0\14\10\14\0"+
    "\1\10\4\0\4\10\1\173\5\10\1\173\10\10\1\173"+
    "\7\10\1\0\14\10\14\0\1\10\4\0\4\10\1\176"+
    "\12\10\1\176\11\10\1\176\1\10\1\0\14\10\14\0"+
    "\1\10\4\0\1\10\1\152\2\10\1\231\2\10\1\154"+
    "\1\10\1\152\1\10\1\232\17\10\1\0\3\10\1\232"+
    "\5\10\1\154\2\10\14\0\1\10\4\0\4\10\1\232"+
    "\6\10\1\232\17\10\1\0\3\10\1\232\10\10\14\0"+
    "\1\10\4\0\1\10\1\233\2\10\1\152\4\10\1\152"+
    "\21\10\1\0\14\10\14\0\1\10\4\0\4\10\1\234"+
    "\3\10\1\234\17\10\1\234\2\10\1\0\14\10\14\0"+
    "\1\10\4\0\4\10\1\235\1\10\1\235\24\10\1\0"+
    "\12\10\1\235\1\10\14\0\1\10\4\0\4\10\1\164"+
    "\26\10\1\0\2\10\1\164\11\10\14\0\1\10\4\0"+
    "\4\10\1\236\1\10\1\237\24\10\1\0\2\10\1\164"+
    "\7\10\1\237\1\10\14\0\1\10\4\0\4\10\1\237"+
    "\1\10\1\237\24\10\1\0\12\10\1\237\1\10\14\0"+
    "\1\10\4\0\4\10\1\206\20\10\1\206\5\10\1\0"+
    "\14\10\14\0\1\10\4\0\1\10\1\214\1\225\1\10"+
    "\1\240\4\10\1\214\6\10\1\222\12\10\1\0\7\10"+
    "\1\225\4\10\14\0\1\10\4\0\4\10\1\222\13\10"+
    "\1\222\12\10\1\0\14\10\14\0\1\10\4\0\3\10"+
    "\2\162\25\10\1\162\1\0\14\10\14\0\1\10\4\0"+
    "\2\10\1\241\1\10\1\241\26\10\1\0\7\10\1\241"+
    "\4\10\14\0\1\10\4\0\2\10\1\207\1\10\1\207"+
    "\26\10\1\0\7\10\1\207\4\10\14\0\1\10\4\0"+
    "\2\10\1\223\1\10\1\223\26\10\1\0\7\10\1\223"+
    "\4\10\14\0\1\10\4\0\4\10\1\242\13\10\1\242"+
    "\12\10\1\0\14\10\14\0\1\10\4\0\4\10\1\243"+
    "\3\10\1\234\2\10\1\232\14\10\1\234\2\10\1\0"+
    "\3\10\1\232\10\10\14\0\1\10\4\0\4\10\1\244"+
    "\2\10\1\204\4\10\1\217\10\10\1\213\5\10\1\0"+
    "\6\10\1\217\2\10\1\204\2\10\14\0\1\10\4\0"+
    "\4\10\1\204\2\10\1\204\23\10\1\0\11\10\1\204"+
    "\2\10\14\0\1\10\4\0\4\10\1\213\20\10\1\213"+
    "\5\10\1\0\14\10\14\0\1\10\4\0\4\10\1\245"+
    "\3\10\1\205\3\10\1\212\13\10\1\205\2\10\1\0"+
    "\1\10\1\202\4\10\1\212\5\10\14\0\1\10\4\0"+
    "\4\10\1\205\3\10\1\205\17\10\1\205\2\10\1\0"+
    "\14\10\14\0\1\10\4\0\4\10\1\212\7\10\1\212"+
    "\16\10\1\0\6\10\1\212\5\10\14\0\1\10\4\0"+
    "\4\10\1\202\26\10\1\0\1\10\1\202\12\10\14\0"+
    "\1\10\4\0\4\10\1\246\2\10\1\246\23\10\1\0"+
    "\11\10\1\246\2\10\14\0\1\10\4\0\33\10\1\0"+
    "\4\10\1\247\7\10\14\0\1\10\4\0\4\10\1\250"+
    "\3\10\1\250\17\10\1\250\2\10\1\0\14\10\14\0"+
    "\1\10\4\0\2\10\1\251\1\10\1\252\3\10\1\250"+
    "\1\10\1\253\10\10\1\253\4\10\1\250\2\10\1\0"+
    "\7\10\1\251\4\10\14\0\1\10\4\0\2\10\1\251"+
    "\1\10\1\254\5\10\1\253\10\10\1\253\7\10\1\0"+
    "\7\10\1\251\4\10\14\0\1\10\4\0\4\10\1\255"+
    "\1\10\1\255\24\10\1\0\12\10\1\255\1\10\14\0"+
    "\1\10\4\0\4\10\1\256\1\10\1\255\10\10\1\257"+
    "\11\10\1\257\1\10\1\0\12\10\1\255\1\10\14\0"+
    "\1\10\4\0\4\10\1\257\12\10\1\257\11\10\1\257"+
    "\1\10\1\0\14\10\14\0\1\10\4\0\4\10\1\260"+
    "\5\10\1\260\10\10\1\260\7\10\1\0\14\10\14\0"+
    "\1\10\4\0\33\10\1\0\11\10\1\261\2\10\14\0"+
    "\1\10\4\0\4\10\1\262\12\10\1\262\11\10\1\262"+
    "\1\10\1\0\14\10\14\0\1\10\4\0\4\10\1\263"+
    "\3\10\1\250\6\10\1\264\10\10\1\250\1\264\1\10"+
    "\1\0\14\10\14\0\1\10\4\0\4\10\1\265\3\10"+
    "\1\266\3\10\1\267\13\10\1\266\2\10\1\0\6\10"+
    "\1\267\5\10\14\0\1\10\4\0\1\10\1\270\1\271"+
    "\1\10\1\272\1\273\1\255\1\10\1\274\1\270\1\275"+
    "\1\10\1\276\1\277\1\10\1\300\1\301\2\10\1\275"+
    "\1\10\1\302\2\10\1\274\1\300\1\10\1\0\6\10"+
    "\1\276\1\271\1\277\1\10\1\255\1\10\14\0\1\10"+
    "\4\0\4\10\1\303\1\273\6\10\1\304\16\10\1\0"+
    "\6\10\1\304\5\10\14\0\1\10\4\0\2\10\1\305"+
    "\1\10\1\306\5\10\1\307\4\10\1\257\3\10\1\307"+
    "\5\10\1\257\1\10\1\0\7\10\1\305\4\10\14\0"+
    "\1\10\4\0\4\10\1\310\12\10\1\310\11\10\1\310"+
    "\1\10\1\0\14\10\14\0\1\10\4\0\4\10\1\311"+
    "\7\10\1\311\16\10\1\0\6\10\1\311\5\10\14\0"+
    "\1\10\4\0\1\10\1\312\2\10\1\313\4\10\1\312"+
    "\2\10\1\314\16\10\1\0\6\10\1\314\5\10\14\0"+
    "\1\10\4\0\4\10\1\302\20\10\1\302\5\10\1\0"+
    "\14\10\14\0\1\10\4\0\4\10\1\301\13\10\1\301"+
    "\12\10\1\0\14\10\14\0\1\10\4\0\1\10\1\315"+
    "\2\10\1\316\4\10\1\315\3\10\1\277\15\10\1\0"+
    "\10\10\1\277\3\10\14\0\1\10\4\0\4\10\1\317"+
    "\3\10\1\317\17\10\1\317\2\10\1\0\14\10\14\0"+
    "\1\10\4\0\1\10\1\315\2\10\1\320\1\273\3\10"+
    "\1\315\1\260\1\10\1\304\6\10\1\260\7\10\1\0"+
    "\6\10\1\304\5\10\14\0\1\10\4\0\1\10\1\315"+
    "\2\10\1\315\4\10\1\315\21\10\1\0\14\10\14\0"+
    "\1\10\4\0\4\10\1\321\3\10\1\321\17\10\1\321"+
    "\2\10\1\0\14\10\14\0\1\10\4\0\4\10\1\322"+
    "\3\10\1\321\6\10\1\310\10\10\1\321\1\310\1\10"+
    "\1\0\14\10\14\0\1\10\4\0\4\10\1\323\7\10"+
    "\1\324\1\277\15\10\1\0\6\10\1\324\1\10\1\277"+
    "\3\10\14\0\1\10\4\0\4\10\1\314\7\10\1\314"+
    "\16\10\1\0\6\10\1\314\5\10\14\0\1\10\4\0"+
    "\4\10\1\277\10\10\1\277\15\10\1\0\10\10\1\277"+
    "\3\10\14\0\1\10\4\0\4\10\1\264\12\10\1\264"+
    "\11\10\1\264\1\10\1\0\14\10\14\0\1\10\4\0"+
    "\4\10\1\325\3\10\1\317\1\10\1\307\5\10\1\301"+
    "\2\10\1\307\4\10\1\317\2\10\1\0\14\10\14\0"+
    "\1\10\4\0\4\10\1\307\5\10\1\307\10\10\1\307"+
    "\7\10\1\0\14\10\14\0\1\10\4\0\1\10\1\312"+
    "\2\10\1\312\4\10\1\312\21\10\1\0\14\10\14\0"+
    "\1\10\4\0\2\10\1\305\1\10\1\326\12\10\1\257"+
    "\11\10\1\257\1\10\1\0\7\10\1\305\4\10\14\0"+
    "\1\10\4\0\4\10\1\267\7\10\1\267\16\10\1\0"+
    "\6\10\1\267\5\10\14\0\1\10\4\0\4\10\1\327"+
    "\7\10\1\267\10\10\1\302\5\10\1\0\6\10\1\267"+
    "\5\10\14\0\1\10\4\0\4\10\1\330\3\10\1\330"+
    "\17\10\1\330\2\10\1\0\14\10\14\0\1\10\4\0"+
    "\4\10\1\331\5\10\1\307\5\10\1\301\2\10\1\307"+
    "\7\10\1\0\14\10\14\0\1\10\4\0\4\10\1\310"+
    "\12\10\1\310\5\10\1\302\3\10\1\310\1\10\1\0"+
    "\14\10\14\0\1\10\4\0\4\10\1\250\3\10\1\250"+
    "\17\10\1\332\2\10\1\0\14\10\14\0\1\10\4\0"+
    "\2\10\1\305\1\10\1\305\26\10\1\0\7\10\1\305"+
    "\4\10\14\0\1\10\4\0\4\10\1\304\7\10\1\304"+
    "\16\10\1\0\6\10\1\304\5\10\14\0\1\10\4\0"+
    "\4\10\2\273\11\10\1\262\11\10\1\262\1\10\1\0"+
    "\14\10\14\0\1\10\4\0\4\10\2\273\25\10\1\0"+
    "\14\10\14\0\1\10\4\0\4\10\1\264\3\10\1\330"+
    "\6\10\1\264\10\10\1\330\1\264\1\10\1\0\14\10"+
    "\14\0\1\10\4\0\4\10\1\333\3\10\1\321\3\10"+
    "\1\267\13\10\1\321\2\10\1\0\6\10\1\267\5\10"+
    "\14\0\1\10\4\0\1\10\1\312\2\10\1\334\4\10"+
    "\1\312\3\10\1\277\15\10\1\0\10\10\1\277\3\10"+
    "\14\0\1\10\4\0\4\10\1\317\3\10\1\317\3\10"+
    "\1\314\13\10\1\317\2\10\1\0\6\10\1\314\5\10"+
    "\14\0\1\10\4\0\33\10\1\0\5\10\1\335\6\10"+
    "\14\0\1\10\4\0\4\10\1\336\12\10\1\336\11\10"+
    "\1\336\1\10\1\0\14\10\14\0\1\10\4\0\4\10"+
    "\1\337\20\10\1\337\5\10\1\0\14\10\14\0\1\10"+
    "\4\0\4\10\1\340\10\10\1\341\1\10\1\336\5\10"+
    "\1\337\3\10\1\336\1\10\1\0\10\10\1\341\3\10"+
    "\14\0\1\10\4\0\4\10\1\341\10\10\1\341\15\10"+
    "\1\0\10\10\1\341\3\10\14\0\1\10\4\0\4\10"+
    "\1\342\10\10\1\341\7\10\1\337\5\10\1\0\10\10"+
    "\1\341\3\10\14\0\1\10\4\0\4\10\1\343\2\10"+
    "\1\343\23\10\1\0\11\10\1\343\2\10\14\0\1\10"+
    "\4\0\4\10\1\344\2\10\1\343\16\10\1\345\4\10"+
    "\1\0\11\10\1\343\2\10\14\0\1\10\4\0\4\10"+
    "\1\345\21\10\1\345\4\10\1\0\14\10\14\0\1\10"+
    "\4\0\4\10\1\346\7\10\1\346\16\10\1\0\6\10"+
    "\1\346\5\10\14\0\1\10\4\0\33\10\1\0\12\10"+
    "\1\347\1\10\14\0\1\10\4\0\2\10\1\350\1\10"+
    "\1\351\12\10\1\336\11\10\1\336\1\10\1\0\7\10"+
    "\1\350\4\10\14\0\1\10\4\0\2\10\1\350\1\10"+
    "\1\350\26\10\1\0\7\10\1\350\4\10\14\0\1\10"+
    "\4\0\4\10\1\352\12\10\1\352\11\10\1\352\1\10"+
    "\1\0\14\10\14\0\1\10\4\0\4\10\1\353\12\10"+
    "\1\353\11\10\1\353\1\10\1\0\14\10\14\0\1\10"+
    "\4\0\4\10\1\354\12\10\1\354\11\10\1\354\1\10"+
    "\1\0\14\10\14\0\1\10\4\0\4\10\1\355\1\10"+
    "\1\356\10\10\1\357\11\10\1\357\1\10\1\0\12\10"+
    "\1\356\1\10\14\0\1\10\4\0\4\10\1\360\7\10"+
    "\1\361\10\10\1\337\5\10\1\0\6\10\1\361\5\10"+
    "\14\0\1\10\4\0\2\10\1\362\1\10\1\363\1\10"+
    "\1\356\1\364\1\365\3\10\1\366\1\341\1\10\1\367"+
    "\5\10\1\337\1\345\1\10\1\365\1\367\1\10\1\0"+
    "\6\10\1\366\1\362\1\341\1\364\1\356\1\10\14\0"+
    "\1\10\4\0\4\10\1\370\12\10\1\370\11\10\1\370"+
    "\1\10\1\0\14\10\14\0\1\10\4\0\4\10\1\371"+
    "\2\10\1\372\4\10\1\346\1\341\15\10\1\0\6\10"+
    "\1\346\1\10\1\341\1\372\2\10\14\0\1\10\4\0"+
    "\2\10\1\373\1\10\1\374\12\10\1\375\11\10\1\375"+
    "\1\10\1\0\7\10\1\373\4\10\14\0\1\10\4\0"+
    "\4\10\1\365\3\10\1\365\17\10\1\365\2\10\1\0"+
    "\14\10\14\0\1\10\4\0\2\10\1\350\1\10\1\376"+
    "\21\10\1\345\4\10\1\0\7\10\1\350\4\10\14\0"+
    "\1\10\4\0\4\10\1\377\12\10\1\377\11\10\1\377"+
    "\1\10\1\0\14\10\14\0\1\10\4\0\4\10\1\361"+
    "\7\10\1\361\16\10\1\0\6\10\1\361\5\10\14\0"+
    "\1\10\4\0\4\10\1\u0100\2\10\1\372\4\10\1\361"+
    "\11\10\1\345\4\10\1\0\6\10\1\361\2\10\1\372"+
    "\2\10\14\0\1\10\4\0\4\10\1\372\2\10\1\372"+
    "\23\10\1\0\11\10\1\372\2\10\14\0\1\10\4\0"+
    "\2\10\1\373\1\10\1\373\26\10\1\0\7\10\1\373"+
    "\4\10\14\0\1\10\4\0\4\10\1\357\12\10\1\357"+
    "\11\10\1\357\1\10\1\0\14\10\14\0\1\10\4\0"+
    "\4\10\1\356\1\10\1\356\24\10\1\0\12\10\1\356"+
    "\1\10\14\0\1\10\4\0\4\10\1\u0101\1\10\1\356"+
    "\1\10\1\365\17\10\1\365\2\10\1\0\12\10\1\356"+
    "\1\10\14\0\1\10\4\0\4\10\1\u0102\1\10\1\356"+
    "\5\10\1\346\2\10\1\377\11\10\1\377\1\10\1\0"+
    "\6\10\1\346\3\10\1\356\1\10\14\0\1\10\4\0"+
    "\2\10\1\373\1\10\1\u0103\3\10\1\365\17\10\1\365"+
    "\2\10\1\0\7\10\1\373\4\10\14\0\1\10\4\0"+
    "\4\10\1\u0104\7\10\1\361\11\10\1\345\4\10\1\0"+
    "\6\10\1\361\5\10\14\0\1\10\4\0\4\10\1\336"+
    "\12\10\1\336\11\10\1\u0105\1\10\1\0\14\10\14\0"+
    "\1\10\4\0\4\10\1\u0106\3\10\1\365\6\10\1\357"+
    "\10\10\1\365\1\357\1\10\1\0\14\10\14\0\1\10"+
    "\4\0\33\10\1\0\6\10\1\u0107\5\10\14\0\1\10"+
    "\4\0\3\10\2\u0108\25\10\1\u0108\1\0\14\10\14\0"+
    "\1\10\4\0\4\10\1\u0109\21\10\1\u0109\4\10\1\0"+
    "\14\10\14\0\1\10\4\0\3\10\1\u0108\1\u0109\3\10"+
    "\1\u010a\15\10\1\u0109\1\10\1\u010a\1\10\1\u0108\1\0"+
    "\14\10\14\0\1\10\4\0\4\10\1\u010a\3\10\1\u010a"+
    "\17\10\1\u010a\2\10\1\0\14\10\14\0\1\10\4\0"+
    "\4\10\1\u0109\3\10\1\u010a\15\10\1\u0109\1\10\1\u010a"+
    "\2\10\1\0\14\10\14\0\1\10\4\0\4\10\1\u010b"+
    "\3\10\1\u010b\17\10\1\u010b\2\10\1\0\14\10\14\0"+
    "\1\10\4\0\4\10\1\u010c\3\10\1\u010b\6\10\1\u010d"+
    "\10\10\1\u010b\1\u010d\1\10\1\0\14\10\14\0\1\10"+
    "\4\0\4\10\1\u010d\12\10\1\u010d\11\10\1\u010d\1\10"+
    "\1\0\14\10\14\0\1\10\4\0\4\10\1\u010e\12\10"+
    "\1\u010e\11\10\1\u010e\1\10\1\0\14\10\14\0\1\10"+
    "\4\0\1\10\1\u010f\31\10\1\0\14\10\14\0\1\10"+
    "\4\0\4\10\1\u0110\17\10\1\u0110\6\10\1\0\13\10"+
    "\1\u0110\14\0\1\10\4\0\3\10\1\u0108\1\u0110\17\10"+
    "\1\u0110\5\10\1\u0108\1\0\13\10\1\u0110\14\0\1\10"+
    "\4\0\4\10\1\u0111\7\10\1\u0111\16\10\1\0\6\10"+
    "\1\u0111\5\10\14\0\1\10\4\0\4\10\1\u0112\7\10"+
    "\1\u0112\16\10\1\0\6\10\1\u0112\5\10\14\0\1\10"+
    "\4\0\4\10\1\u0110\10\10\1\u0113\6\10\1\u0110\6\10"+
    "\1\0\10\10\1\u0113\2\10\1\u0110\14\0\1\10\4\0"+
    "\2\10\1\u0114\1\u0108\1\u0115\3\10\1\u0116\3\10\1\u0117"+
    "\1\u0113\1\10\1\u0118\2\10\1\u0119\1\10\1\u0110\1\u011a"+
    "\1\u0109\1\10\1\u0116\1\u0118\1\u0108\1\0\5\10\1\u0119"+
    "\1\u0117\1\u0114\1\u0113\2\10\1\u0110\14\0\1\10\4\0"+
    "\4\10\1\u011b\3\10\1\u010b\14\10\1\u011a\2\10\1\u010b"+
    "\2\10\1\0\14\10\14\0\1\10\4\0\2\10\1\u0114"+
    "\1\10\1\u0114\26\10\1\0\7\10\1\u0114\4\10\14\0"+
    "\1\10\4\0\3\10\1\u0108\1\u011c\7\10\1\u0111\5\10"+
    "\1\u0119\7\10\1\u0108\1\0\5\10\1\u0119\1\u0111\5\10"+
    "\14\0\1\10\4\0\3\10\1\u0108\1\u011d\7\10\1\u0111"+
    "\15\10\1\u0108\1\0\6\10\1\u0111\5\10\14\0\1\10"+
    "\4\0\4\10\1\u011a\3\10\1\u010a\6\10\1\u010e\5\10"+
    "\1\u011a\2\10\1\u010a\1\u010e\1\10\1\0\14\10\14\0"+
    "\1\10\4\0\4\10\1\u011a\20\10\1\u011a\5\10\1\0"+
    "\14\10\14\0\1\10\4\0\4\10\1\u0113\10\10\1\u0113"+
    "\15\10\1\0\10\10\1\u0113\3\10\14\0\1\10\4\0"+
    "\4\10\1\u011e\10\10\1\u0113\4\10\1\u0119\10\10\1\0"+
    "\5\10\1\u0119\2\10\1\u0113\3\10\14\0\1\10\4\0"+
    "\4\10\1\u0119\15\10\1\u0119\10\10\1\0\5\10\1\u0119"+
    "\6\10\14\0\1\10\4\0\4\10\1\u011f\12\10\1\u010d"+
    "\4\10\1\u0110\4\10\1\u010d\1\10\1\0\13\10\1\u0110"+
    "\14\0\1\10\4\0\4\10\1\u0120\12\10\1\u010d\5\10"+
    "\1\u011a\3\10\1\u010d\1\10\1\0\14\10\14\0\1\10"+
    "\4\0\2\10\1\u0114\1\10\1\u0121\7\10\1\u0112\16\10"+
    "\1\0\6\10\1\u0112\1\u0114\4\10\14\0\1\10\4\0"+
    "\4\10\1\u0122\7\10\1\u0112\2\10\1\u010e\2\10\1\u0119"+
    "\6\10\1\u010e\1\10\1\0\5\10\1\u0119\1\u0112\5\10"+
    "\14\0\1\10\4\0\2\10\1\u0114\1\10\1\u0123\10\10"+
    "\1\u0113\15\10\1\0\7\10\1\u0114\1\u0113\3\10\14\0"+
    "\1\10\4\0\3\10\2\u0108\25\10\1\u0124\1\0\14\10"+
    "\14\0\1\10\4\0\1\10\1\u0125\2\10\1\u0125\4\10"+
    "\1\u0125\21\10\1\0\14\10\14\0\1\10\4\0\1\10"+
    "\1\u0125\2\10\1\u0126\2\10\1\u0126\1\10\1\u0125\21\10"+
    "\1\0\11\10\1\u0126\2\10\14\0\1\10\4\0\4\10"+
    "\1\u0126\2\10\1\u0126\23\10\1\0\11\10\1\u0126\2\10"+
    "\14\0\1\10\4\0\33\10\1\0\12\10\1\u0127\1\10"+
    "\14\0\1\10\4\0\2\10\1\u0128\1\10\1\u0128\26\10"+
    "\1\0\7\10\1\u0128\4\10\14\0\1\10\4\0\4\10"+
    "\1\u0129\12\10\1\u0129\11\10\1\u0129\1\10\1\0\14\10"+
    "\14\0\1\10\4\0\4\10\1\u012a\1\10\1\u012a\24\10"+
    "\1\0\12\10\1\u012a\1\10\14\0\1\10\4\0\1\10"+
    "\1\u0125\1\u0128\1\10\1\u012b\1\10\1\u012a\1\u0126\1\10"+
    "\1\u0125\5\10\1\u0129\5\10\1\u012c\3\10\1\u0129\1\10"+
    "\1\0\7\10\1\u0128\1\10\1\u0126\1\u012a\1\10\14\0"+
    "\1\10\4\0\2\10\1\u0128\1\10\1\u012d\12\10\1\u0129"+
    "\11\10\1\u0129\1\10\1\0\7\10\1\u0128\4\10\14\0"+
    "\1\10\4\0\4\10\1\u012c\20\10\1\u012c\5\10\1\0"+
    "\14\10\14\0\1\10\4\0\2\10\1\u0128\1\10\1\u012e"+
    "\20\10\1\u012c\5\10\1\0\7\10\1\u0128\4\10\14\0"+
    "\1\10\4\0\4\10\1\u012f\1\10\1\u012a\10\10\1\u0129"+
    "\11\10\1\u0129\1\10\1\0\12\10\1\u012a\1\10\14\0"+
    "\1\10\4\0\4\10\1\u012c\12\10\1\u0129\5\10\1\u012c"+
    "\3\10\1\u0129\1\10\1\0\14\10\14\0\1\10\4\0"+
    "\33\10\1\u0130\14\10\14\0\1\10\4\0\33\10\1\0"+
    "\13\10\1\u0131\14\0\1\10\4\0\4\10\1\u0132\20\10"+
    "\1\u0132\5\10\1\0\14\10\14\0\1\10\4\0\4\10"+
    "\1\u0133\20\10\1\u0133\5\10\1\0\14\10\14\0\1\10"+
    "\4\0\4\10\1\u0134\20\10\1\u0134\5\10\1\0\14\10"+
    "\22\0\1\u0135\2\0\1\u0135\4\0\1\u0135\52\0\1\10"+
    "\4\0\30\10\1\u0136\2\10\1\0\14\10\14\0\1\10"+
    "\4\0\4\10\1\u0137\12\10\1\u0137\11\10\1\u0137\1\10"+
    "\1\0\14\10\25\0\1\u0138\11\0\1\u0138\10\0\1\u0138"+
    "\33\0\1\u0139\1\u013a\2\u0139\1\0\1\u0139\33\u013a\1\u0139"+
    "\14\u013a\13\u0139\7\0\1\u013b\2\0\1\u013b\4\0\1\u013b"+
    "\117\0\1\u013c\23\0\1\10\4\0\33\10\1\0\4\10"+
    "\1\u013d\7\10\25\0\1\u013e\3\0\1\u013e\17\0\1\u013e"+
    "\103\0\1\u013f\20\0\1\10\4\0\33\10\1\0\7\10"+
    "\1\u0140\4\10\25\0\1\u0141\12\0\1\u0141\11\0\1\u0141"+
    "\40\0\1\u0142\62\0\1\10\4\0\1\10\1\u0143\31\10"+
    "\1\0\14\10\24\0\2\u0144\25\0\1\u0144\61\0\1\u0145"+
    "\40\0\1\10\4\0\23\10\1\u0146\7\10\1\0\14\10"+
    "\62\0\1\u0147\22\0\1\10\4\0\33\10\1\0\5\10"+
    "\1\u0148\6\10\35\0\1\u0149\47\0\1\10\4\0\14\10"+
    "\1\u014a\16\10\1\0\14\10\60\0\1\u014b\24\0\1\10"+
    "\4\0\33\10\1\0\3\10\1\u014c\10\10\62\0\1\u014d"+
    "\22\0\1\10\4\0\33\10\1\0\5\10\1\u014e\6\10"+
    "\22\0\1\u014f\62\0\1\10\4\0\1\10\1\u0150\31\10"+
    "\1\0\14\10\64\0\1\u0151\20\0\1\10\4\0\33\10"+
    "\1\0\7\10\1\u0152\4\10\65\0\1\u0153\17\0\1\10"+
    "\4\0\33\10\1\0\10\10\1\u0154\3\10\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14079];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\1\11\27\1\1\11"+
    "\2\1\7\11\2\1\2\11\1\0\72\1\2\11\307\1"+
    "\1\0\4\1\1\0\2\1\2\0\1\1\2\0\1\1"+
    "\2\0\1\1\2\0\1\1\1\11\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[340];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    int jline = 0;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 61: 
          { jline = 0; lexeme=yytext(); return tk_writeline;
          }
        case 63: break;
        case 7: 
          { jline = 0; lexeme=yytext(); return tk_Suma;
          }
        case 64: break;
        case 44: 
          { jline = 0; lexeme=yytext(); return tk_while;
          }
        case 65: break;
        case 54: 
          { jline = 0; lexeme=yytext(); return tk_public;
          }
        case 66: break;
        case 19: 
          { jline = 0; lexeme=yytext(); return tk_if;
          }
        case 67: break;
        case 29: 
          { jline = 0; lexeme=yytext(); return tk_for;
          }
        case 68: break;
        case 5: 
          { jline = 0; lexeme=yytext(); return tk_Identificador;
          }
        case 69: break;
        case 52: 
          { jline = 0; lexeme=yytext(); return tk_module;
          }
        case 70: break;
        case 56: 
          { jline = 0; lexeme=yytext(); return tk_imports;
          }
        case 71: break;
        case 25: 
          { jline = 0; lexeme = yytext(); return tk_menorigual;
          }
        case 72: break;
        case 9: 
          { jline = 0; lexeme=yytext(); return tk_Multiplicacion;
          }
        case 73: break;
        case 2: 
          { jline = 0; lexeme=yytext(); return tk_Numero;
          }
        case 74: break;
        case 41: 
          { jline = 0; lexeme=yytext(); return tk_null;
          }
        case 75: break;
        case 35: 
          { jline = 0; lexeme=yytext(); return tk_like;
          }
        case 76: break;
        case 14: 
          { jline = 0; lexeme = yytext(); return tk_mayorque;
          }
        case 77: break;
        case 8: 
          { jline = 0; lexeme=yytext(); return tk_Resta;
          }
        case 78: break;
        case 1: 
          { jline = 0; return ERROR;
          }
        case 79: break;
        case 17: 
          { jline = 0; lexeme=yytext(); return tk_ParentesisC;
          }
        case 80: break;
        case 43: 
          { jline = 0; lexeme=yytext(); return tk_then;
          }
        case 81: break;
        case 32: 
          { jline = 0; lexeme=yytext(); return tk_end;
          }
        case 82: break;
        case 59: 
          { jline = 0; lexeme=yytext(); return tk_boolean;
          }
        case 83: break;
        case 45: 
          { jline = 0; lexeme=yytext(); return tk_write;
          }
        case 84: break;
        case 42: 
          { jline = 0; lexeme=yytext(); return tk_read;
          }
        case 85: break;
        case 36: 
          { jline = 0; lexeme=yytext(); return tk_else;
          }
        case 86: break;
        case 12: 
          { jline = 0; lexeme=yytext(); return tk_ampersant;
          }
        case 87: break;
        case 62: 
          { jline = 0; lexeme=yytext(); return tk_lib;
          }
        case 88: break;
        case 34: 
          { jline = 0; lexeme=yytext(); return tk_xor;
          }
        case 89: break;
        case 22: 
          { jline = 0; lexeme=yytext(); return tk_or;
          }
        case 90: break;
        case 6: 
          { jline = 0; lexeme=yytext(); return tk_Igual;
          }
        case 91: break;
        case 57: 
          { jline = 0; lexeme=yytext(); return tk_integer;
          }
        case 92: break;
        case 15: 
          { jline = 0; lexeme = yytext(); return tk_menorque;
          }
        case 93: break;
        case 10: 
          { jline = 0; lexeme=yytext(); return tk_Division;
          }
        case 94: break;
        case 27: 
          { jline = 0; lexeme=yytext(); return tk_mod;
          }
        case 95: break;
        case 60: 
          { jline = 0; lexeme=yytext(); return tk_function;
          }
        case 96: break;
        case 58: 
          { jline = 0; lexeme=yytext(); return tk_cs;
          }
        case 97: break;
        case 40: 
          { jline = 0; lexeme=yytext(); return tk_next;
          }
        case 98: break;
        case 39: 
          { jline = 0; lexeme=yytext(); return tk_loop;
          }
        case 99: break;
        case 37: 
          { jline = 0; lexeme=yytext(); return tk_exit;
          }
        case 100: break;
        case 28: 
          { jline = 0; lexeme=yytext(); return tk_dim;
          }
        case 101: break;
        case 46: 
          { jline = 0; lexeme = yytext(); return tk_false;
          }
        case 102: break;
        case 33: 
          { jline = 0; lexeme=yytext(); return tk_and;
          }
        case 103: break;
        case 30: 
          { jline = 0; lexeme=yytext(); return tk_not;
          }
        case 104: break;
        case 21: 
          { jline = 0; lexeme=yytext(); return tk_do;
          }
        case 105: break;
        case 13: 
          { jline = 0; lexeme=yytext(); return tk_punto;
          }
        case 106: break;
        case 20: 
          { jline = 0; lexeme=yytext(); return tk_as;
          }
        case 107: break;
        case 23: 
          { jline = 0; lexeme=yytext(); return tk_to;
          }
        case 108: break;
        case 48: 
          { jline = 0; lexeme=yytext(); return tk_byval;
          }
        case 109: break;
        case 26: 
          { jline = 0; lexeme=yytext(); return tk_valorString;
          }
        case 110: break;
        case 53: 
          { jline = 0; lexeme=yytext(); return tk_elseif;
          }
        case 111: break;
        case 38: 
          { jline = 0; lexeme = yytext(); return tk_true;
          }
        case 112: break;
        case 4: 
          { jline++;
        if(jline == 1){
            return tk_Linea;
        }
          }
        case 113: break;
        case 49: 
          { jline = 0; lexeme=yytext(); return tk_sys;
          }
        case 114: break;
        case 11: 
          { jline = 0; lexeme=yytext(); return tk_Coma;
          }
        case 115: break;
        case 18: 
          { jline = 0; lexeme=yytext(); return tk_comentario;
          }
        case 116: break;
        case 55: 
          { jline = 0; lexeme=yytext(); return tk_return;
          }
        case 117: break;
        case 47: 
          { jline = 0; lexeme=yytext(); return tk_until;
          }
        case 118: break;
        case 31: 
          { jline = 0; lexeme=yytext(); return tk_sub;
          }
        case 119: break;
        case 50: 
          { jline = 0; lexeme=yytext(); return tk_String;
          }
        case 120: break;
        case 24: 
          { jline = 0; lexeme = yytext(); return tk_mayorigual;
          }
        case 121: break;
        case 51: 
          { jline = 0; lexeme=yytext(); return tk_structure;
          }
        case 122: break;
        case 16: 
          { jline = 0; lexeme=yytext(); return tk_ParentesisA;
          }
        case 123: break;
        case 3: 
          { 
          }
        case 124: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
