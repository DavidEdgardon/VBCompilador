/* The following code was generated by JFlex 1.4.3 on 03-06-21 12:03 AM */

package analizadores;
import static analizadores.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 03-06-21 12:03 AM from the specification file
 * <tt>C:/Users/David/Documents/NetBeansProjects/VBCompilador/src/analizadores/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\4\1\0\1\2\23\0\1\2\1\0\1\3\3\0"+
    "\1\60\1\5\1\63\1\64\1\56\1\56\1\57\1\56\1\61\1\56"+
    "\12\1\2\0\1\62\1\41\1\62\2\0\1\30\1\45\1\23\1\26"+
    "\1\25\1\32\1\34\1\42\1\10\1\6\1\44\1\22\1\11\1\33"+
    "\1\14\1\13\1\6\1\15\1\17\1\16\1\20\1\46\1\27\1\43"+
    "\1\24\1\6\4\0\1\6\1\0\1\47\1\21\1\52\1\26\1\37"+
    "\1\55\1\34\1\42\1\51\1\6\1\44\1\50\1\40\1\33\1\54"+
    "\1\13\1\6\1\53\1\7\1\36\1\31\1\6\1\27\1\43\1\35"+
    "\1\6\1\0\1\12\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\3\24\5\1\6\2\5\1\7\1\10\1\11\1\12"+
    "\1\6\1\13\1\14\1\0\1\15\4\5\2\16\3\5"+
    "\1\17\1\5\1\17\1\20\1\21\10\5\1\21\1\5"+
    "\2\22\16\5\2\20\3\5\1\17\13\5\1\23\6\5"+
    "\1\24\1\5\2\25\3\5\1\25\1\5\1\26\1\27"+
    "\1\5\1\30\2\5\1\31\3\5\2\26\1\27\3\5"+
    "\1\30\6\5\1\31\1\5\1\31\6\5\2\30\5\5"+
    "\1\31\1\5\1\32\1\30\1\26\1\27\1\33\13\5"+
    "\1\34\2\35\2\36\3\5\1\37\1\40\1\41\1\5"+
    "\1\42\1\5\1\37\1\43\1\44\1\40\4\5\1\37"+
    "\1\5\2\42\2\5\1\41\1\40\1\5\1\37\2\42"+
    "\1\41\1\5\1\44\1\36\1\43\20\5\1\45\1\46"+
    "\1\45\1\37\1\5\2\47\1\5\1\37\2\5\1\47"+
    "\1\37\1\46\3\5\2\45\2\5\1\47\3\5\1\47"+
    "\1\5\1\37\1\50\1\51\1\52\1\53\3\5\1\54"+
    "\1\5\1\55\2\5\1\56\1\5\1\52\1\53\1\5"+
    "\1\54\1\5\2\57\2\51\1\56\1\55\1\57\1\5"+
    "\1\54\1\56\1\51\1\60\1\61\2\5\1\62\1\5"+
    "\1\61\1\63\1\62\1\63\1\62\1\0\2\5\2\64"+
    "\1\0\1\5\1\65\2\0\1\5\2\0\1\5\2\0"+
    "\1\5\2\0\1\5\1\52\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\2\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\65\0\237\0\65\0\324\0\u0109"+
    "\0\u013e\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1"+
    "\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459"+
    "\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\65\0\u0597\0\u05cc"+
    "\0\65\0\65\0\65\0\65\0\u0601\0\65\0\65\0\u0636"+
    "\0\324\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0109\0\u0774"+
    "\0\u07a9\0\u07de\0\u0109\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7"+
    "\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0109"+
    "\0\u0a8f\0\u0ac4\0\u0109\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd"+
    "\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75"+
    "\0\u0daa\0\u0daa\0\u0109\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0e7e"+
    "\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026"+
    "\0\u105b\0\u1090\0\u0636\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199"+
    "\0\u11ce\0\u1203\0\u1238\0\u0109\0\u126d\0\u126d\0\u12a2\0\u12d7"+
    "\0\u130c\0\u1341\0\u112f\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a"+
    "\0\u1203\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u0109\0\u0109\0\u1553"+
    "\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb"+
    "\0\u1730\0\u1765\0\u1765\0\u0109\0\u179a\0\u17cf\0\u1804\0\u13e0"+
    "\0\u1839\0\u186e\0\u10fa\0\u0109\0\u18a3\0\u18d8\0\u190d\0\u1942"+
    "\0\u1977\0\u19ac\0\u19e1\0\u0109\0\u18d8\0\u1a16\0\u1a4b\0\u0109"+
    "\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3"+
    "\0\u1c28\0\u1c5d\0\u1c92\0\u0109\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66"+
    "\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u0109\0\u1e6f\0\u1ea4\0\u1ed9"+
    "\0\u1f0e\0\u1f43\0\u0109\0\u0109\0\u1f78\0\u1f78\0\u1fad\0\u1fe2"+
    "\0\u2017\0\u0109\0\u204c\0\u13ab\0\u0109\0\u2081\0\u20b6\0\u0109"+
    "\0\u20eb\0\u1d66\0\u1d66\0\u2120\0\u204c\0\u2017\0\u2155\0\u1d9b"+
    "\0\u0109\0\u2017\0\u218a\0\u1d31\0\u21bf\0\u21f4\0\u2229\0\u225e"+
    "\0\u2293\0\u22c8\0\u22fd\0\u2332\0\u2367\0\u239c\0\u23d1\0\u2406"+
    "\0\u243b\0\u2470\0\u24a5\0\u24a5\0\u0109\0\u24da\0\u24da\0\u225e"+
    "\0\u0109\0\u250f\0\u2544\0\u2579\0\u25ae\0\u23d1\0\u25e3\0\u2618"+
    "\0\u264d\0\u2682\0\u26b7\0\u26ec\0\u2721\0\u2756\0\u2721\0\u278b"+
    "\0\u27c0\0\u27f5\0\u282a\0\u239c\0\u285f\0\u25ae\0\u0109\0\u0109"+
    "\0\u0109\0\u0109\0\u2894\0\u28c9\0\u28fe\0\u0109\0\u2933\0\u0109"+
    "\0\u2968\0\u299d\0\u0109\0\u29d2\0\u2a07\0\u2894\0\u2a3c\0\u28fe"+
    "\0\u2a71\0\u0109\0\u2894\0\u2aa6\0\u2968\0\u2a71\0\u28fe\0\u28fe"+
    "\0\u2adb\0\u2b10\0\u29d2\0\u2b45\0\u0109\0\u0109\0\u2b7a\0\u2baf"+
    "\0\u0109\0\u2be4\0\u2c19\0\u0109\0\u2baf\0\u2baf\0\u2be4\0\u2c4e"+
    "\0\u2c83\0\u2cb8\0\u0109\0\u2cb8\0\u2ced\0\u2d22\0\u0109\0\u2d57"+
    "\0\u2d8c\0\u2dc1\0\u2df6\0\u2e2b\0\u2e60\0\u2e95\0\u2eca\0\u2eff"+
    "\0\u2f34\0\u2f69\0\u2f9e\0\65\0\u2fd3\0\u3008\0\u303d\0\u3072"+
    "\0\u30a7\0\u30dc\0\u3111\0\u3146\0\u317b\0\u31b0\0\u31e5\0\u321a"+
    "\0\u324f\0\u3284\0\65\0\u0109";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\10\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\2\10\1\20\1\26\1\35"+
    "\1\36\1\10\1\37\1\10\1\40\1\10\1\31\1\24"+
    "\1\12\1\25\1\17\1\16\1\33\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\66\0\1\3\63\0\4\50"+
    "\1\0\60\50\4\51\1\0\60\51\1\0\1\10\4\0"+
    "\33\10\1\0\14\10\10\0\1\10\4\0\4\10\1\52"+
    "\3\10\1\53\5\10\1\54\10\10\1\54\1\53\2\10"+
    "\1\0\14\10\10\0\1\10\4\0\3\10\1\55\1\56"+
    "\17\10\1\57\1\60\4\10\1\55\1\0\13\10\1\57"+
    "\10\0\1\10\4\0\4\10\1\61\1\10\1\61\24\10"+
    "\1\0\7\10\1\62\2\10\1\61\1\10\10\0\1\10"+
    "\4\0\1\10\1\63\1\64\1\55\1\65\1\10\1\66"+
    "\1\67\1\53\1\63\1\70\1\10\1\71\1\10\1\54"+
    "\1\72\2\10\1\73\1\70\1\57\1\74\1\10\1\54"+
    "\1\53\1\72\1\55\1\0\1\75\1\76\3\10\1\73"+
    "\1\71\1\64\1\10\1\67\1\66\1\57\10\0\1\10"+
    "\4\0\4\10\1\77\5\10\1\77\10\10\1\77\7\10"+
    "\1\0\14\10\10\0\1\10\4\0\4\10\1\100\2\10"+
    "\1\100\23\10\1\0\11\10\1\100\2\10\10\0\1\10"+
    "\4\0\4\10\1\101\12\10\1\101\11\10\1\101\1\10"+
    "\1\0\14\10\10\0\1\10\4\0\4\10\1\102\1\10"+
    "\1\103\1\104\23\10\1\0\1\105\10\10\1\104\1\103"+
    "\1\10\10\0\1\10\4\0\4\10\1\106\3\10\1\53"+
    "\1\10\1\107\3\10\1\54\4\10\1\107\3\10\1\110"+
    "\1\53\2\10\1\0\14\10\10\0\1\10\4\0\4\10"+
    "\1\111\20\10\1\111\5\10\1\0\14\10\10\0\1\10"+
    "\4\0\4\10\1\112\1\10\1\112\24\10\1\0\12\10"+
    "\1\112\1\10\10\0\1\10\4\0\2\10\1\113\1\10"+
    "\1\114\1\10\1\115\24\10\1\0\7\10\1\113\2\10"+
    "\1\115\1\10\10\0\1\10\4\0\4\10\1\116\1\10"+
    "\1\116\24\10\1\0\12\10\1\116\1\10\10\0\1\10"+
    "\4\0\4\10\1\117\7\10\1\71\10\10\1\120\5\10"+
    "\1\0\1\10\1\76\4\10\1\71\5\10\10\0\1\10"+
    "\4\0\2\10\1\121\1\10\1\122\1\10\1\123\24\10"+
    "\1\0\7\10\1\121\2\10\1\123\1\10\10\0\1\10"+
    "\4\0\4\10\1\124\2\10\1\125\23\10\1\0\1\126"+
    "\10\10\1\125\2\10\10\0\1\10\4\0\1\10\1\63"+
    "\2\10\1\127\4\10\1\63\13\10\1\130\5\10\1\0"+
    "\14\10\10\0\1\10\4\0\4\10\1\131\5\10\1\107"+
    "\10\10\1\107\1\10\1\111\5\10\1\0\14\10\10\0"+
    "\1\10\4\0\4\10\1\132\1\10\1\133\3\10\1\134"+
    "\7\10\1\73\1\134\7\10\1\0\5\10\1\73\4\10"+
    "\1\133\1\10\10\0\1\10\4\0\4\10\1\135\1\10"+
    "\1\136\3\10\1\137\4\10\1\140\3\10\1\137\5\10"+
    "\1\140\1\10\1\0\12\10\1\136\1\10\10\0\1\10"+
    "\4\0\4\10\1\61\1\10\1\61\24\10\1\0\12\10"+
    "\1\61\1\10\10\0\1\10\4\0\4\10\1\141\1\10"+
    "\1\141\24\10\1\0\12\10\1\141\1\10\10\0\1\10"+
    "\4\0\4\10\1\112\1\10\1\112\20\10\1\142\3\10"+
    "\1\0\12\10\1\112\1\10\50\0\1\36\23\0\3\50"+
    "\1\143\1\0\60\50\1\0\1\10\4\0\1\10\1\144"+
    "\2\10\1\145\2\10\1\146\1\10\1\144\21\10\1\0"+
    "\11\10\1\146\2\10\10\0\1\10\4\0\4\10\1\146"+
    "\2\10\1\146\23\10\1\0\11\10\1\146\2\10\10\0"+
    "\1\10\4\0\1\10\1\144\2\10\1\144\4\10\1\144"+
    "\21\10\1\0\14\10\10\0\1\10\4\0\4\10\2\147"+
    "\25\10\1\0\14\10\10\0\1\10\4\0\4\10\1\150"+
    "\1\147\2\10\1\151\17\10\1\151\2\10\1\0\14\10"+
    "\10\0\1\10\4\0\4\10\1\151\3\10\1\151\17\10"+
    "\1\151\2\10\1\0\14\10\10\0\1\10\4\0\4\10"+
    "\1\152\13\10\1\152\12\10\1\0\14\10\10\0\1\10"+
    "\4\0\33\10\1\0\10\10\1\153\3\10\10\0\1\10"+
    "\4\0\3\10\1\154\1\155\25\10\1\154\1\0\2\10"+
    "\1\156\11\10\10\0\1\10\4\0\1\10\1\157\1\160"+
    "\1\154\1\161\1\147\1\162\1\163\1\164\1\157\1\165"+
    "\1\166\1\167\2\10\1\170\1\171\1\10\1\172\1\165"+
    "\1\10\1\173\2\10\1\164\1\170\1\154\1\0\1\10"+
    "\1\174\1\156\1\166\1\10\1\172\1\167\1\160\1\10"+
    "\1\163\1\162\1\10\10\0\1\10\4\0\4\10\1\175"+
    "\1\10\1\162\1\176\1\177\7\10\1\152\4\10\1\200"+
    "\2\10\1\177\2\10\1\0\11\10\1\176\1\162\1\10"+
    "\10\0\1\10\4\0\2\10\1\201\1\10\1\202\5\10"+
    "\1\165\10\10\1\165\7\10\1\0\7\10\1\201\4\10"+
    "\10\0\1\10\4\0\4\10\1\203\6\10\1\166\1\204"+
    "\10\10\1\205\5\10\1\0\3\10\1\166\2\10\1\204"+
    "\5\10\10\0\1\10\4\0\1\10\1\206\2\10\1\206"+
    "\4\10\1\206\21\10\1\0\14\10\10\0\1\10\4\0"+
    "\4\10\1\207\3\10\1\210\11\10\1\172\5\10\1\210"+
    "\2\10\1\0\1\10\1\174\3\10\1\172\6\10\10\0"+
    "\1\10\4\0\4\10\1\211\7\10\1\211\16\10\1\0"+
    "\6\10\1\211\5\10\10\0\1\10\4\0\4\10\1\212"+
    "\3\10\1\213\7\10\1\214\7\10\1\213\2\10\1\0"+
    "\14\10\10\0\1\10\4\0\2\10\1\215\1\10\1\216"+
    "\12\10\1\170\11\10\1\170\1\10\1\0\7\10\1\215"+
    "\4\10\10\0\1\10\4\0\2\10\1\217\1\10\1\217"+
    "\26\10\1\0\7\10\1\217\4\10\10\0\1\10\4\0"+
    "\4\10\1\220\6\10\1\220\17\10\1\0\3\10\1\220"+
    "\10\10\10\0\1\10\4\0\4\10\1\221\3\10\1\210"+
    "\11\10\1\172\5\10\1\210\2\10\1\0\5\10\1\172"+
    "\6\10\10\0\1\10\4\0\4\10\1\222\5\10\1\165"+
    "\4\10\1\170\3\10\1\165\5\10\1\170\1\10\1\0"+
    "\14\10\10\0\1\10\4\0\4\10\1\165\5\10\1\165"+
    "\10\10\1\165\7\10\1\0\14\10\10\0\1\10\4\0"+
    "\4\10\1\170\12\10\1\170\11\10\1\170\1\10\1\0"+
    "\14\10\10\0\1\10\4\0\1\10\1\144\2\10\1\223"+
    "\2\10\1\146\1\10\1\144\1\10\1\224\17\10\1\0"+
    "\3\10\1\224\5\10\1\146\2\10\10\0\1\10\4\0"+
    "\4\10\1\224\6\10\1\224\17\10\1\0\3\10\1\224"+
    "\10\10\10\0\1\10\4\0\1\10\1\225\2\10\1\144"+
    "\4\10\1\144\21\10\1\0\14\10\10\0\1\10\4\0"+
    "\4\10\1\226\3\10\1\226\17\10\1\226\2\10\1\0"+
    "\14\10\10\0\1\10\4\0\4\10\1\227\1\10\1\227"+
    "\24\10\1\0\12\10\1\227\1\10\10\0\1\10\4\0"+
    "\4\10\1\156\26\10\1\0\2\10\1\156\11\10\10\0"+
    "\1\10\4\0\4\10\1\230\1\10\1\231\24\10\1\0"+
    "\2\10\1\156\7\10\1\231\1\10\10\0\1\10\4\0"+
    "\4\10\1\231\1\10\1\231\24\10\1\0\12\10\1\231"+
    "\1\10\10\0\1\10\4\0\4\10\1\200\20\10\1\200"+
    "\5\10\1\0\14\10\10\0\1\10\4\0\1\10\1\206"+
    "\1\217\1\10\1\232\4\10\1\206\6\10\1\214\12\10"+
    "\1\0\7\10\1\217\4\10\10\0\1\10\4\0\4\10"+
    "\1\214\13\10\1\214\12\10\1\0\14\10\10\0\1\10"+
    "\4\0\3\10\2\154\25\10\1\154\1\0\14\10\10\0"+
    "\1\10\4\0\2\10\1\233\1\10\1\233\26\10\1\0"+
    "\7\10\1\233\4\10\10\0\1\10\4\0\2\10\1\201"+
    "\1\10\1\201\26\10\1\0\7\10\1\201\4\10\10\0"+
    "\1\10\4\0\2\10\1\215\1\10\1\215\26\10\1\0"+
    "\7\10\1\215\4\10\10\0\1\10\4\0\4\10\1\234"+
    "\13\10\1\234\12\10\1\0\14\10\10\0\1\10\4\0"+
    "\4\10\1\235\3\10\1\226\2\10\1\224\14\10\1\226"+
    "\2\10\1\0\3\10\1\224\10\10\10\0\1\10\4\0"+
    "\4\10\1\236\2\10\1\176\4\10\1\211\10\10\1\205"+
    "\5\10\1\0\6\10\1\211\2\10\1\176\2\10\10\0"+
    "\1\10\4\0\4\10\1\176\2\10\1\176\23\10\1\0"+
    "\11\10\1\176\2\10\10\0\1\10\4\0\4\10\1\205"+
    "\20\10\1\205\5\10\1\0\14\10\10\0\1\10\4\0"+
    "\4\10\1\237\3\10\1\177\3\10\1\204\13\10\1\177"+
    "\2\10\1\0\1\10\1\174\4\10\1\204\5\10\10\0"+
    "\1\10\4\0\4\10\1\177\3\10\1\177\17\10\1\177"+
    "\2\10\1\0\14\10\10\0\1\10\4\0\4\10\1\204"+
    "\7\10\1\204\16\10\1\0\6\10\1\204\5\10\10\0"+
    "\1\10\4\0\4\10\1\174\26\10\1\0\1\10\1\174"+
    "\12\10\10\0\1\10\4\0\4\10\1\240\2\10\1\240"+
    "\23\10\1\0\11\10\1\240\2\10\10\0\1\10\4\0"+
    "\33\10\1\0\4\10\1\241\7\10\10\0\1\10\4\0"+
    "\4\10\1\242\3\10\1\242\17\10\1\242\2\10\1\0"+
    "\14\10\10\0\1\10\4\0\2\10\1\243\1\10\1\244"+
    "\3\10\1\242\1\10\1\245\10\10\1\245\4\10\1\242"+
    "\2\10\1\0\7\10\1\243\4\10\10\0\1\10\4\0"+
    "\2\10\1\243\1\10\1\246\5\10\1\245\10\10\1\245"+
    "\7\10\1\0\7\10\1\243\4\10\10\0\1\10\4\0"+
    "\4\10\1\247\1\10\1\247\24\10\1\0\12\10\1\247"+
    "\1\10\10\0\1\10\4\0\4\10\1\250\1\10\1\247"+
    "\10\10\1\251\11\10\1\251\1\10\1\0\12\10\1\247"+
    "\1\10\10\0\1\10\4\0\4\10\1\251\12\10\1\251"+
    "\11\10\1\251\1\10\1\0\14\10\10\0\1\10\4\0"+
    "\4\10\1\252\5\10\1\252\10\10\1\252\7\10\1\0"+
    "\14\10\10\0\1\10\4\0\33\10\1\0\11\10\1\253"+
    "\2\10\10\0\1\10\4\0\4\10\1\254\12\10\1\254"+
    "\11\10\1\254\1\10\1\0\14\10\10\0\1\10\4\0"+
    "\4\10\1\255\3\10\1\242\6\10\1\256\10\10\1\242"+
    "\1\256\1\10\1\0\14\10\10\0\1\10\4\0\4\10"+
    "\1\257\3\10\1\260\3\10\1\261\13\10\1\260\2\10"+
    "\1\0\6\10\1\261\5\10\10\0\1\10\4\0\1\10"+
    "\1\262\1\263\1\10\1\264\1\265\1\247\1\10\1\266"+
    "\1\262\1\267\1\10\1\270\1\271\1\10\1\272\1\273"+
    "\2\10\1\267\1\10\1\274\2\10\1\266\1\272\1\10"+
    "\1\0\6\10\1\270\1\263\1\271\1\10\1\247\1\10"+
    "\10\0\1\10\4\0\4\10\1\275\1\265\6\10\1\276"+
    "\16\10\1\0\6\10\1\276\5\10\10\0\1\10\4\0"+
    "\2\10\1\277\1\10\1\300\5\10\1\301\4\10\1\251"+
    "\3\10\1\301\5\10\1\251\1\10\1\0\7\10\1\277"+
    "\4\10\10\0\1\10\4\0\4\10\1\302\12\10\1\302"+
    "\11\10\1\302\1\10\1\0\14\10\10\0\1\10\4\0"+
    "\4\10\1\303\7\10\1\303\16\10\1\0\6\10\1\303"+
    "\5\10\10\0\1\10\4\0\1\10\1\165\2\10\1\304"+
    "\4\10\1\165\2\10\1\305\16\10\1\0\6\10\1\305"+
    "\5\10\10\0\1\10\4\0\4\10\1\274\20\10\1\274"+
    "\5\10\1\0\14\10\10\0\1\10\4\0\4\10\1\273"+
    "\13\10\1\273\12\10\1\0\14\10\10\0\1\10\4\0"+
    "\1\10\1\306\2\10\1\307\4\10\1\306\3\10\1\271"+
    "\15\10\1\0\10\10\1\271\3\10\10\0\1\10\4\0"+
    "\4\10\1\310\3\10\1\310\17\10\1\310\2\10\1\0"+
    "\14\10\10\0\1\10\4\0\1\10\1\306\2\10\1\311"+
    "\1\265\3\10\1\306\1\252\1\10\1\276\6\10\1\252"+
    "\7\10\1\0\6\10\1\276\5\10\10\0\1\10\4\0"+
    "\1\10\1\306\2\10\1\306\4\10\1\306\21\10\1\0"+
    "\14\10\10\0\1\10\4\0\4\10\1\312\3\10\1\312"+
    "\17\10\1\312\2\10\1\0\14\10\10\0\1\10\4\0"+
    "\4\10\1\313\3\10\1\312\6\10\1\302\10\10\1\312"+
    "\1\302\1\10\1\0\14\10\10\0\1\10\4\0\4\10"+
    "\1\314\7\10\1\315\1\271\15\10\1\0\6\10\1\315"+
    "\1\10\1\271\3\10\10\0\1\10\4\0\4\10\1\305"+
    "\7\10\1\305\16\10\1\0\6\10\1\305\5\10\10\0"+
    "\1\10\4\0\4\10\1\271\10\10\1\271\15\10\1\0"+
    "\10\10\1\271\3\10\10\0\1\10\4\0\4\10\1\256"+
    "\12\10\1\256\11\10\1\256\1\10\1\0\14\10\10\0"+
    "\1\10\4\0\4\10\1\316\3\10\1\310\1\10\1\301"+
    "\5\10\1\273\2\10\1\301\4\10\1\310\2\10\1\0"+
    "\14\10\10\0\1\10\4\0\4\10\1\301\5\10\1\301"+
    "\10\10\1\301\7\10\1\0\14\10\10\0\1\10\4\0"+
    "\1\10\1\165\2\10\1\165\4\10\1\165\21\10\1\0"+
    "\14\10\10\0\1\10\4\0\2\10\1\277\1\10\1\317"+
    "\12\10\1\251\11\10\1\251\1\10\1\0\7\10\1\277"+
    "\4\10\10\0\1\10\4\0\4\10\1\261\7\10\1\261"+
    "\16\10\1\0\6\10\1\261\5\10\10\0\1\10\4\0"+
    "\4\10\1\320\7\10\1\261\10\10\1\274\5\10\1\0"+
    "\6\10\1\261\5\10\10\0\1\10\4\0\4\10\1\321"+
    "\3\10\1\321\17\10\1\321\2\10\1\0\14\10\10\0"+
    "\1\10\4\0\4\10\1\322\5\10\1\301\5\10\1\273"+
    "\2\10\1\301\7\10\1\0\14\10\10\0\1\10\4\0"+
    "\4\10\1\302\12\10\1\302\5\10\1\274\3\10\1\302"+
    "\1\10\1\0\14\10\10\0\1\10\4\0\4\10\1\242"+
    "\3\10\1\242\17\10\1\323\2\10\1\0\14\10\10\0"+
    "\1\10\4\0\2\10\1\277\1\10\1\277\26\10\1\0"+
    "\7\10\1\277\4\10\10\0\1\10\4\0\4\10\1\276"+
    "\7\10\1\276\16\10\1\0\6\10\1\276\5\10\10\0"+
    "\1\10\4\0\4\10\2\265\11\10\1\254\11\10\1\254"+
    "\1\10\1\0\14\10\10\0\1\10\4\0\4\10\2\265"+
    "\25\10\1\0\14\10\10\0\1\10\4\0\4\10\1\256"+
    "\3\10\1\321\6\10\1\256\10\10\1\321\1\256\1\10"+
    "\1\0\14\10\10\0\1\10\4\0\4\10\1\324\3\10"+
    "\1\312\3\10\1\261\13\10\1\312\2\10\1\0\6\10"+
    "\1\261\5\10\10\0\1\10\4\0\1\10\1\165\2\10"+
    "\1\325\4\10\1\165\3\10\1\271\15\10\1\0\10\10"+
    "\1\271\3\10\10\0\1\10\4\0\4\10\1\310\3\10"+
    "\1\310\3\10\1\305\13\10\1\310\2\10\1\0\6\10"+
    "\1\305\5\10\10\0\1\10\4\0\33\10\1\0\5\10"+
    "\1\326\6\10\10\0\1\10\4\0\4\10\1\327\12\10"+
    "\1\327\11\10\1\327\1\10\1\0\14\10\10\0\1\10"+
    "\4\0\4\10\1\330\20\10\1\330\5\10\1\0\14\10"+
    "\10\0\1\10\4\0\4\10\1\331\10\10\1\332\1\10"+
    "\1\327\5\10\1\330\3\10\1\327\1\10\1\0\10\10"+
    "\1\332\3\10\10\0\1\10\4\0\4\10\1\332\10\10"+
    "\1\332\15\10\1\0\10\10\1\332\3\10\10\0\1\10"+
    "\4\0\4\10\1\333\10\10\1\332\7\10\1\330\5\10"+
    "\1\0\10\10\1\332\3\10\10\0\1\10\4\0\4\10"+
    "\1\334\2\10\1\334\23\10\1\0\11\10\1\334\2\10"+
    "\10\0\1\10\4\0\4\10\1\335\2\10\1\334\16\10"+
    "\1\336\4\10\1\0\11\10\1\334\2\10\10\0\1\10"+
    "\4\0\4\10\1\336\21\10\1\336\4\10\1\0\14\10"+
    "\10\0\1\10\4\0\4\10\1\337\7\10\1\337\16\10"+
    "\1\0\6\10\1\337\5\10\10\0\1\10\4\0\33\10"+
    "\1\0\12\10\1\340\1\10\10\0\1\10\4\0\2\10"+
    "\1\341\1\10\1\342\12\10\1\327\11\10\1\327\1\10"+
    "\1\0\7\10\1\341\4\10\10\0\1\10\4\0\2\10"+
    "\1\341\1\10\1\341\26\10\1\0\7\10\1\341\4\10"+
    "\10\0\1\10\4\0\4\10\1\343\12\10\1\343\11\10"+
    "\1\343\1\10\1\0\14\10\10\0\1\10\4\0\4\10"+
    "\1\344\12\10\1\344\11\10\1\344\1\10\1\0\14\10"+
    "\10\0\1\10\4\0\4\10\1\345\12\10\1\345\11\10"+
    "\1\345\1\10\1\0\14\10\10\0\1\10\4\0\4\10"+
    "\1\346\1\10\1\347\10\10\1\302\11\10\1\302\1\10"+
    "\1\0\12\10\1\347\1\10\10\0\1\10\4\0\4\10"+
    "\1\350\7\10\1\351\10\10\1\330\5\10\1\0\6\10"+
    "\1\351\5\10\10\0\1\10\4\0\2\10\1\352\1\10"+
    "\1\353\1\10\1\347\1\354\1\355\3\10\1\356\1\332"+
    "\1\10\1\357\5\10\1\330\1\336\1\10\1\355\1\357"+
    "\1\10\1\0\6\10\1\356\1\352\1\332\1\354\1\347"+
    "\1\10\10\0\1\10\4\0\4\10\1\360\12\10\1\360"+
    "\11\10\1\360\1\10\1\0\14\10\10\0\1\10\4\0"+
    "\4\10\1\361\2\10\1\362\4\10\1\337\1\332\15\10"+
    "\1\0\6\10\1\337\1\10\1\332\1\362\2\10\10\0"+
    "\1\10\4\0\2\10\1\363\1\10\1\364\12\10\1\365"+
    "\11\10\1\365\1\10\1\0\7\10\1\363\4\10\10\0"+
    "\1\10\4\0\4\10\1\355\3\10\1\355\17\10\1\355"+
    "\2\10\1\0\14\10\10\0\1\10\4\0\2\10\1\341"+
    "\1\10\1\366\21\10\1\336\4\10\1\0\7\10\1\341"+
    "\4\10\10\0\1\10\4\0\4\10\1\367\12\10\1\367"+
    "\11\10\1\367\1\10\1\0\14\10\10\0\1\10\4\0"+
    "\4\10\1\351\7\10\1\351\16\10\1\0\6\10\1\351"+
    "\5\10\10\0\1\10\4\0\4\10\1\370\2\10\1\362"+
    "\4\10\1\351\11\10\1\336\4\10\1\0\6\10\1\351"+
    "\2\10\1\362\2\10\10\0\1\10\4\0\4\10\1\362"+
    "\2\10\1\362\23\10\1\0\11\10\1\362\2\10\10\0"+
    "\1\10\4\0\2\10\1\363\1\10\1\363\26\10\1\0"+
    "\7\10\1\363\4\10\10\0\1\10\4\0\4\10\1\347"+
    "\1\10\1\347\24\10\1\0\12\10\1\347\1\10\10\0"+
    "\1\10\4\0\4\10\1\371\1\10\1\347\1\10\1\355"+
    "\17\10\1\355\2\10\1\0\12\10\1\347\1\10\10\0"+
    "\1\10\4\0\4\10\1\372\1\10\1\347\5\10\1\337"+
    "\2\10\1\367\11\10\1\367\1\10\1\0\6\10\1\337"+
    "\3\10\1\347\1\10\10\0\1\10\4\0\2\10\1\363"+
    "\1\10\1\373\3\10\1\355\17\10\1\355\2\10\1\0"+
    "\7\10\1\363\4\10\10\0\1\10\4\0\4\10\1\374"+
    "\7\10\1\351\11\10\1\336\4\10\1\0\6\10\1\351"+
    "\5\10\10\0\1\10\4\0\4\10\1\327\12\10\1\327"+
    "\11\10\1\375\1\10\1\0\14\10\10\0\1\10\4\0"+
    "\4\10\1\376\3\10\1\355\6\10\1\302\10\10\1\355"+
    "\1\302\1\10\1\0\14\10\10\0\1\10\4\0\33\10"+
    "\1\0\6\10\1\377\5\10\10\0\1\10\4\0\3\10"+
    "\2\u0100\25\10\1\u0100\1\0\14\10\10\0\1\10\4\0"+
    "\4\10\1\u0101\21\10\1\u0101\4\10\1\0\14\10\10\0"+
    "\1\10\4\0\3\10\1\u0100\1\u0101\3\10\1\u0102\15\10"+
    "\1\u0101\1\10\1\u0102\1\10\1\u0100\1\0\14\10\10\0"+
    "\1\10\4\0\4\10\1\u0102\3\10\1\u0102\17\10\1\u0102"+
    "\2\10\1\0\14\10\10\0\1\10\4\0\4\10\1\u0101"+
    "\3\10\1\u0102\15\10\1\u0101\1\10\1\u0102\2\10\1\0"+
    "\14\10\10\0\1\10\4\0\4\10\1\u0103\3\10\1\u0103"+
    "\17\10\1\u0103\2\10\1\0\14\10\10\0\1\10\4\0"+
    "\4\10\1\u0104\3\10\1\u0103\6\10\1\u0105\10\10\1\u0103"+
    "\1\u0105\1\10\1\0\14\10\10\0\1\10\4\0\4\10"+
    "\1\u0105\12\10\1\u0105\11\10\1\u0105\1\10\1\0\14\10"+
    "\10\0\1\10\4\0\4\10\1\u0106\12\10\1\u0106\11\10"+
    "\1\u0106\1\10\1\0\14\10\10\0\1\10\4\0\1\10"+
    "\1\u0107\31\10\1\0\14\10\10\0\1\10\4\0\4\10"+
    "\1\u0108\17\10\1\u0108\6\10\1\0\13\10\1\u0108\10\0"+
    "\1\10\4\0\3\10\1\u0100\1\u0108\17\10\1\u0108\5\10"+
    "\1\u0100\1\0\13\10\1\u0108\10\0\1\10\4\0\4\10"+
    "\1\u0109\7\10\1\u0109\16\10\1\0\6\10\1\u0109\5\10"+
    "\10\0\1\10\4\0\4\10\1\u010a\7\10\1\u010a\16\10"+
    "\1\0\6\10\1\u010a\5\10\10\0\1\10\4\0\4\10"+
    "\1\u0108\10\10\1\u010b\6\10\1\u0108\6\10\1\0\10\10"+
    "\1\u010b\2\10\1\u0108\10\0\1\10\4\0\2\10\1\u010c"+
    "\1\u0100\1\u010d\3\10\1\u010e\3\10\1\u010f\1\u010b\1\10"+
    "\1\u0110\2\10\1\u0111\1\10\1\u0108\1\u0112\1\u0101\1\10"+
    "\1\u010e\1\u0110\1\u0100\1\0\5\10\1\u0111\1\u010f\1\u010c"+
    "\1\u010b\2\10\1\u0108\10\0\1\10\4\0\4\10\1\u0113"+
    "\3\10\1\u0103\14\10\1\u0112\2\10\1\u0103\2\10\1\0"+
    "\14\10\10\0\1\10\4\0\2\10\1\u010c\1\10\1\u010c"+
    "\26\10\1\0\7\10\1\u010c\4\10\10\0\1\10\4\0"+
    "\3\10\1\u0100\1\u0114\7\10\1\u0109\5\10\1\u0111\7\10"+
    "\1\u0100\1\0\5\10\1\u0111\1\u0109\5\10\10\0\1\10"+
    "\4\0\3\10\1\u0100\1\u0115\7\10\1\u0109\15\10\1\u0100"+
    "\1\0\6\10\1\u0109\5\10\10\0\1\10\4\0\4\10"+
    "\1\u0112\3\10\1\u0102\6\10\1\u0106\5\10\1\u0112\2\10"+
    "\1\u0102\1\u0106\1\10\1\0\14\10\10\0\1\10\4\0"+
    "\4\10\1\u0112\20\10\1\u0112\5\10\1\0\14\10\10\0"+
    "\1\10\4\0\4\10\1\u010b\10\10\1\u010b\15\10\1\0"+
    "\10\10\1\u010b\3\10\10\0\1\10\4\0\4\10\1\u0116"+
    "\10\10\1\u010b\4\10\1\u0111\10\10\1\0\5\10\1\u0111"+
    "\2\10\1\u010b\3\10\10\0\1\10\4\0\4\10\1\u0111"+
    "\15\10\1\u0111\10\10\1\0\5\10\1\u0111\6\10\10\0"+
    "\1\10\4\0\4\10\1\u0117\12\10\1\u0105\4\10\1\u0108"+
    "\4\10\1\u0105\1\10\1\0\13\10\1\u0108\10\0\1\10"+
    "\4\0\4\10\1\u0118\12\10\1\u0105\5\10\1\u0112\3\10"+
    "\1\u0105\1\10\1\0\14\10\10\0\1\10\4\0\2\10"+
    "\1\u010c\1\10\1\u0119\7\10\1\u010a\16\10\1\0\6\10"+
    "\1\u010a\1\u010c\4\10\10\0\1\10\4\0\4\10\1\u011a"+
    "\7\10\1\u010a\2\10\1\u0106\2\10\1\u0111\6\10\1\u0106"+
    "\1\10\1\0\5\10\1\u0111\1\u010a\5\10\10\0\1\10"+
    "\4\0\2\10\1\u010c\1\10\1\u011b\10\10\1\u010b\15\10"+
    "\1\0\7\10\1\u010c\1\u010b\3\10\10\0\1\10\4\0"+
    "\3\10\2\u0100\25\10\1\u011c\1\0\14\10\10\0\1\10"+
    "\4\0\1\10\1\u011d\2\10\1\u011d\4\10\1\u011d\21\10"+
    "\1\0\14\10\10\0\1\10\4\0\1\10\1\u011d\2\10"+
    "\1\u011e\2\10\1\u011e\1\10\1\u011d\21\10\1\0\11\10"+
    "\1\u011e\2\10\10\0\1\10\4\0\4\10\1\u011e\2\10"+
    "\1\u011e\23\10\1\0\11\10\1\u011e\2\10\10\0\1\10"+
    "\4\0\33\10\1\0\12\10\1\u011f\1\10\10\0\1\10"+
    "\4\0\2\10\1\u0120\1\10\1\u0120\26\10\1\0\7\10"+
    "\1\u0120\4\10\10\0\1\10\4\0\4\10\1\u0121\12\10"+
    "\1\u0121\11\10\1\u0121\1\10\1\0\14\10\10\0\1\10"+
    "\4\0\4\10\1\u0122\1\10\1\u0122\24\10\1\0\12\10"+
    "\1\u0122\1\10\10\0\1\10\4\0\1\10\1\u011d\1\u0120"+
    "\1\10\1\u0123\1\10\1\u0122\1\u011e\1\10\1\u011d\5\10"+
    "\1\u0121\5\10\1\u0124\3\10\1\u0121\1\10\1\0\7\10"+
    "\1\u0120\1\10\1\u011e\1\u0122\1\10\10\0\1\10\4\0"+
    "\2\10\1\u0120\1\10\1\u0125\12\10\1\u0121\11\10\1\u0121"+
    "\1\10\1\0\7\10\1\u0120\4\10\10\0\1\10\4\0"+
    "\4\10\1\u0124\20\10\1\u0124\5\10\1\0\14\10\10\0"+
    "\1\10\4\0\2\10\1\u0120\1\10\1\u0126\20\10\1\u0124"+
    "\5\10\1\0\7\10\1\u0120\4\10\10\0\1\10\4\0"+
    "\4\10\1\u0127\1\10\1\u0122\10\10\1\u0121\11\10\1\u0121"+
    "\1\10\1\0\12\10\1\u0122\1\10\10\0\1\10\4\0"+
    "\4\10\1\u0124\12\10\1\u0121\5\10\1\u0124\3\10\1\u0121"+
    "\1\10\1\0\14\10\10\0\1\10\4\0\33\10\1\u0128"+
    "\14\10\10\0\1\10\4\0\33\10\1\0\13\10\1\u0129"+
    "\10\0\1\10\4\0\4\10\1\u012a\20\10\1\u012a\5\10"+
    "\1\0\14\10\10\0\1\10\4\0\4\10\1\u012b\20\10"+
    "\1\u012b\5\10\1\0\14\10\10\0\1\10\4\0\4\10"+
    "\1\u012c\20\10\1\u012c\5\10\1\0\14\10\16\0\1\u012d"+
    "\2\0\1\u012d\4\0\1\u012d\46\0\1\10\4\0\30\10"+
    "\1\u012e\2\10\1\0\14\10\10\0\1\10\4\0\4\10"+
    "\1\u012f\12\10\1\u012f\11\10\1\u012f\1\10\1\0\14\10"+
    "\21\0\1\u0130\11\0\1\u0130\10\0\1\u0130\27\0\1\u0131"+
    "\1\u0132\2\u0131\1\0\1\u0131\33\u0132\1\u0131\14\u0132\7\u0131"+
    "\7\0\1\u0133\2\0\1\u0133\4\0\1\u0133\113\0\1\u0134"+
    "\17\0\1\10\4\0\33\10\1\0\4\10\1\u0135\7\10"+
    "\21\0\1\u0136\3\0\1\u0136\17\0\1\u0136\77\0\1\u0137"+
    "\14\0\1\10\4\0\33\10\1\0\7\10\1\u0138\4\10"+
    "\21\0\1\u0139\12\0\1\u0139\11\0\1\u0139\34\0\1\u013a"+
    "\56\0\1\10\4\0\1\10\1\u013b\31\10\1\0\14\10"+
    "\20\0\2\u013c\25\0\1\u013c\55\0\1\u013d\34\0\1\10"+
    "\4\0\23\10\1\u013e\7\10\1\0\14\10\56\0\1\u013f"+
    "\16\0\1\10\4\0\33\10\1\0\5\10\1\u0140\6\10"+
    "\31\0\1\u0141\43\0\1\10\4\0\14\10\1\u0142\16\10"+
    "\1\0\14\10\54\0\1\u0143\20\0\1\10\4\0\33\10"+
    "\1\0\3\10\1\u0144\10\10\56\0\1\u0145\16\0\1\10"+
    "\4\0\33\10\1\0\5\10\1\u0146\6\10\16\0\1\u0147"+
    "\56\0\1\10\4\0\1\10\1\u0148\31\10\1\0\14\10"+
    "\60\0\1\u0149\14\0\1\10\4\0\33\10\1\0\7\10"+
    "\1\u014a\4\10\61\0\1\u014b\13\0\1\10\4\0\33\10"+
    "\1\0\10\10\1\u014c\3\10\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12985];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\1\11\27\1\1\11"+
    "\2\1\4\11\1\1\2\11\1\0\377\1\1\0\4\1"+
    "\1\0\2\1\2\0\1\1\2\0\1\1\2\0\1\1"+
    "\2\0\1\1\1\11\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    int jline = 0;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 53: 
          { jline = 0; lexeme=yytext(); return tk_writeline;
          }
        case 55: break;
        case 37: 
          { jline = 0; lexeme=yytext(); return tk_while;
          }
        case 56: break;
        case 46: 
          { jline = 0; lexeme=yytext(); return tk_public;
          }
        case 57: break;
        case 14: 
          { jline = 0; lexeme=yytext(); return tk_if;
          }
        case 58: break;
        case 22: 
          { jline = 0; lexeme=yytext(); return tk_for;
          }
        case 59: break;
        case 5: 
          { jline = 0; lexeme=yytext(); return tk_Identificador;
          }
        case 60: break;
        case 44: 
          { jline = 0; lexeme=yytext(); return tk_module;
          }
        case 61: break;
        case 48: 
          { jline = 0; lexeme=yytext(); return tk_imports;
          }
        case 62: break;
        case 2: 
          { jline = 0; lexeme=yytext(); return tk_Numero;
          }
        case 63: break;
        case 34: 
          { jline = 0; lexeme=yytext(); return tk_null;
          }
        case 64: break;
        case 28: 
          { jline = 0; lexeme=yytext(); return tk_like;
          }
        case 65: break;
        case 31: 
          { jline = 0; lexeme = yytext(); return tk_opBoolean;
          }
        case 66: break;
        case 1: 
          { jline = 0; return ERROR;
          }
        case 67: break;
        case 12: 
          { jline = 0; lexeme=yytext(); return tk_ParentesisC;
          }
        case 68: break;
        case 36: 
          { jline = 0; lexeme=yytext(); return tk_then;
          }
        case 69: break;
        case 7: 
          { jline = 0; lexeme=yytext(); return tk_opAritmeticos;
          }
        case 70: break;
        case 25: 
          { jline = 0; lexeme=yytext(); return tk_end;
          }
        case 71: break;
        case 51: 
          { jline = 0; lexeme=yytext(); return tk_boolean;
          }
        case 72: break;
        case 38: 
          { jline = 0; lexeme=yytext(); return tk_write;
          }
        case 73: break;
        case 35: 
          { jline = 0; lexeme=yytext(); return tk_read;
          }
        case 74: break;
        case 29: 
          { jline = 0; lexeme=yytext(); return tk_else;
          }
        case 75: break;
        case 9: 
          { jline = 0; lexeme=yytext(); return tk_ampersant;
          }
        case 76: break;
        case 54: 
          { jline = 0; lexeme=yytext(); return tk_lib;
          }
        case 77: break;
        case 27: 
          { jline = 0; lexeme=yytext(); return tk_xor;
          }
        case 78: break;
        case 17: 
          { jline = 0; lexeme=yytext(); return tk_or;
          }
        case 79: break;
        case 49: 
          { jline = 0; lexeme=yytext(); return tk_integer;
          }
        case 80: break;
        case 20: 
          { jline = 0; lexeme=yytext(); return tk_mod;
          }
        case 81: break;
        case 52: 
          { jline = 0; lexeme=yytext(); return tk_function;
          }
        case 82: break;
        case 50: 
          { jline = 0; lexeme=yytext(); return tk_cs;
          }
        case 83: break;
        case 33: 
          { jline = 0; lexeme=yytext(); return tk_next;
          }
        case 84: break;
        case 30: 
          { jline = 0; lexeme=yytext(); return tk_exit;
          }
        case 85: break;
        case 32: 
          { jline = 0; lexeme=yytext(); return tk_loop;
          }
        case 86: break;
        case 21: 
          { jline = 0; lexeme=yytext(); return tk_dim;
          }
        case 87: break;
        case 26: 
          { jline = 0; lexeme=yytext(); return tk_and;
          }
        case 88: break;
        case 23: 
          { jline = 0; lexeme=yytext(); return tk_not;
          }
        case 89: break;
        case 16: 
          { jline = 0; lexeme=yytext(); return tk_do;
          }
        case 90: break;
        case 10: 
          { jline = 0; lexeme=yytext(); return tk_punto;
          }
        case 91: break;
        case 15: 
          { jline = 0; lexeme=yytext(); return tk_as;
          }
        case 92: break;
        case 18: 
          { jline = 0; lexeme=yytext(); return tk_to;
          }
        case 93: break;
        case 40: 
          { jline = 0; lexeme=yytext(); return tk_byval;
          }
        case 94: break;
        case 19: 
          { jline = 0; lexeme=yytext(); return tk_valorString;
          }
        case 95: break;
        case 45: 
          { jline = 0; lexeme=yytext(); return tk_elseif;
          }
        case 96: break;
        case 4: 
          { jline++;
        if(jline == 1){
            return tk_Linea;
        }
          }
        case 97: break;
        case 41: 
          { jline = 0; lexeme=yytext(); return tk_sys;
          }
        case 98: break;
        case 8: 
          { jline = 0; lexeme=yytext(); return tk_Coma;
          }
        case 99: break;
        case 13: 
          { jline = 0; lexeme=yytext(); return tk_comentario;
          }
        case 100: break;
        case 47: 
          { jline = 0; lexeme=yytext(); return tk_return;
          }
        case 101: break;
        case 39: 
          { jline = 0; lexeme=yytext(); return tk_until;
          }
        case 102: break;
        case 24: 
          { jline = 0; lexeme=yytext(); return tk_sub;
          }
        case 103: break;
        case 6: 
          { jline = 0; lexeme = yytext(); return tk_opRelacional;
          }
        case 104: break;
        case 42: 
          { jline = 0; lexeme=yytext(); return tk_String;
          }
        case 105: break;
        case 43: 
          { jline = 0; lexeme=yytext(); return tk_structure;
          }
        case 106: break;
        case 11: 
          { jline = 0; lexeme=yytext(); return tk_ParentesisA;
          }
        case 107: break;
        case 3: 
          { 
          }
        case 108: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
