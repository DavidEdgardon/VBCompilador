/* The following code was generated by JFlex 1.4.3 on 03-10-21 10:50 PM */

package analizadores;
import static analizadores.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 03-10-21 10:50 PM from the specification file
 * <tt>C:/Users/David/Documents/NetBeansProjects/VBCompilador/src/analizadores/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\4\1\0\1\2\23\0\1\2\1\0\1\3\3\0"+
    "\1\56\1\5\1\62\1\63\1\53\1\51\1\55\1\52\1\57\1\54"+
    "\12\1\2\0\1\61\1\41\1\60\2\0\1\30\1\45\1\23\1\26"+
    "\1\25\1\32\1\34\1\42\1\10\1\6\1\44\1\22\1\11\1\33"+
    "\1\14\1\13\1\6\1\15\1\17\1\16\1\20\1\46\1\27\1\43"+
    "\1\24\1\6\4\0\1\6\1\0\1\47\1\21\1\23\1\26\1\37"+
    "\1\32\1\34\1\42\1\10\1\6\1\44\1\50\1\40\1\33\1\14"+
    "\1\13\1\6\1\15\1\7\1\36\1\31\1\6\1\27\1\43\1\35"+
    "\1\6\1\0\1\12\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\3\23\5\1\6\2\5\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\0"+
    "\1\22\3\5\2\23\2\5\1\24\1\5\1\24\1\25"+
    "\1\26\10\5\1\26\1\5\2\27\16\5\2\25\3\5"+
    "\1\24\13\5\1\30\1\31\1\32\6\5\1\33\2\34"+
    "\3\5\1\34\1\5\1\35\1\36\1\5\1\37\2\5"+
    "\1\40\3\5\2\35\1\36\3\5\1\37\6\5\1\40"+
    "\1\5\1\40\7\5\2\37\5\5\1\40\1\5\1\41"+
    "\1\37\1\35\1\36\1\42\3\5\2\43\2\5\1\43"+
    "\2\5\1\44\2\45\2\46\3\5\1\47\1\50\1\51"+
    "\1\5\1\52\1\5\1\47\1\53\1\54\1\50\4\5"+
    "\1\47\2\5\2\52\2\5\1\51\1\50\1\5\1\47"+
    "\2\52\1\51\1\5\1\54\1\46\1\53\15\5\1\55"+
    "\1\56\1\55\1\57\1\5\1\57\2\60\1\5\1\57"+
    "\2\5\1\60\1\57\1\56\2\5\2\55\2\5\1\60"+
    "\3\5\1\60\1\5\1\57\1\61\1\62\1\63\1\64"+
    "\1\5\1\65\1\66\2\5\1\67\1\5\1\63\1\5"+
    "\1\65\1\5\1\70\2\62\1\67\1\66\1\70\1\5"+
    "\1\65\1\67\1\62\1\71\1\5\1\72\1\5\1\71"+
    "\1\73\1\72\1\73\1\72\1\0\1\5\2\74\1\0"+
    "\1\75\4\0\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\64\0\234\0\64\0\320\0\u0104"+
    "\0\u0138\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4"+
    "\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444"+
    "\0\u0478\0\u04ac\0\u04e0\0\u0514\0\64\0\u0548\0\u057c\0\64"+
    "\0\64\0\64\0\64\0\64\0\64\0\64\0\u05b0\0\u05e4"+
    "\0\64\0\64\0\u0618\0\320\0\u064c\0\u0680\0\u06b4\0\u06e8"+
    "\0\u0104\0\u06e8\0\u071c\0\u0104\0\u0750\0\u0784\0\u07b8\0\u07ec"+
    "\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c"+
    "\0\u0104\0\u09c0\0\u09f4\0\u0104\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4"+
    "\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64"+
    "\0\u0c98\0\u0ccc\0\u0ccc\0\u0104\0\u0d00\0\u0d34\0\u0d68\0\u0d9c"+
    "\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08"+
    "\0\u0f3c\0\u0f70\0\u0fa4\0\64\0\64\0\u0618\0\u0fd8\0\u100c"+
    "\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u0104\0\u1144\0\u1144"+
    "\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1040\0\u1248\0\u127c\0\u12b0"+
    "\0\u12e4\0\u1318\0\u1110\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u0104"+
    "\0\u0104\0\u141c\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554"+
    "\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1624\0\u0104\0\u1658\0\u168c"+
    "\0\u16c0\0\u16f4\0\u12b0\0\u1728\0\u175c\0\u100c\0\u0104\0\u1790"+
    "\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8\0\u0104\0\u17c4"+
    "\0\u18fc\0\u1930\0\u0104\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u0104"+
    "\0\u1a34\0\u1a68\0\u1a68\0\u1a9c\0\u1ad0\0\u0104\0\u1b04\0\u1b38"+
    "\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70\0\u0104\0\u1ca4"+
    "\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74\0\u0104\0\u0104\0\u1da8\0\u1da8"+
    "\0\u1ddc\0\u1e10\0\u1e44\0\u0104\0\u1e78\0\u1eac\0\u1eac\0\u0104"+
    "\0\u1ee0\0\u1f14\0\u0104\0\u1f48\0\u1ba0\0\u1ba0\0\u1f7c\0\u1e78"+
    "\0\u1e44\0\u1fb0\0\u1bd4\0\u0104\0\u1e44\0\u1fe4\0\u1b6c\0\u2018"+
    "\0\u204c\0\u2080\0\u20b4\0\u20e8\0\u211c\0\u2150\0\u2184\0\u21b8"+
    "\0\u21ec\0\u2220\0\u2254\0\u2254\0\u0104\0\u2288\0\u2288\0\u0104"+
    "\0\u20b4\0\u0104\0\u22bc\0\u22f0\0\u2324\0\u2358\0\u21b8\0\u238c"+
    "\0\u23c0\0\u23f4\0\u2428\0\u245c\0\u2490\0\u24c4\0\u2490\0\u24f8"+
    "\0\u252c\0\u2560\0\u2594\0\u2184\0\u25c8\0\u2358\0\u0104\0\u0104"+
    "\0\u0104\0\u0104\0\u25fc\0\u0104\0\u0104\0\u2630\0\u2664\0\u0104"+
    "\0\u2698\0\u26cc\0\u2700\0\u25fc\0\u2734\0\u0104\0\u2768\0\u2630"+
    "\0\u2734\0\u25fc\0\u25fc\0\u279c\0\u27d0\0\u2698\0\u2804\0\u0104"+
    "\0\u2838\0\u0104\0\u286c\0\u28a0\0\u0104\0\u2838\0\u2838\0\u286c"+
    "\0\u28d4\0\u2908\0\u0104\0\u2908\0\u293c\0\u0104\0\u2970\0\u29a4"+
    "\0\u29d8\0\u2a0c\0\64";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\10\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\2\10\1\20\1\26\1\13"+
    "\1\35\1\10\1\36\1\10\1\37\1\10\1\31\1\24"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\65\0\1\3\62\0\4\53\1\0"+
    "\57\53\4\54\1\0\57\54\1\0\1\10\4\0\33\10"+
    "\1\0\7\10\14\0\1\10\4\0\4\10\1\55\3\10"+
    "\1\56\5\10\1\57\10\10\1\57\1\56\2\10\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\1\60\17\10\1\61"+
    "\1\62\5\10\1\0\7\10\14\0\1\10\4\0\4\10"+
    "\1\63\1\10\1\63\24\10\1\0\7\10\14\0\1\10"+
    "\4\0\1\10\1\64\1\65\1\10\1\66\1\10\1\67"+
    "\1\70\1\56\1\64\1\71\1\10\1\72\1\10\1\57"+
    "\1\73\2\10\1\74\1\71\1\61\1\75\1\10\1\57"+
    "\1\56\1\73\1\10\1\0\1\76\1\77\3\10\1\74"+
    "\1\72\14\0\1\10\4\0\4\10\1\100\5\10\1\100"+
    "\10\10\1\100\7\10\1\0\7\10\14\0\1\10\4\0"+
    "\4\10\1\101\2\10\1\101\23\10\1\0\7\10\14\0"+
    "\1\10\4\0\4\10\1\102\12\10\1\102\11\10\1\102"+
    "\1\10\1\0\7\10\14\0\1\10\4\0\4\10\1\103"+
    "\1\10\1\104\1\105\23\10\1\0\1\106\6\10\14\0"+
    "\1\10\4\0\4\10\1\107\3\10\1\56\1\10\1\110"+
    "\3\10\1\57\4\10\1\110\3\10\1\111\1\56\2\10"+
    "\1\0\7\10\14\0\1\10\4\0\4\10\1\112\20\10"+
    "\1\112\5\10\1\0\7\10\14\0\1\10\4\0\4\10"+
    "\1\113\1\10\1\113\24\10\1\0\7\10\14\0\1\10"+
    "\4\0\2\10\1\114\1\10\1\115\1\10\1\116\24\10"+
    "\1\0\7\10\14\0\1\10\4\0\4\10\1\117\1\10"+
    "\1\117\24\10\1\0\7\10\14\0\1\10\4\0\4\10"+
    "\1\120\7\10\1\72\10\10\1\121\5\10\1\0\1\10"+
    "\1\77\4\10\1\72\14\0\1\10\4\0\2\10\1\122"+
    "\1\10\1\123\1\10\1\124\24\10\1\0\7\10\14\0"+
    "\1\10\4\0\4\10\1\125\2\10\1\126\23\10\1\0"+
    "\1\127\6\10\14\0\1\10\4\0\1\10\1\64\2\10"+
    "\1\130\4\10\1\64\13\10\1\131\5\10\1\0\7\10"+
    "\14\0\1\10\4\0\4\10\1\132\5\10\1\110\10\10"+
    "\1\110\1\10\1\112\5\10\1\0\7\10\14\0\1\10"+
    "\4\0\4\10\1\133\1\10\1\134\3\10\1\135\7\10"+
    "\1\74\1\135\7\10\1\0\5\10\1\74\1\10\14\0"+
    "\1\10\4\0\4\10\1\136\1\10\1\137\3\10\1\140"+
    "\4\10\1\141\3\10\1\140\5\10\1\141\1\10\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\1\142\1\10\1\142"+
    "\24\10\1\0\7\10\14\0\1\10\4\0\4\10\1\113"+
    "\1\10\1\113\20\10\1\143\3\10\1\0\7\10\54\0"+
    "\1\144\63\0\1\145\22\0\3\53\1\146\1\0\57\53"+
    "\1\0\1\10\4\0\1\10\1\147\2\10\1\150\2\10"+
    "\1\151\1\10\1\147\5\10\1\152\11\10\1\152\1\10"+
    "\1\0\7\10\14\0\1\10\4\0\4\10\1\153\2\10"+
    "\1\151\7\10\1\152\11\10\1\152\1\10\1\0\7\10"+
    "\14\0\1\10\4\0\1\10\1\147\2\10\1\147\4\10"+
    "\1\147\21\10\1\0\7\10\14\0\1\10\4\0\4\10"+
    "\1\154\3\10\1\154\17\10\1\154\2\10\1\0\7\10"+
    "\14\0\1\10\4\0\4\10\1\155\13\10\1\155\12\10"+
    "\1\0\7\10\14\0\1\10\4\0\3\10\1\156\1\157"+
    "\25\10\1\156\1\0\2\10\1\160\4\10\14\0\1\10"+
    "\4\0\1\10\1\161\1\162\1\156\1\163\1\10\1\164"+
    "\1\165\1\166\1\161\1\167\1\170\1\171\2\10\1\172"+
    "\1\173\1\10\1\174\1\167\1\10\1\175\2\10\1\166"+
    "\1\172\1\156\1\0\1\10\1\176\1\160\1\170\1\10"+
    "\1\174\1\171\14\0\1\10\4\0\4\10\1\177\1\10"+
    "\1\164\1\200\1\201\7\10\1\155\4\10\1\202\2\10"+
    "\1\201\2\10\1\0\7\10\14\0\1\10\4\0\2\10"+
    "\1\203\1\10\1\204\5\10\1\167\10\10\1\167\7\10"+
    "\1\0\7\10\14\0\1\10\4\0\4\10\1\205\6\10"+
    "\1\170\1\206\10\10\1\207\5\10\1\0\3\10\1\170"+
    "\2\10\1\206\14\0\1\10\4\0\1\10\1\210\2\10"+
    "\1\210\4\10\1\210\21\10\1\0\7\10\14\0\1\10"+
    "\4\0\4\10\1\211\3\10\1\212\11\10\1\174\5\10"+
    "\1\212\2\10\1\0\1\10\1\176\3\10\1\174\1\10"+
    "\14\0\1\10\4\0\4\10\1\213\7\10\1\213\16\10"+
    "\1\0\6\10\1\213\14\0\1\10\4\0\4\10\1\214"+
    "\3\10\1\215\7\10\1\216\7\10\1\215\2\10\1\0"+
    "\7\10\14\0\1\10\4\0\2\10\1\217\1\10\1\220"+
    "\12\10\1\221\11\10\1\221\1\10\1\0\7\10\14\0"+
    "\1\10\4\0\2\10\1\222\1\10\1\222\26\10\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\1\223\6\10\1\223"+
    "\17\10\1\0\3\10\1\223\3\10\14\0\1\10\4\0"+
    "\4\10\1\224\3\10\1\212\11\10\1\174\5\10\1\212"+
    "\2\10\1\0\5\10\1\174\1\10\14\0\1\10\4\0"+
    "\4\10\1\225\5\10\1\167\4\10\1\221\3\10\1\167"+
    "\5\10\1\221\1\10\1\0\7\10\14\0\1\10\4\0"+
    "\4\10\1\167\5\10\1\167\10\10\1\167\7\10\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\1\221\12\10\1\221"+
    "\11\10\1\221\1\10\1\0\7\10\14\0\1\10\4\0"+
    "\1\10\1\147\2\10\1\226\2\10\1\151\1\10\1\147"+
    "\1\10\1\227\3\10\1\152\11\10\1\152\1\10\1\0"+
    "\3\10\1\227\3\10\14\0\1\10\4\0\4\10\1\227"+
    "\6\10\1\227\17\10\1\0\3\10\1\227\3\10\14\0"+
    "\1\10\4\0\1\10\1\230\2\10\1\147\4\10\1\147"+
    "\21\10\1\0\7\10\14\0\1\10\4\0\4\10\1\231"+
    "\3\10\1\231\17\10\1\231\2\10\1\0\7\10\14\0"+
    "\1\10\4\0\4\10\1\232\1\10\1\232\24\10\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\1\160\26\10\1\0"+
    "\2\10\1\160\4\10\14\0\1\10\4\0\4\10\1\233"+
    "\1\10\1\234\24\10\1\0\2\10\1\160\4\10\14\0"+
    "\1\10\4\0\4\10\1\234\1\10\1\234\24\10\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\1\202\20\10\1\202"+
    "\5\10\1\0\7\10\14\0\1\10\4\0\1\10\1\210"+
    "\1\222\1\10\1\235\4\10\1\210\6\10\1\216\12\10"+
    "\1\0\7\10\14\0\1\10\4\0\4\10\1\216\13\10"+
    "\1\216\12\10\1\0\7\10\14\0\1\10\4\0\3\10"+
    "\2\156\25\10\1\156\1\0\7\10\14\0\1\10\4\0"+
    "\2\10\1\236\1\10\1\236\26\10\1\0\7\10\14\0"+
    "\1\10\4\0\2\10\1\203\1\10\1\203\26\10\1\0"+
    "\7\10\14\0\1\10\4\0\2\10\1\217\1\10\1\217"+
    "\26\10\1\0\7\10\14\0\1\10\4\0\4\10\1\237"+
    "\13\10\1\237\12\10\1\0\7\10\14\0\1\10\4\0"+
    "\4\10\1\240\3\10\1\231\2\10\1\227\14\10\1\231"+
    "\2\10\1\0\3\10\1\227\3\10\14\0\1\10\4\0"+
    "\4\10\1\241\2\10\1\200\4\10\1\213\10\10\1\207"+
    "\5\10\1\0\6\10\1\213\14\0\1\10\4\0\4\10"+
    "\1\200\2\10\1\200\23\10\1\0\7\10\14\0\1\10"+
    "\4\0\4\10\1\207\20\10\1\207\5\10\1\0\7\10"+
    "\14\0\1\10\4\0\4\10\1\242\3\10\1\201\3\10"+
    "\1\206\13\10\1\201\2\10\1\0\1\10\1\176\4\10"+
    "\1\206\14\0\1\10\4\0\4\10\1\201\3\10\1\201"+
    "\17\10\1\201\2\10\1\0\7\10\14\0\1\10\4\0"+
    "\4\10\1\206\7\10\1\206\16\10\1\0\6\10\1\206"+
    "\14\0\1\10\4\0\4\10\1\176\26\10\1\0\1\10"+
    "\1\176\5\10\14\0\1\10\4\0\4\10\1\243\2\10"+
    "\1\243\23\10\1\0\7\10\14\0\1\10\4\0\33\10"+
    "\1\0\4\10\1\244\2\10\14\0\1\10\4\0\4\10"+
    "\1\245\3\10\1\245\17\10\1\245\2\10\1\0\7\10"+
    "\14\0\1\10\4\0\2\10\1\246\1\10\1\247\1\250"+
    "\2\10\1\245\1\10\1\251\10\10\1\251\4\10\1\245"+
    "\2\10\1\0\7\10\14\0\1\10\4\0\2\10\1\246"+
    "\1\10\1\252\5\10\1\251\10\10\1\251\7\10\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\2\250\25\10\1\0"+
    "\7\10\14\0\1\10\4\0\2\10\1\246\1\10\1\253"+
    "\1\250\4\10\1\251\10\10\1\251\7\10\1\0\7\10"+
    "\14\0\1\10\4\0\4\10\1\254\12\10\1\254\11\10"+
    "\1\254\1\10\1\0\7\10\14\0\1\10\4\0\4\10"+
    "\1\255\5\10\1\255\10\10\1\255\7\10\1\0\7\10"+
    "\14\0\1\10\4\0\4\10\1\256\12\10\1\256\11\10"+
    "\1\256\1\10\1\0\7\10\14\0\1\10\4\0\4\10"+
    "\1\257\3\10\1\245\6\10\1\260\10\10\1\245\1\260"+
    "\1\10\1\0\7\10\14\0\1\10\4\0\4\10\1\261"+
    "\3\10\1\262\3\10\1\263\13\10\1\262\2\10\1\0"+
    "\6\10\1\263\14\0\1\10\4\0\1\10\1\264\1\265"+
    "\1\10\1\266\1\267\2\10\1\270\1\264\1\271\1\10"+
    "\1\272\1\273\1\10\1\274\1\275\2\10\1\271\1\10"+
    "\1\276\2\10\1\270\1\274\1\10\1\0\6\10\1\272"+
    "\14\0\1\10\4\0\4\10\1\277\1\267\6\10\1\300"+
    "\16\10\1\0\6\10\1\300\14\0\1\10\4\0\2\10"+
    "\1\301\1\10\1\302\5\10\1\303\4\10\1\254\3\10"+
    "\1\303\5\10\1\254\1\10\1\0\7\10\14\0\1\10"+
    "\4\0\4\10\1\304\12\10\1\304\11\10\1\304\1\10"+
    "\1\0\7\10\14\0\1\10\4\0\4\10\1\305\7\10"+
    "\1\305\16\10\1\0\6\10\1\305\14\0\1\10\4\0"+
    "\1\10\1\306\2\10\1\307\4\10\1\306\2\10\1\310"+
    "\16\10\1\0\6\10\1\310\14\0\1\10\4\0\4\10"+
    "\1\276\1\250\17\10\1\276\5\10\1\0\7\10\14\0"+
    "\1\10\4\0\4\10\1\275\13\10\1\275\12\10\1\0"+
    "\7\10\14\0\1\10\4\0\1\10\1\311\2\10\1\312"+
    "\4\10\1\311\3\10\1\273\15\10\1\0\7\10\14\0"+
    "\1\10\4\0\4\10\1\313\3\10\1\313\17\10\1\313"+
    "\2\10\1\0\7\10\14\0\1\10\4\0\1\10\1\311"+
    "\2\10\1\314\1\267\3\10\1\311\1\255\1\10\1\300"+
    "\6\10\1\255\7\10\1\0\6\10\1\300\14\0\1\10"+
    "\4\0\1\10\1\311\2\10\1\311\4\10\1\311\21\10"+
    "\1\0\7\10\14\0\1\10\4\0\4\10\1\315\3\10"+
    "\1\315\17\10\1\315\2\10\1\0\7\10\14\0\1\10"+
    "\4\0\4\10\1\316\3\10\1\315\6\10\1\304\10\10"+
    "\1\315\1\304\1\10\1\0\7\10\14\0\1\10\4\0"+
    "\4\10\1\317\7\10\1\320\1\273\15\10\1\0\6\10"+
    "\1\320\14\0\1\10\4\0\4\10\1\310\7\10\1\310"+
    "\16\10\1\0\6\10\1\310\14\0\1\10\4\0\4\10"+
    "\1\273\10\10\1\273\15\10\1\0\7\10\14\0\1\10"+
    "\4\0\4\10\1\260\12\10\1\260\11\10\1\260\1\10"+
    "\1\0\7\10\14\0\1\10\4\0\4\10\1\321\3\10"+
    "\1\313\1\10\1\303\5\10\1\275\2\10\1\303\4\10"+
    "\1\313\2\10\1\0\7\10\14\0\1\10\4\0\4\10"+
    "\1\303\5\10\1\303\10\10\1\303\7\10\1\0\7\10"+
    "\14\0\1\10\4\0\1\10\1\306\2\10\1\306\4\10"+
    "\1\306\21\10\1\0\7\10\14\0\1\10\4\0\2\10"+
    "\1\301\1\10\1\322\12\10\1\254\11\10\1\254\1\10"+
    "\1\0\7\10\14\0\1\10\4\0\4\10\1\263\7\10"+
    "\1\263\16\10\1\0\6\10\1\263\14\0\1\10\4\0"+
    "\4\10\1\323\7\10\1\263\10\10\1\276\5\10\1\0"+
    "\6\10\1\263\14\0\1\10\4\0\4\10\1\276\20\10"+
    "\1\276\5\10\1\0\7\10\14\0\1\10\4\0\4\10"+
    "\1\324\3\10\1\324\17\10\1\324\2\10\1\0\7\10"+
    "\14\0\1\10\4\0\4\10\1\325\5\10\1\303\5\10"+
    "\1\275\2\10\1\303\7\10\1\0\7\10\14\0\1\10"+
    "\4\0\4\10\1\304\12\10\1\304\5\10\1\276\3\10"+
    "\1\304\1\10\1\0\7\10\14\0\1\10\4\0\4\10"+
    "\1\245\3\10\1\245\17\10\1\326\2\10\1\0\7\10"+
    "\14\0\1\10\4\0\2\10\1\301\1\10\1\301\26\10"+
    "\1\0\7\10\14\0\1\10\4\0\4\10\1\300\7\10"+
    "\1\300\16\10\1\0\6\10\1\300\14\0\1\10\4\0"+
    "\4\10\2\267\11\10\1\256\11\10\1\256\1\10\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\2\267\25\10\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\1\260\3\10\1\324"+
    "\6\10\1\260\10\10\1\324\1\260\1\10\1\0\7\10"+
    "\14\0\1\10\4\0\4\10\1\327\3\10\1\315\3\10"+
    "\1\263\13\10\1\315\2\10\1\0\6\10\1\263\14\0"+
    "\1\10\4\0\1\10\1\306\2\10\1\330\4\10\1\306"+
    "\3\10\1\273\15\10\1\0\7\10\14\0\1\10\4\0"+
    "\4\10\1\313\3\10\1\313\3\10\1\310\13\10\1\313"+
    "\2\10\1\0\6\10\1\310\14\0\1\10\4\0\33\10"+
    "\1\0\5\10\1\331\1\10\14\0\1\10\4\0\4\10"+
    "\1\332\12\10\1\332\11\10\1\332\1\10\1\0\7\10"+
    "\14\0\1\10\4\0\4\10\1\333\20\10\1\333\5\10"+
    "\1\0\7\10\14\0\1\10\4\0\4\10\1\334\10\10"+
    "\1\335\1\10\1\332\5\10\1\333\3\10\1\332\1\10"+
    "\1\0\7\10\14\0\1\10\4\0\4\10\1\335\10\10"+
    "\1\335\15\10\1\0\7\10\14\0\1\10\4\0\4\10"+
    "\1\336\10\10\1\335\7\10\1\333\5\10\1\0\7\10"+
    "\14\0\1\10\4\0\4\10\1\337\21\10\1\337\4\10"+
    "\1\0\7\10\14\0\1\10\4\0\4\10\1\340\7\10"+
    "\1\340\16\10\1\0\6\10\1\340\14\0\1\10\4\0"+
    "\2\10\1\341\1\10\1\342\12\10\1\332\11\10\1\332"+
    "\1\10\1\0\7\10\14\0\1\10\4\0\2\10\1\341"+
    "\1\10\1\341\26\10\1\0\7\10\14\0\1\10\4\0"+
    "\4\10\1\343\12\10\1\343\11\10\1\343\1\10\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\1\344\12\10\1\344"+
    "\11\10\1\344\1\10\1\0\7\10\14\0\1\10\4\0"+
    "\4\10\1\345\12\10\1\345\11\10\1\345\1\10\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\1\346\1\10\1\347"+
    "\10\10\1\350\11\10\1\350\1\10\1\0\7\10\14\0"+
    "\1\10\4\0\4\10\1\351\7\10\1\352\10\10\1\333"+
    "\5\10\1\0\6\10\1\352\14\0\1\10\4\0\2\10"+
    "\1\353\1\10\1\354\1\10\1\347\1\355\1\356\3\10"+
    "\1\357\1\335\1\10\1\360\5\10\1\333\1\337\1\10"+
    "\1\356\1\360\1\10\1\0\6\10\1\357\14\0\1\10"+
    "\4\0\4\10\1\361\12\10\1\361\11\10\1\361\1\10"+
    "\1\0\7\10\14\0\1\10\4\0\4\10\1\362\2\10"+
    "\1\355\4\10\1\340\1\335\15\10\1\0\6\10\1\340"+
    "\14\0\1\10\4\0\2\10\1\363\1\10\1\364\12\10"+
    "\1\365\11\10\1\365\1\10\1\0\7\10\14\0\1\10"+
    "\4\0\4\10\1\356\3\10\1\356\17\10\1\356\2\10"+
    "\1\0\7\10\14\0\1\10\4\0\2\10\1\341\1\10"+
    "\1\366\21\10\1\337\4\10\1\0\7\10\14\0\1\10"+
    "\4\0\4\10\1\367\12\10\1\367\11\10\1\367\1\10"+
    "\1\0\7\10\14\0\1\10\4\0\4\10\1\352\7\10"+
    "\1\352\16\10\1\0\6\10\1\352\14\0\1\10\4\0"+
    "\4\10\1\370\2\10\1\355\4\10\1\352\11\10\1\337"+
    "\4\10\1\0\6\10\1\352\14\0\1\10\4\0\4\10"+
    "\1\355\2\10\1\355\23\10\1\0\7\10\14\0\1\10"+
    "\4\0\2\10\1\363\1\10\1\363\26\10\1\0\7\10"+
    "\14\0\1\10\4\0\4\10\1\350\12\10\1\350\11\10"+
    "\1\350\1\10\1\0\7\10\14\0\1\10\4\0\4\10"+
    "\1\347\1\10\1\347\24\10\1\0\7\10\14\0\1\10"+
    "\4\0\4\10\1\371\1\10\1\347\1\10\1\356\17\10"+
    "\1\356\2\10\1\0\7\10\14\0\1\10\4\0\4\10"+
    "\1\372\1\10\1\347\5\10\1\340\2\10\1\367\11\10"+
    "\1\367\1\10\1\0\6\10\1\340\14\0\1\10\4\0"+
    "\2\10\1\363\1\10\1\373\3\10\1\356\17\10\1\356"+
    "\2\10\1\0\7\10\14\0\1\10\4\0\4\10\1\374"+
    "\7\10\1\352\11\10\1\337\4\10\1\0\6\10\1\352"+
    "\14\0\1\10\4\0\4\10\1\332\12\10\1\332\11\10"+
    "\1\375\1\10\1\0\7\10\14\0\1\10\4\0\4\10"+
    "\1\376\3\10\1\356\6\10\1\350\10\10\1\356\1\350"+
    "\1\10\1\0\7\10\14\0\1\10\4\0\33\10\1\0"+
    "\6\10\1\377\14\0\1\10\4\0\3\10\2\u0100\25\10"+
    "\1\u0100\1\0\7\10\14\0\1\10\4\0\4\10\1\u0101"+
    "\21\10\1\u0101\4\10\1\0\7\10\14\0\1\10\4\0"+
    "\3\10\1\u0100\1\u0101\3\10\1\u0102\15\10\1\u0101\1\10"+
    "\1\u0102\1\10\1\u0100\1\0\7\10\14\0\1\10\4\0"+
    "\4\10\1\u0102\3\10\1\u0102\17\10\1\u0102\2\10\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\1\u0101\3\10\1\u0102"+
    "\15\10\1\u0101\1\10\1\u0102\2\10\1\0\7\10\14\0"+
    "\1\10\4\0\4\10\1\u0103\12\10\1\u0103\11\10\1\u0103"+
    "\1\10\1\0\7\10\14\0\1\10\4\0\4\10\1\u0104"+
    "\12\10\1\u0104\11\10\1\u0104\1\10\1\0\7\10\14\0"+
    "\1\10\4\0\4\10\1\u0105\17\10\1\u0105\6\10\1\0"+
    "\7\10\14\0\1\10\4\0\3\10\1\u0100\1\u0105\17\10"+
    "\1\u0105\5\10\1\u0100\1\0\7\10\14\0\1\10\4\0"+
    "\4\10\1\u0106\7\10\1\u0106\16\10\1\0\6\10\1\u0106"+
    "\14\0\1\10\4\0\4\10\1\u0107\7\10\1\u0107\16\10"+
    "\1\0\6\10\1\u0107\14\0\1\10\4\0\4\10\1\u0105"+
    "\10\10\1\u0108\6\10\1\u0105\6\10\1\0\7\10\14\0"+
    "\1\10\4\0\2\10\1\u0109\1\u0100\1\u010a\3\10\1\u0102"+
    "\3\10\1\u010b\1\u0108\1\10\1\u010c\2\10\1\u010d\1\10"+
    "\1\u0105\1\u010e\1\u0101\1\10\1\u0102\1\u010c\1\u0100\1\0"+
    "\5\10\1\u010d\1\u010b\14\0\1\10\4\0\4\10\1\u010e"+
    "\20\10\1\u010e\5\10\1\0\7\10\14\0\1\10\4\0"+
    "\2\10\1\u0109\1\10\1\u0109\26\10\1\0\7\10\14\0"+
    "\1\10\4\0\3\10\1\u0100\1\u010f\7\10\1\u0106\5\10"+
    "\1\u010d\7\10\1\u0100\1\0\5\10\1\u010d\1\u0106\14\0"+
    "\1\10\4\0\3\10\1\u0100\1\u0110\7\10\1\u0106\15\10"+
    "\1\u0100\1\0\6\10\1\u0106\14\0\1\10\4\0\4\10"+
    "\1\u010e\3\10\1\u0102\6\10\1\u0104\5\10\1\u010e\2\10"+
    "\1\u0102\1\u0104\1\10\1\0\7\10\14\0\1\10\4\0"+
    "\4\10\1\u0108\10\10\1\u0108\15\10\1\0\7\10\14\0"+
    "\1\10\4\0\4\10\1\u0111\10\10\1\u0108\4\10\1\u010d"+
    "\10\10\1\0\5\10\1\u010d\1\10\14\0\1\10\4\0"+
    "\4\10\1\u010d\15\10\1\u010d\10\10\1\0\5\10\1\u010d"+
    "\1\10\14\0\1\10\4\0\4\10\1\u0112\12\10\1\u0103"+
    "\4\10\1\u0105\4\10\1\u0103\1\10\1\0\7\10\14\0"+
    "\1\10\4\0\4\10\1\u0113\12\10\1\u0103\5\10\1\u010e"+
    "\3\10\1\u0103\1\10\1\0\7\10\14\0\1\10\4\0"+
    "\2\10\1\u0109\1\10\1\u0114\7\10\1\u0107\16\10\1\0"+
    "\6\10\1\u0107\14\0\1\10\4\0\4\10\1\u0115\7\10"+
    "\1\u0107\2\10\1\u0104\2\10\1\u010d\6\10\1\u0104\1\10"+
    "\1\0\5\10\1\u010d\1\u0107\14\0\1\10\4\0\2\10"+
    "\1\u0109\1\10\1\u0116\10\10\1\u0108\15\10\1\0\7\10"+
    "\14\0\1\10\4\0\3\10\2\u0100\25\10\1\u0117\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\1\u0118\2\10\1\u0118"+
    "\23\10\1\0\7\10\14\0\1\10\4\0\2\10\1\u0119"+
    "\1\10\1\u0119\26\10\1\0\7\10\14\0\1\10\4\0"+
    "\4\10\1\u011a\12\10\1\u011a\11\10\1\u011a\1\10\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\1\u011b\1\10\1\u011b"+
    "\24\10\1\0\7\10\14\0\1\10\4\0\2\10\1\u0119"+
    "\1\10\1\u011c\1\10\1\u011b\1\u0118\7\10\1\u011a\5\10"+
    "\1\u011d\3\10\1\u011a\1\10\1\0\7\10\14\0\1\10"+
    "\4\0\2\10\1\u0119\1\10\1\u011e\12\10\1\u011a\11\10"+
    "\1\u011a\1\10\1\0\7\10\14\0\1\10\4\0\4\10"+
    "\1\u011d\20\10\1\u011d\5\10\1\0\7\10\14\0\1\10"+
    "\4\0\2\10\1\u0119\1\10\1\u011f\20\10\1\u011d\5\10"+
    "\1\0\7\10\14\0\1\10\4\0\4\10\1\u0120\1\10"+
    "\1\u011b\10\10\1\u011a\11\10\1\u011a\1\10\1\0\7\10"+
    "\14\0\1\10\4\0\4\10\1\u011d\12\10\1\u011a\5\10"+
    "\1\u011d\3\10\1\u011a\1\10\1\0\7\10\14\0\1\10"+
    "\4\0\33\10\1\u0121\7\10\14\0\1\10\4\0\4\10"+
    "\1\u0122\20\10\1\u0122\5\10\1\0\7\10\14\0\1\10"+
    "\4\0\4\10\1\u0123\20\10\1\u0123\5\10\1\0\7\10"+
    "\14\0\1\10\4\0\4\10\1\u0124\20\10\1\u0124\5\10"+
    "\1\0\7\10\22\0\1\u0125\2\0\1\u0125\4\0\1\u0125"+
    "\45\0\1\10\4\0\4\10\1\u0126\12\10\1\u0126\11\10"+
    "\1\u0126\1\10\1\0\7\10\25\0\1\u0127\11\0\1\u0127"+
    "\10\0\1\u0127\35\0\1\u0128\2\0\1\u0128\4\0\1\u0128"+
    "\56\0\1\u0129\3\0\1\u0129\17\0\1\u0129\37\0\1\u012a"+
    "\12\0\1\u012a\11\0\1\u012a\35\0\2\u012b\25\0\1\u012b"+
    "\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10816];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\1\11\26\1\1\11"+
    "\2\1\7\11\2\1\2\11\1\0\70\1\2\11\273\1"+
    "\1\0\3\1\1\0\1\1\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    int jline = 0;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 61: 
          { jline = 0; lexeme=yytext(); return tk_writeline;
          }
        case 62: break;
        case 7: 
          { jline = 0; lexeme=yytext(); return tk_Suma;
          }
        case 63: break;
        case 45: 
          { jline = 0; lexeme=yytext(); return tk_while;
          }
        case 64: break;
        case 55: 
          { jline = 0; lexeme=yytext(); return tk_public;
          }
        case 65: break;
        case 19: 
          { jline = 0; lexeme=yytext(); return tk_if;
          }
        case 66: break;
        case 29: 
          { jline = 0; lexeme=yytext(); return tk_for;
          }
        case 67: break;
        case 5: 
          { jline = 0; lexeme=yytext(); return tk_Identificador;
          }
        case 68: break;
        case 53: 
          { jline = 0; lexeme=yytext(); return tk_module;
          }
        case 69: break;
        case 25: 
          { jline = 0; lexeme = yytext(); return tk_menorigual;
          }
        case 70: break;
        case 9: 
          { jline = 0; lexeme=yytext(); return tk_Multiplicacion;
          }
        case 71: break;
        case 2: 
          { jline = 0; lexeme=yytext(); return tk_Numero;
          }
        case 72: break;
        case 42: 
          { jline = 0; lexeme=yytext(); return tk_null;
          }
        case 73: break;
        case 36: 
          { jline = 0; lexeme=yytext(); return tk_like;
          }
        case 74: break;
        case 14: 
          { jline = 0; lexeme = yytext(); return tk_mayorque;
          }
        case 75: break;
        case 8: 
          { jline = 0; lexeme=yytext(); return tk_Resta;
          }
        case 76: break;
        case 1: 
          { jline = 0; return ERROR;
          }
        case 77: break;
        case 17: 
          { jline = 0; lexeme=yytext(); return tk_ParentesisC;
          }
        case 78: break;
        case 44: 
          { jline = 0; lexeme=yytext(); return tk_then;
          }
        case 79: break;
        case 32: 
          { jline = 0; lexeme=yytext(); return tk_end;
          }
        case 80: break;
        case 59: 
          { jline = 0; lexeme=yytext(); return tk_boolean;
          }
        case 81: break;
        case 46: 
          { jline = 0; lexeme=yytext(); return tk_write;
          }
        case 82: break;
        case 43: 
          { jline = 0; lexeme=yytext(); return tk_read;
          }
        case 83: break;
        case 37: 
          { jline = 0; lexeme=yytext(); return tk_else;
          }
        case 84: break;
        case 12: 
          { jline = 0; lexeme=yytext(); return tk_ampersant;
          }
        case 85: break;
        case 34: 
          { jline = 0; lexeme=yytext(); return tk_xor;
          }
        case 86: break;
        case 22: 
          { jline = 0; lexeme=yytext(); return tk_or;
          }
        case 87: break;
        case 6: 
          { jline = 0; lexeme=yytext(); return tk_Igual;
          }
        case 88: break;
        case 57: 
          { jline = 0; lexeme=yytext(); return tk_integer;
          }
        case 89: break;
        case 15: 
          { jline = 0; lexeme = yytext(); return tk_menorque;
          }
        case 90: break;
        case 10: 
          { jline = 0; lexeme=yytext(); return tk_Division;
          }
        case 91: break;
        case 27: 
          { jline = 0; lexeme=yytext(); return tk_mod;
          }
        case 92: break;
        case 60: 
          { jline = 0; lexeme=yytext(); return tk_function;
          }
        case 93: break;
        case 58: 
          { jline = 0; lexeme=yytext(); return tk_cs;
          }
        case 94: break;
        case 41: 
          { jline = 0; lexeme=yytext(); return tk_next;
          }
        case 95: break;
        case 40: 
          { jline = 0; lexeme=yytext(); return tk_loop;
          }
        case 96: break;
        case 38: 
          { jline = 0; lexeme=yytext(); return tk_exit;
          }
        case 97: break;
        case 28: 
          { jline = 0; lexeme=yytext(); return tk_dim;
          }
        case 98: break;
        case 47: 
          { jline = 0; lexeme = yytext(); return tk_false;
          }
        case 99: break;
        case 33: 
          { jline = 0; lexeme=yytext(); return tk_and;
          }
        case 100: break;
        case 30: 
          { jline = 0; lexeme=yytext(); return tk_not;
          }
        case 101: break;
        case 21: 
          { jline = 0; lexeme=yytext(); return tk_do;
          }
        case 102: break;
        case 13: 
          { jline = 0; lexeme=yytext(); return tk_punto;
          }
        case 103: break;
        case 20: 
          { jline = 0; lexeme=yytext(); return tk_as;
          }
        case 104: break;
        case 23: 
          { jline = 0; lexeme=yytext(); return tk_to;
          }
        case 105: break;
        case 49: 
          { jline = 0; lexeme=yytext(); return tk_byval;
          }
        case 106: break;
        case 26: 
          { jline = 0; lexeme=yytext(); return tk_valorString;
          }
        case 107: break;
        case 35: 
          { jline = 0; lexeme=yytext(); return tk_step;
          }
        case 108: break;
        case 54: 
          { jline = 0; lexeme=yytext(); return tk_elseif;
          }
        case 109: break;
        case 39: 
          { jline = 0; lexeme = yytext(); return tk_true;
          }
        case 110: break;
        case 4: 
          { jline++;
        if(jline == 1){
            return tk_Linea;
        }
          }
        case 111: break;
        case 50: 
          { jline = 0; lexeme=yytext(); return tk_sys;
          }
        case 112: break;
        case 11: 
          { jline = 0; lexeme=yytext(); return tk_Coma;
          }
        case 113: break;
        case 18: 
          { jline = 0; lexeme=yytext(); return tk_comentario;
          }
        case 114: break;
        case 56: 
          { jline = 0; lexeme=yytext(); return tk_return;
          }
        case 115: break;
        case 48: 
          { jline = 0; lexeme=yytext(); return tk_until;
          }
        case 116: break;
        case 31: 
          { jline = 0; lexeme=yytext(); return tk_sub;
          }
        case 117: break;
        case 51: 
          { jline = 0; lexeme=yytext(); return tk_String;
          }
        case 118: break;
        case 24: 
          { jline = 0; lexeme = yytext(); return tk_mayorigual;
          }
        case 119: break;
        case 52: 
          { jline = 0; lexeme=yytext(); return tk_structure;
          }
        case 120: break;
        case 16: 
          { jline = 0; lexeme=yytext(); return tk_ParentesisA;
          }
        case 121: break;
        case 3: 
          { 
          }
        case 122: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
