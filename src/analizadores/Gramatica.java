
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Gramatica extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Gramatica() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Gramatica(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Gramatica(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0212\000\002\002\004\000\002\047\010\000\002\047" +
    "\010\000\002\047\010\000\002\047\010\000\002\047\005" +
    "\000\002\066\014\000\002\066\014\000\002\066\014\000" +
    "\002\066\014\000\002\066\014\000\002\066\014\000\002" +
    "\067\007\000\002\067\007\000\002\067\007\000\002\067" +
    "\007\000\002\070\011\000\002\070\011\000\002\070\011" +
    "\000\002\070\011\000\002\070\011\000\002\042\010\000" +
    "\002\042\010\000\002\042\010\000\002\042\010\000\002" +
    "\042\010\000\002\043\005\000\002\043\005\000\002\043" +
    "\005\000\002\046\005\000\002\046\005\000\002\046\005" +
    "\000\002\045\005\000\002\045\005\000\002\045\005\000" +
    "\002\044\005\000\002\044\005\000\002\044\005\000\002" +
    "\002\004\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\002\003\000\002\002\005\000\002\013\004" +
    "\000\002\013\005\000\002\013\004\000\002\013\003\000" +
    "\002\013\005\000\002\030\006\000\002\030\010\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\005\000\002\011\003\000" +
    "\002\011\005\000\002\073\012\000\002\074\006\000\002" +
    "\075\004\000\002\075\004\000\002\075\004\000\002\075" +
    "\004\000\002\075\004\000\002\075\004\000\002\075\004" +
    "\000\002\075\004\000\002\075\005\000\002\075\004\000" +
    "\002\075\003\000\002\075\003\000\002\075\003\000\002" +
    "\075\003\000\002\075\003\000\002\075\003\000\002\075" +
    "\003\000\002\075\003\000\002\075\005\000\002\075\005" +
    "\000\002\075\004\000\002\077\004\000\002\077\004\000" +
    "\002\077\004\000\002\077\004\000\002\077\004\000\002" +
    "\077\004\000\002\077\004\000\002\077\004\000\002\077" +
    "\005\000\002\077\004\000\002\077\003\000\002\077\003" +
    "\000\002\077\003\000\002\077\003\000\002\077\003\000" +
    "\002\077\003\000\002\077\003\000\002\077\003\000\002" +
    "\077\005\000\002\076\004\000\002\076\004\000\002\076" +
    "\004\000\002\076\004\000\002\076\005\000\002\076\004" +
    "\000\002\076\004\000\002\076\004\000\002\076\004\000" +
    "\002\076\004\000\002\076\005\000\002\076\004\000\002" +
    "\076\003\000\002\076\003\000\002\076\003\000\002\076" +
    "\003\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\076\003\000\002\076\005\000\002\071\011\000" +
    "\002\072\004\000\002\072\004\000\002\072\004\000\002" +
    "\072\004\000\002\072\004\000\002\072\004\000\002\072" +
    "\004\000\002\072\004\000\002\072\005\000\002\072\004" +
    "\000\002\072\003\000\002\072\003\000\002\072\003\000" +
    "\002\072\003\000\002\072\003\000\002\072\003\000\002" +
    "\072\003\000\002\072\003\000\002\072\005\000\002\072" +
    "\005\000\002\072\005\000\002\101\017\000\002\101\014" +
    "\000\002\100\004\000\002\100\004\000\002\100\004\000" +
    "\002\100\004\000\002\100\004\000\002\100\004\000\002" +
    "\100\004\000\002\100\004\000\002\100\005\000\002\100" +
    "\004\000\002\100\003\000\002\100\003\000\002\100\003" +
    "\000\002\100\003\000\002\100\003\000\002\100\003\000" +
    "\002\100\003\000\002\100\003\000\002\100\005\000\002" +
    "\100\005\000\002\100\005\000\002\035\004\000\002\035" +
    "\004\000\002\035\004\000\002\035\004\000\002\035\004" +
    "\000\002\035\004\000\002\035\004\000\002\035\004\000" +
    "\002\035\005\000\002\035\003\000\002\035\005\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\005\000\002\012\003\000" +
    "\002\012\005\000\002\003\006\000\002\003\005\000\002" +
    "\003\010\000\002\003\007\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\004\007\000\002\004\011" +
    "\000\002\004\010\000\002\004\007\000\002\004\006\000" +
    "\002\004\010\000\002\005\006\000\002\005\005\000\002" +
    "\005\005\000\002\005\012\000\002\005\010\000\002\005" +
    "\014\000\002\010\003\000\002\010\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\026\003\000\002\026\003\000\002\021" +
    "\005\000\002\021\005\000\002\021\007\000\002\021\003" +
    "\000\002\021\011\000\002\033\005\000\002\033\006\000" +
    "\002\041\005\000\002\041\006\000\002\041\005\000\002" +
    "\041\005\000\002\041\005\000\002\041\005\000\002\041" +
    "\004\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\032\014\000\002\032\012\000\002\032\010\000\002" +
    "\032\006\000\002\032\004\000\002\036\005\000\002\036" +
    "\004\000\002\031\006\000\002\031\006\000\002\031\006" +
    "\000\002\031\005\000\002\031\010\000\002\031\007\000" +
    "\002\006\011\000\002\006\011\000\002\014\012\000\002" +
    "\020\006\000\002\015\004\000\002\015\004\000\002\015" +
    "\004\000\002\015\004\000\002\015\004\000\002\015\004" +
    "\000\002\015\004\000\002\015\004\000\002\015\005\000" +
    "\002\015\004\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\005" +
    "\000\002\015\004\000\002\016\004\000\002\016\004\000" +
    "\002\016\004\000\002\016\004\000\002\016\004\000\002" +
    "\016\004\000\002\016\004\000\002\016\004\000\002\016" +
    "\005\000\002\016\004\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\004\000\002\017\005\000\002\017\004\000\002\017\004" +
    "\000\002\017\004\000\002\017\004\000\002\017\004\000" +
    "\002\017\005\000\002\017\004\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\022\017\000\002\022\014\000\002\024\004\000" +
    "\002\024\003\000\002\037\004\000\002\037\004\000\002" +
    "\037\004\000\002\037\004\000\002\037\004\000\002\037" +
    "\004\000\002\037\004\000\002\037\004\000\002\037\005" +
    "\000\002\037\004\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\005\000\002\061\012\000\002\062\006\000\002\063\004" +
    "\000\002\063\004\000\002\063\004\000\002\063\004\000" +
    "\002\063\004\000\002\063\004\000\002\063\004\000\002" +
    "\063\004\000\002\063\005\000\002\063\004\000\002\063" +
    "\003\000\002\063\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\005\000\002\063\005\000\002" +
    "\063\004\000\002\064\004\000\002\064\004\000\002\064" +
    "\004\000\002\064\004\000\002\064\005\000\002\064\004" +
    "\000\002\064\004\000\002\064\004\000\002\064\004\000" +
    "\002\064\004\000\002\064\005\000\002\064\004\000\002" +
    "\064\003\000\002\064\003\000\002\064\003\000\002\064" +
    "\003\000\002\064\003\000\002\064\003\000\002\064\003" +
    "\000\002\064\003\000\002\064\005\000\002\065\004\000" +
    "\002\065\004\000\002\065\004\000\002\065\004\000\002" +
    "\065\004\000\002\065\004\000\002\065\004\000\002\065" +
    "\004\000\002\065\005\000\002\065\004\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\065\003\000" +
    "\002\065\003\000\002\065\003\000\002\065\003\000\002" +
    "\065\003\000\002\065\005\000\002\057\011\000\002\060" +
    "\004\000\002\060\004\000\002\060\004\000\002\060\004" +
    "\000\002\060\004\000\002\060\004\000\002\060\004\000" +
    "\002\060\004\000\002\060\005\000\002\060\004\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\060" +
    "\003\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\060\005\000\002\060\005\000" +
    "\002\050\012\000\002\054\006\000\002\051\004\000\002" +
    "\051\004\000\002\051\004\000\002\051\004\000\002\051" +
    "\004\000\002\051\004\000\002\051\004\000\002\051\004" +
    "\000\002\051\005\000\002\051\004\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\005\000\002\051\005\000\002\051\004" +
    "\000\002\053\004\000\002\053\004\000\002\053\004\000" +
    "\002\053\004\000\002\053\004\000\002\053\005\000\002" +
    "\053\004\000\002\053\004\000\002\053\004\000\002\053" +
    "\004\000\002\053\005\000\002\053\004\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\005\000\002\052\004\000\002\052" +
    "\004\000\002\052\004\000\002\052\004\000\002\052\004" +
    "\000\002\052\004\000\002\052\004\000\002\052\004\000" +
    "\002\052\005\000\002\052\004\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\005\000\002\056\017\000\002\056\014\000" +
    "\002\055\004\000\002\055\004\000\002\055\004\000\002" +
    "\055\004\000\002\055\004\000\002\055\004\000\002\055" +
    "\004\000\002\055\004\000\002\055\005\000\002\055\004" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\055\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\055\005\000\002\055" +
    "\005\000\002\025\011\000\002\040\004\000\002\040\004" +
    "\000\002\040\004\000\002\040\004\000\002\040\004\000" +
    "\002\040\004\000\002\040\004\000\002\040\004\000\002" +
    "\040\005\000\002\040\004\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u03d6\000\006\003\005\033\006\001\002\000\004\002" +
    "\u03d8\001\002\000\006\034\u03d2\062\u03d1\001\002\000\006" +
    "\003\007\034\010\001\002\000\004\064\u03cd\001\002\000" +
    "\006\003\012\064\011\001\002\000\004\062\u03ca\001\002" +
    "\000\004\062\013\001\002\000\012\003\021\006\024\031" +
    "\020\033\023\001\002\000\006\003\u03c2\060\u03c1\001\002" +
    "\000\012\003\021\006\024\031\020\033\023\001\002\000" +
    "\010\002\uffd7\003\uffd7\060\uffd7\001\002\000\012\003\021" +
    "\006\024\031\020\033\023\001\002\000\006\003\u03af\061" +
    "\u03ae\001\002\000\014\030\u0384\031\u0279\032\u0386\061\u0383" +
    "\062\u0385\001\002\000\012\003\021\006\024\031\020\033" +
    "\023\001\002\000\012\003\030\030\027\031\031\032\032" +
    "\001\002\000\004\062\025\001\002\000\012\003\021\006" +
    "\024\031\020\033\023\001\002\000\010\002\uffd8\003\uffd8" +
    "\060\uffd8\001\002\000\006\003\u0368\064\u0367\001\002\000" +
    "\004\064\u029a\001\002\000\006\003\u028d\064\u028c\001\002" +
    "\000\006\003\034\064\033\001\002\000\004\062\u028a\001" +
    "\002\000\004\062\035\001\002\000\014\003\042\006\045" +
    "\033\044\060\043\064\040\001\002\000\014\003\042\006" +
    "\045\033\044\060\043\064\040\001\002\000\012\003\ufff2" +
    "\006\ufff2\031\ufff2\033\ufff2\001\002\000\004\055\u0283\001" +
    "\002\000\014\003\042\006\045\033\044\060\043\064\040" +
    "\001\002\000\010\031\u0279\032\u027a\062\u0278\001\002\000" +
    "\006\003\u0274\032\u0275\001\002\000\006\003\051\031\031" +
    "\001\002\000\004\062\047\001\002\000\012\003\uffd2\006" +
    "\uffd2\031\uffd2\033\uffd2\001\002\000\014\003\042\006\045" +
    "\033\044\060\043\064\040\001\002\000\012\003\uffd4\006" +
    "\uffd4\031\uffd4\033\uffd4\001\002\000\004\064\052\001\002" +
    "\000\004\050\053\001\002\000\006\012\055\064\054\001" +
    "\002\000\004\055\u0270\001\002\000\004\064\u026b\001\002" +
    "\000\004\062\057\001\002\000\030\003\103\005\071\006" +
    "\076\013\101\017\065\025\104\050\077\054\062\060\100" +
    "\064\067\065\105\001\002\000\030\003\103\005\071\006" +
    "\076\013\101\017\065\025\104\050\077\054\062\060\100" +
    "\064\067\065\105\001\002\000\030\003\103\005\071\006" +
    "\076\013\101\017\065\025\104\050\077\054\062\060\100" +
    "\064\067\065\105\001\002\000\004\064\u025a\001\002\000" +
    "\030\003\103\005\071\006\076\013\101\017\065\025\104" +
    "\050\077\054\062\060\100\064\067\065\105\001\002\000" +
    "\030\003\103\005\071\006\076\013\101\017\065\025\104" +
    "\050\077\054\062\060\100\064\067\065\105\001\002\000" +
    "\004\064\u01ba\001\002\000\016\003\uffef\006\uffef\031\uffef" +
    "\033\uffef\060\uffef\064\uffef\001\002\000\030\035\uff24\036" +
    "\uff24\037\uff24\040\uff24\041\uff24\042\uff24\047\u0190\050\u018e" +
    "\053\u018d\064\110\065\105\001\002\000\030\003\103\005" +
    "\071\006\076\013\101\017\065\025\104\050\077\054\062" +
    "\060\100\064\067\065\105\001\002\000\004\053\u017f\001" +
    "\002\000\030\003\103\005\071\006\076\013\101\017\065" +
    "\025\104\050\077\054\062\060\100\064\067\065\105\001" +
    "\002\000\030\003\103\005\071\006\076\013\101\017\065" +
    "\025\104\050\077\054\062\060\100\064\067\065\105\001" +
    "\002\000\016\035\136\036\134\037\132\040\130\041\131" +
    "\042\135\001\002\000\020\002\uff43\003\uff43\006\uff43\031" +
    "\uff43\033\uff43\060\uff43\064\uff43\001\002\000\004\062\u017b" +
    "\001\002\000\006\064\110\065\105\001\002\000\006\003" +
    "\u0174\031\u0175\001\002\000\012\026\107\027\113\064\110" +
    "\065\105\001\002\000\030\003\103\005\071\006\076\013" +
    "\101\017\065\025\104\050\077\054\062\060\100\064\067" +
    "\065\105\001\002\000\006\031\u0122\062\u0121\001\002\000" +
    "\004\022\106\001\002\000\052\014\uff23\020\uff23\023\uff23" +
    "\035\uff23\036\uff23\037\uff23\040\uff23\041\uff23\042\uff23\043" +
    "\uff23\044\uff23\045\uff23\046\uff23\047\uff23\050\uff23\051\uff23" +
    "\052\uff23\062\uff23\064\uff23\065\uff23\001\002\000\012\026" +
    "\107\027\113\064\110\065\105\001\002\000\006\014\uff2e" +
    "\062\uff2e\001\002\000\050\020\uff24\023\uff24\035\uff24\036" +
    "\uff24\037\uff24\040\uff24\041\uff24\042\uff24\043\uff24\044\uff24" +
    "\045\uff24\046\uff24\047\uff24\050\uff24\051\uff24\052\uff24\062" +
    "\uff24\064\uff24\065\uff24\001\002\000\004\062\161\001\002" +
    "\000\006\014\uff1f\062\uff1f\001\002\000\006\014\uff2d\062" +
    "\uff2d\001\002\000\014\043\121\044\117\045\120\046\116" +
    "\047\122\001\002\000\014\026\107\027\113\050\125\064" +
    "\123\065\105\001\002\000\014\026\uff26\027\uff26\050\uff26" +
    "\064\uff26\065\uff26\001\002\000\014\026\uff28\027\uff28\050" +
    "\uff28\064\uff28\065\uff28\001\002\000\014\026\uff27\027\uff27" +
    "\050\uff27\064\uff27\065\uff27\001\002\000\014\026\uff29\027" +
    "\uff29\050\uff29\064\uff29\065\uff29\001\002\000\014\026\uff25" +
    "\027\uff25\050\uff25\064\uff25\065\uff25\001\002\000\010\014" +
    "\uff24\050\141\062\uff24\001\002\000\006\014\uff21\062\uff21" +
    "\001\002\000\006\064\110\065\105\001\002\000\006\014" +
    "\uff22\062\uff22\001\002\000\016\035\136\036\134\037\132" +
    "\040\130\041\131\042\135\001\002\000\024\035\uff11\036" +
    "\uff11\037\uff11\040\uff11\041\uff11\042\uff11\050\uff11\064\uff11" +
    "\065\uff11\001\002\000\024\035\uff10\036\uff10\037\uff10\040" +
    "\uff10\041\uff10\042\uff10\050\uff10\064\uff10\065\uff10\001\002" +
    "\000\024\035\uff12\036\uff12\037\uff12\040\uff12\041\uff12\042" +
    "\uff12\050\uff12\064\uff12\065\uff12\001\002\000\006\064\110" +
    "\065\105\001\002\000\024\035\uff13\036\uff13\037\uff13\040" +
    "\uff13\041\uff13\042\uff13\050\uff13\064\uff13\065\uff13\001\002" +
    "\000\024\035\uff0f\036\uff0f\037\uff0f\040\uff0f\041\uff0f\042" +
    "\uff0f\050\uff0f\064\uff0f\065\uff0f\001\002\000\024\035\uff14" +
    "\036\uff14\037\uff14\040\uff14\041\uff14\042\uff14\050\uff14\064" +
    "\uff14\065\uff14\001\002\000\004\051\140\001\002\000\006" +
    "\014\uff1e\062\uff1e\001\002\000\006\064\110\065\105\001" +
    "\002\000\006\014\uff20\062\uff20\001\002\000\006\051\144" +
    "\052\145\001\002\000\012\014\uff0a\051\uff0a\052\uff0a\062" +
    "\uff0a\001\002\000\006\064\110\065\105\001\002\000\006" +
    "\051\147\052\150\001\002\000\012\014\uff0b\051\uff0b\052" +
    "\uff0b\062\uff0b\001\002\000\006\064\110\065\105\001\002" +
    "\000\006\051\152\052\153\001\002\000\012\014\uff0c\051" +
    "\uff0c\052\uff0c\062\uff0c\001\002\000\006\064\110\065\105" +
    "\001\002\000\006\051\155\052\156\001\002\000\012\014" +
    "\uff0d\051\uff0d\052\uff0d\062\uff0d\001\002\000\006\064\110" +
    "\065\105\001\002\000\004\051\160\001\002\000\012\014" +
    "\uff0e\051\uff0e\052\uff0e\062\uff0e\001\002\000\026\005\071" +
    "\006\172\013\174\017\165\025\104\050\077\054\062\056" +
    "\176\064\067\065\105\001\002\000\030\005\071\006\172" +
    "\013\174\017\165\021\ufdf3\025\104\050\077\054\062\056" +
    "\176\064\067\065\105\001\002\000\030\005\071\006\172" +
    "\013\174\017\165\021\ufdf2\025\104\050\077\054\062\056" +
    "\176\064\067\065\105\001\002\000\030\005\071\006\172" +
    "\013\174\017\165\021\ufdf8\025\104\050\077\054\062\056" +
    "\176\064\067\065\105\001\002\000\004\064\341\001\002" +
    "\000\030\005\071\006\172\013\174\017\165\021\ufdf4\025" +
    "\104\050\077\054\062\056\176\064\067\065\105\001\002" +
    "\000\030\005\071\006\172\013\174\017\165\021\ufdf5\025" +
    "\104\050\077\054\062\056\176\064\067\065\105\001\002" +
    "\000\030\005\071\006\172\013\174\017\165\021\ufdf1\025" +
    "\104\050\077\054\062\056\176\064\067\065\105\001\002" +
    "\000\030\005\071\006\172\013\174\017\165\021\ufdf7\025" +
    "\104\050\077\054\062\056\176\064\067\065\105\001\002" +
    "\000\004\062\333\001\002\000\030\005\071\006\172\013" +
    "\174\017\165\021\ufdf6\025\104\050\077\054\062\056\176" +
    "\064\067\065\105\001\002\000\012\026\107\027\113\064" +
    "\110\065\105\001\002\000\004\021\201\001\002\000\004" +
    "\025\177\001\002\000\004\062\200\001\002\000\004\021" +
    "\ufdf0\001\002\000\004\062\202\001\002\000\042\003\ufe03" +
    "\005\ufe03\006\ufe03\013\ufe03\015\ufe03\016\ufe03\017\ufe03\021" +
    "\ufe03\024\ufe03\025\ufe03\050\ufe03\054\ufe03\056\ufe03\060\ufe03" +
    "\064\ufe03\065\ufe03\001\002\000\004\014\204\001\002\000" +
    "\004\062\205\001\002\000\032\005\071\006\220\013\174" +
    "\015\207\016\206\017\165\025\104\050\077\054\062\056" +
    "\222\064\067\065\105\001\002\000\004\062\330\001\002" +
    "\000\012\026\107\027\113\064\110\065\105\001\002\000" +
    "\034\005\071\006\220\013\174\015\207\016\206\017\165" +
    "\025\104\050\077\054\062\056\222\060\ufe49\064\067\065" +
    "\105\001\002\000\034\005\071\006\220\013\174\015\207" +
    "\016\206\017\165\025\104\050\077\054\062\056\222\060" +
    "\ufe48\064\067\065\105\001\002\000\034\005\071\006\220" +
    "\013\174\015\207\016\206\017\165\025\104\050\077\054" +
    "\062\056\222\060\ufe45\064\067\065\105\001\002\000\034" +
    "\005\071\006\220\013\174\015\207\016\206\017\165\025" +
    "\104\050\077\054\062\056\222\060\ufe4a\064\067\065\105" +
    "\001\002\000\034\005\071\006\220\013\174\015\207\016" +
    "\206\017\165\025\104\050\077\054\062\056\222\060\ufe46" +
    "\064\067\065\105\001\002\000\034\005\071\006\220\013" +
    "\174\015\207\016\206\017\165\025\104\050\077\054\062" +
    "\056\222\060\ufe4b\064\067\065\105\001\002\000\034\005" +
    "\071\006\220\013\174\015\207\016\206\017\165\025\104" +
    "\050\077\054\062\056\222\060\ufe47\064\067\065\105\001" +
    "\002\000\004\060\230\001\002\000\004\062\226\001\002" +
    "\000\034\005\071\006\220\013\174\015\207\016\206\017" +
    "\165\025\104\050\077\054\062\056\222\060\ufe4c\064\067" +
    "\065\105\001\002\000\004\025\223\001\002\000\004\062" +
    "\224\001\002\000\004\060\ufe44\001\002\000\004\060\ufe56" +
    "\001\002\000\034\005\071\006\220\013\174\015\207\016" +
    "\206\017\165\025\104\050\077\054\062\056\222\060\ufe4d" +
    "\064\067\065\105\001\002\000\004\060\ufe4e\001\002\000" +
    "\004\013\231\001\002\000\004\062\232\001\002\000\040" +
    "\005\ufe58\006\ufe58\013\ufe58\015\ufe58\016\ufe58\017\ufe58\021" +
    "\ufe58\024\ufe58\025\ufe58\050\ufe58\054\ufe58\056\ufe58\060\ufe58" +
    "\064\ufe58\065\ufe58\001\002\000\004\060\ufe52\001\002\000" +
    "\004\060\ufe55\001\002\000\004\060\ufe50\001\002\000\004" +
    "\060\ufe54\001\002\000\004\060\ufe4f\001\002\000\004\060" +
    "\ufe51\001\002\000\004\060\ufe53\001\002\000\004\060\ufe42" +
    "\001\002\000\004\014\244\001\002\000\004\062\245\001" +
    "\002\000\032\005\071\006\260\013\174\015\250\016\246" +
    "\017\165\025\104\050\077\054\062\056\262\064\067\065" +
    "\105\001\002\000\004\062\300\001\002\000\034\005\071" +
    "\006\260\013\174\015\250\016\246\017\165\025\104\050" +
    "\077\054\062\056\262\060\ufe31\064\067\065\105\001\002" +
    "\000\012\026\107\027\113\064\110\065\105\001\002\000" +
    "\034\005\071\006\260\013\174\015\250\016\246\017\165" +
    "\025\104\050\077\054\062\056\262\060\ufe30\064\067\065" +
    "\105\001\002\000\034\005\071\006\260\013\174\015\250" +
    "\016\246\017\165\025\104\050\077\054\062\056\262\060" +
    "\ufe35\064\067\065\105\001\002\000\004\060\ufe57\001\002" +
    "\000\034\005\071\006\260\013\174\015\250\016\246\017" +
    "\165\025\104\050\077\054\062\056\262\060\ufe32\064\067" +
    "\065\105\001\002\000\034\005\071\006\260\013\174\015" +
    "\250\016\246\017\165\025\104\050\077\054\062\056\262" +
    "\060\ufe33\064\067\065\105\001\002\000\034\005\071\006" +
    "\260\013\174\015\250\016\246\017\165\025\104\050\077" +
    "\054\062\056\262\060\ufe2f\064\067\065\105\001\002\000" +
    "\034\005\071\006\260\013\174\015\250\016\246\017\165" +
    "\025\104\050\077\054\062\056\262\060\ufe2e\064\067\065" +
    "\105\001\002\000\004\062\266\001\002\000\034\005\071" +
    "\006\260\013\174\015\250\016\246\017\165\025\104\050" +
    "\077\054\062\056\262\060\ufe34\064\067\065\105\001\002" +
    "\000\004\025\263\001\002\000\004\062\264\001\002\000" +
    "\004\060\ufe2d\001\002\000\004\060\ufe40\001\002\000\034" +
    "\005\071\006\260\013\174\015\250\016\246\017\165\025" +
    "\104\050\077\054\062\056\262\060\ufe36\064\067\065\105" +
    "\001\002\000\004\060\ufe37\001\002\000\004\060\ufe38\001" +
    "\002\000\004\060\ufe3a\001\002\000\004\060\ufe3f\001\002" +
    "\000\004\060\ufe3e\001\002\000\004\060\ufe41\001\002\000" +
    "\004\060\ufe39\001\002\000\004\060\ufe3b\001\002\000\004" +
    "\060\ufe3d\001\002\000\026\005\071\006\310\013\174\017" +
    "\165\025\104\050\077\054\062\056\312\064\067\065\105" +
    "\001\002\000\030\005\071\006\310\013\174\017\165\025" +
    "\104\050\077\054\062\056\312\060\ufe1e\064\067\065\105" +
    "\001\002\000\030\005\071\006\310\013\174\017\165\025" +
    "\104\050\077\054\062\056\312\060\ufe1d\064\067\065\105" +
    "\001\002\000\030\005\071\006\310\013\174\017\165\025" +
    "\104\050\077\054\062\056\312\060\ufe22\064\067\065\105" +
    "\001\002\000\030\005\071\006\310\013\174\017\165\025" +
    "\104\050\077\054\062\056\312\060\ufe1f\064\067\065\105" +
    "\001\002\000\030\005\071\006\310\013\174\017\165\025" +
    "\104\050\077\054\062\056\312\060\ufe20\064\067\065\105" +
    "\001\002\000\030\005\071\006\310\013\174\017\165\025" +
    "\104\050\077\054\062\056\312\060\ufe1c\064\067\065\105" +
    "\001\002\000\030\005\071\006\310\013\174\017\165\025" +
    "\104\050\077\054\062\056\312\060\ufe1b\064\067\065\105" +
    "\001\002\000\004\062\317\001\002\000\030\005\071\006" +
    "\310\013\174\017\165\025\104\050\077\054\062\056\312" +
    "\060\ufe21\064\067\065\105\001\002\000\004\025\314\001" +
    "\002\000\004\060\ufe3c\001\002\000\004\062\315\001\002" +
    "\000\004\060\ufe1a\001\002\000\004\060\ufe2b\001\002\000" +
    "\030\005\071\006\310\013\174\017\165\025\104\050\077" +
    "\054\062\056\312\060\ufe23\064\067\065\105\001\002\000" +
    "\004\060\ufe24\001\002\000\004\060\ufe25\001\002\000\004" +
    "\060\ufe27\001\002\000\004\060\ufe2a\001\002\000\004\060" +
    "\ufe29\001\002\000\004\060\ufe2c\001\002\000\004\060\ufe26" +
    "\001\002\000\004\060\ufe28\001\002\000\026\005\071\006" +
    "\310\013\174\017\165\025\104\050\077\054\062\056\312" +
    "\064\067\065\105\001\002\000\004\060\ufe43\001\002\000" +
    "\004\021\ufe00\001\002\000\030\005\071\006\172\013\174" +
    "\017\165\021\ufdf9\025\104\050\077\054\062\056\176\064" +
    "\067\065\105\001\002\000\004\021\ufdfa\001\002\000\004" +
    "\021\ufe01\001\002\000\004\021\ufdfb\001\002\000\004\021" +
    "\ufdff\001\002\000\004\021\ufdfe\001\002\000\004\047\342" +
    "\001\002\000\006\064\110\065\105\001\002\000\004\020" +
    "\344\001\002\000\010\050\077\064\110\065\105\001\002" +
    "\000\026\005\071\006\366\013\174\017\165\025\104\050" +
    "\077\054\062\056\370\064\067\065\105\001\002\000\020" +
    "\023\350\035\136\036\134\037\132\040\130\041\131\042" +
    "\135\001\002\000\024\035\136\036\134\037\132\040\130" +
    "\041\131\042\135\050\u010c\064\110\065\105\001\002\000" +
    "\006\036\353\065\352\001\002\000\004\062\355\001\002" +
    "\000\004\062\ufec0\001\002\000\004\065\354\001\002\000" +
    "\004\062\ufec1\001\002\000\026\005\071\006\366\013\174" +
    "\017\165\025\104\050\077\054\062\056\370\064\067\065" +
    "\105\001\002\000\030\005\071\006\366\013\174\017\165" +
    "\024\ufe08\025\104\050\077\054\062\056\370\064\067\065" +
    "\105\001\002\000\030\005\071\006\366\013\174\017\165" +
    "\024\ufe07\025\104\050\077\054\062\056\370\064\067\065" +
    "\105\001\002\000\030\005\071\006\366\013\174\017\165" +
    "\024\ufe0d\025\104\050\077\054\062\056\370\064\067\065" +
    "\105\001\002\000\030\005\071\006\366\013\174\017\165" +
    "\024\ufe09\025\104\050\077\054\062\056\370\064\067\065" +
    "\105\001\002\000\004\024\u0103\001\002\000\030\005\071" +
    "\006\366\013\174\017\165\024\ufe0a\025\104\050\077\054" +
    "\062\056\370\064\067\065\105\001\002\000\030\005\071" +
    "\006\366\013\174\017\165\024\ufe06\025\104\050\077\054" +
    "\062\056\370\064\067\065\105\001\002\000\030\005\071" +
    "\006\366\013\174\017\165\024\ufe0c\025\104\050\077\054" +
    "\062\056\370\064\067\065\105\001\002\000\004\062\376" +
    "\001\002\000\030\005\071\006\366\013\174\017\165\024" +
    "\ufe0b\025\104\050\077\054\062\056\370\064\067\065\105" +
    "\001\002\000\006\017\372\025\371\001\002\000\004\062" +
    "\374\001\002\000\004\062\373\001\002\000\004\024\ufe04" +
    "\001\002\000\004\024\ufe05\001\002\000\004\024\ufe15\001" +
    "\002\000\030\005\071\006\366\013\174\017\165\024\ufe0e" +
    "\025\104\050\077\054\062\056\370\064\067\065\105\001" +
    "\002\000\004\024\ufe0f\001\002\000\004\024\ufe16\001\002" +
    "\000\004\024\ufe10\001\002\000\004\024\ufe14\001\002\000" +
    "\004\064\u0104\001\002\000\004\062\u0105\001\002\000\040" +
    "\005\ufe19\006\ufe19\013\ufe19\015\ufe19\016\ufe19\017\ufe19\021" +
    "\ufe19\024\ufe19\025\ufe19\050\ufe19\054\ufe19\056\ufe19\060\ufe19" +
    "\064\ufe19\065\ufe19\001\002\000\004\024\ufe13\001\002\000" +
    "\004\024\ufe17\001\002\000\004\024\ufe11\001\002\000\004" +
    "\024\ufe12\001\002\000\022\035\136\036\134\037\132\040" +
    "\130\041\131\042\135\051\u0114\062\u0116\001\002\000\042" +
    "\003\uff1d\005\uff1d\006\uff1d\013\uff1d\015\uff1d\016\uff1d\017" +
    "\uff1d\021\uff1d\024\uff1d\025\uff1d\050\uff1d\054\uff1d\056\uff1d" +
    "\060\uff1d\064\uff1d\065\uff1d\001\002\000\006\064\110\065" +
    "\105\001\002\000\006\064\110\065\105\001\002\000\026" +
    "\035\136\036\134\037\132\040\130\041\131\042\135\050" +
    "\u010c\062\u0110\064\110\065\105\001\002\000\042\003\uff19" +
    "\005\uff19\006\uff19\013\uff19\015\uff19\016\uff19\017\uff19\021" +
    "\uff19\024\uff19\025\uff19\050\uff19\054\uff19\056\uff19\060\uff19" +
    "\064\uff19\065\uff19\001\002\000\042\003\uff17\005\uff17\006" +
    "\uff17\013\uff17\015\uff17\016\uff17\017\uff17\021\uff17\024\uff17" +
    "\025\uff17\050\uff17\054\uff17\056\uff17\060\uff17\064\uff17\065" +
    "\uff17\001\002\000\016\035\136\036\134\037\132\040\130" +
    "\041\131\042\135\001\002\000\024\035\136\036\134\037" +
    "\132\040\130\041\131\042\135\050\u010c\064\110\065\105" +
    "\001\002\000\042\003\uff1a\005\uff1a\006\uff1a\013\uff1a\015" +
    "\uff1a\016\uff1a\017\uff1a\021\uff1a\024\uff1a\025\uff1a\050\uff1a" +
    "\054\uff1a\056\uff1a\060\uff1a\064\uff1a\065\uff1a\001\002\000" +
    "\026\035\136\036\134\037\132\040\130\041\131\042\135" +
    "\050\u010c\062\u0119\064\110\065\105\001\002\000\024\035" +
    "\136\036\134\037\132\040\130\041\131\042\135\050\u010c" +
    "\064\110\065\105\001\002\000\042\003\uff15\005\uff15\006" +
    "\uff15\013\uff15\015\uff15\016\uff15\017\uff15\021\uff15\024\uff15" +
    "\025\uff15\050\uff15\054\uff15\056\uff15\060\uff15\064\uff15\065" +
    "\uff15\001\002\000\042\003\uff1b\005\uff1b\006\uff1b\013\uff1b" +
    "\015\uff1b\016\uff1b\017\uff1b\021\uff1b\024\uff1b\025\uff1b\050" +
    "\uff1b\054\uff1b\056\uff1b\060\uff1b\064\uff1b\065\uff1b\001\002" +
    "\000\042\003\uff18\005\uff18\006\uff18\013\uff18\015\uff18\016" +
    "\uff18\017\uff18\021\uff18\024\uff18\025\uff18\050\uff18\054\uff18" +
    "\056\uff18\060\uff18\064\uff18\065\uff18\001\002\000\042\003" +
    "\uff16\005\uff16\006\uff16\013\uff16\015\uff16\016\uff16\017\uff16" +
    "\021\uff16\024\uff16\025\uff16\050\uff16\054\uff16\056\uff16\060" +
    "\uff16\064\uff16\065\uff16\001\002\000\004\024\u011b\001\002" +
    "\000\004\064\u011c\001\002\000\004\062\u011d\001\002\000" +
    "\040\005\ufe18\006\ufe18\013\ufe18\015\ufe18\016\ufe18\017\ufe18" +
    "\021\ufe18\024\ufe18\025\ufe18\050\ufe18\054\ufe18\056\ufe18\060" +
    "\ufe18\064\ufe18\065\ufe18\001\002\000\004\021\ufe02\001\002" +
    "\000\004\021\ufdfc\001\002\000\004\021\ufdfd\001\002\000" +
    "\030\003\103\005\071\006\076\013\101\017\065\025\104" +
    "\050\077\054\062\060\100\064\067\065\105\001\002\000" +
    "\004\062\u0123\001\002\000\020\002\uffdd\003\uffdd\006\uffdd" +
    "\031\uffdd\033\uffdd\060\uffdd\064\uffdd\001\002\000\020\002" +
    "\uff42\003\uff42\006\uff42\031\uff42\033\uff42\060\uff42\064\uff42" +
    "\001\002\000\020\002\uff4b\003\uff4b\006\uff4b\031\uff4b\033" +
    "\uff4b\060\uff4b\064\uff4b\001\002\000\004\014\u0127\001\002" +
    "\000\004\062\u0128\001\002\000\030\005\071\006\u0133\013" +
    "\101\015\u012b\016\u0129\017\065\025\104\050\077\054\062" +
    "\064\067\065\105\001\002\000\004\062\u0172\001\002\000" +
    "\032\005\071\006\u0133\013\101\015\u012b\016\u0129\017\065" +
    "\025\104\050\077\054\062\060\ufeed\064\067\065\105\001" +
    "\002\000\012\026\107\027\113\064\110\065\105\001\002" +
    "\000\032\005\071\006\u0133\013\101\015\u012b\016\u0129\017" +
    "\065\025\104\050\077\054\062\060\ufef0\064\067\065\105" +
    "\001\002\000\032\005\071\006\u0133\013\101\015\u012b\016" +
    "\u0129\017\065\025\104\050\077\054\062\060\ufeef\064\067" +
    "\065\105\001\002\000\032\005\071\006\u0133\013\101\015" +
    "\u012b\016\u0129\017\065\025\104\050\077\054\062\060\ufeec" +
    "\064\067\065\105\001\002\000\032\005\071\006\u0133\013" +
    "\101\015\u012b\016\u0129\017\065\025\104\050\077\054\062" +
    "\060\ufef1\064\067\065\105\001\002\000\032\005\071\006" +
    "\u0133\013\101\015\u012b\016\u0129\017\065\025\104\050\077" +
    "\054\062\060\ufef2\064\067\065\105\001\002\000\032\005" +
    "\071\006\u0133\013\101\015\u012b\016\u0129\017\065\025\104" +
    "\050\077\054\062\060\ufeee\064\067\065\105\001\002\000" +
    "\004\060\u0138\001\002\000\004\062\u0136\001\002\000\032" +
    "\005\071\006\u0133\013\101\015\u012b\016\u0129\017\065\025" +
    "\104\050\077\054\062\060\ufef3\064\067\065\105\001\002" +
    "\000\004\060\ufefd\001\002\000\032\005\071\006\u0133\013" +
    "\101\015\u012b\016\u0129\017\065\025\104\050\077\054\062" +
    "\060\ufef4\064\067\065\105\001\002\000\004\060\ufef5\001" +
    "\002\000\004\013\u0139\001\002\000\004\062\u013a\001\002" +
    "\000\034\003\ufeff\005\ufeff\006\ufeff\013\ufeff\015\ufeff\016" +
    "\ufeff\017\ufeff\025\ufeff\050\ufeff\054\ufeff\060\ufeff\064\ufeff" +
    "\065\ufeff\001\002\000\004\060\ufef9\001\002\000\004\060" +
    "\ufefc\001\002\000\004\060\ufefb\001\002\000\004\060\ufef6" +
    "\001\002\000\004\060\ufef8\001\002\000\004\060\ufefa\001" +
    "\002\000\004\014\u0143\001\002\000\004\060\ufeea\001\002" +
    "\000\004\062\u0144\001\002\000\030\005\071\006\u014f\013" +
    "\101\015\u0147\016\u0145\017\065\025\104\050\077\054\062" +
    "\064\067\065\105\001\002\000\004\062\u015c\001\002\000" +
    "\032\005\071\006\u014f\013\101\015\u0147\016\u0145\017\065" +
    "\025\104\050\077\054\062\060\ufec5\064\067\065\105\001" +
    "\002\000\012\026\107\027\113\064\110\065\105\001\002" +
    "\000\032\005\071\006\u014f\013\101\015\u0147\016\u0145\017" +
    "\065\025\104\050\077\054\062\060\ufec8\064\067\065\105" +
    "\001\002\000\032\005\071\006\u014f\013\101\015\u0147\016" +
    "\u0145\017\065\025\104\050\077\054\062\060\ufec7\064\067" +
    "\065\105\001\002\000\032\005\071\006\u014f\013\101\015" +
    "\u0147\016\u0145\017\065\025\104\050\077\054\062\060\ufec4" +
    "\064\067\065\105\001\002\000\032\005\071\006\u014f\013" +
    "\101\015\u0147\016\u0145\017\065\025\104\050\077\054\062" +
    "\060\ufec9\064\067\065\105\001\002\000\032\005\071\006" +
    "\u014f\013\101\015\u0147\016\u0145\017\065\025\104\050\077" +
    "\054\062\060\ufeca\064\067\065\105\001\002\000\032\005" +
    "\071\006\u014f\013\101\015\u0147\016\u0145\017\065\025\104" +
    "\050\077\054\062\060\ufec6\064\067\065\105\001\002\000" +
    "\004\060\ufefe\001\002\000\004\062\u0152\001\002\000\032" +
    "\005\071\006\u014f\013\101\015\u0147\016\u0145\017\065\025" +
    "\104\050\077\054\062\060\ufecb\064\067\065\105\001\002" +
    "\000\004\060\ufed7\001\002\000\032\005\071\006\u014f\013" +
    "\101\015\u0147\016\u0145\017\065\025\104\050\077\054\062" +
    "\060\ufecc\064\067\065\105\001\002\000\004\060\ufecd\001" +
    "\002\000\004\060\ufed1\001\002\000\004\060\ufed6\001\002" +
    "\000\004\060\ufed5\001\002\000\004\060\ufece\001\002\000" +
    "\004\060\ufed0\001\002\000\004\060\ufed4\001\002\000\004" +
    "\060\ufed2\001\002\000\004\060\ufecf\001\002\000\024\005" +
    "\071\006\u0164\013\101\017\065\025\104\050\077\054\062" +
    "\064\067\065\105\001\002\000\026\005\071\006\u0164\013" +
    "\101\017\065\025\104\050\077\054\062\060\ufed9\064\067" +
    "\065\105\001\002\000\026\005\071\006\u0164\013\101\017" +
    "\065\025\104\050\077\054\062\060\ufedc\064\067\065\105" +
    "\001\002\000\026\005\071\006\u0164\013\101\017\065\025" +
    "\104\050\077\054\062\060\ufedb\064\067\065\105\001\002" +
    "\000\026\005\071\006\u0164\013\101\017\065\025\104\050" +
    "\077\054\062\060\ufed8\064\067\065\105\001\002\000\026" +
    "\005\071\006\u0164\013\101\017\065\025\104\050\077\054" +
    "\062\060\ufedd\064\067\065\105\001\002\000\026\005\071" +
    "\006\u0164\013\101\017\065\025\104\050\077\054\062\060" +
    "\ufede\064\067\065\105\001\002\000\026\005\071\006\u0164" +
    "\013\101\017\065\025\104\050\077\054\062\060\ufeda\064" +
    "\067\065\105\001\002\000\004\062\u0168\001\002\000\026" +
    "\005\071\006\u0164\013\101\017\065\025\104\050\077\054" +
    "\062\060\ufedf\064\067\065\105\001\002\000\004\060\ufed3" +
    "\001\002\000\004\060\ufee9\001\002\000\026\005\071\006" +
    "\u0164\013\101\017\065\025\104\050\077\054\062\060\ufee0" +
    "\064\067\065\105\001\002\000\004\060\ufee1\001\002\000" +
    "\004\060\ufee5\001\002\000\004\060\ufee8\001\002\000\004" +
    "\060\ufee7\001\002\000\004\060\ufee2\001\002\000\004\060" +
    "\ufee4\001\002\000\004\060\ufee6\001\002\000\004\060\ufee3" +
    "\001\002\000\004\060\ufef7\001\002\000\024\005\071\006" +
    "\u0164\013\101\017\065\025\104\050\077\054\062\064\067" +
    "\065\105\001\002\000\004\060\ufeeb\001\002\000\004\062" +
    "\u0177\001\002\000\004\062\u0176\001\002\000\020\002\uffde" +
    "\003\uffde\006\uffde\031\uffde\033\uffde\060\uffde\064\uffde\001" +
    "\002\000\020\002\uffdc\003\uffdc\006\uffdc\031\uffdc\033\uffdc" +
    "\060\uffdc\064\uffdc\001\002\000\016\035\136\036\134\037" +
    "\132\040\130\041\131\042\135\001\002\000\024\035\136" +
    "\036\134\037\132\040\130\041\131\042\135\050\u010c\064" +
    "\110\065\105\001\002\000\042\003\uff1c\005\uff1c\006\uff1c" +
    "\013\uff1c\015\uff1c\016\uff1c\017\uff1c\021\uff1c\024\uff1c\025" +
    "\uff1c\050\uff1c\054\uff1c\056\uff1c\060\uff1c\064\uff1c\065\uff1c" +
    "\001\002\000\030\003\103\005\071\006\076\013\101\017" +
    "\065\025\104\050\077\054\062\060\100\064\067\065\105" +
    "\001\002\000\020\002\uff44\003\uff44\006\uff44\031\uff44\033" +
    "\uff44\060\uff44\064\uff44\001\002\000\020\002\uff46\003\uff46" +
    "\006\uff46\031\uff46\033\uff46\060\uff46\064\uff46\001\002\000" +
    "\020\002\uff4a\003\uff4a\006\uff4a\031\uff4a\033\uff4a\060\uff4a" +
    "\064\uff4a\001\002\000\006\004\u0181\057\u0180\001\002\000" +
    "\004\050\u0189\001\002\000\004\050\u0182\001\002\000\006" +
    "\063\u0184\064\u0183\001\002\000\004\051\u0187\001\002\000" +
    "\004\051\u0185\001\002\000\004\062\u0186\001\002\000\042" +
    "\003\uff01\005\uff01\006\uff01\013\uff01\015\uff01\016\uff01\017" +
    "\uff01\021\uff01\024\uff01\025\uff01\050\uff01\054\uff01\056\uff01" +
    "\060\uff01\064\uff01\065\uff01\001\002\000\004\062\u0188\001" +
    "\002\000\042\003\uff00\005\uff00\006\uff00\013\uff00\015\uff00" +
    "\016\uff00\017\uff00\021\uff00\024\uff00\025\uff00\050\uff00\054" +
    "\uff00\056\uff00\060\uff00\064\uff00\065\uff00\001\002\000\004" +
    "\051\u018a\001\002\000\004\062\u018b\001\002\000\042\003" +
    "\uff30\005\uff30\006\uff30\013\uff30\015\uff30\016\uff30\017\uff30" +
    "\021\uff30\024\uff30\025\uff30\050\uff30\054\uff30\056\uff30\060" +
    "\uff30\064\uff30\065\uff30\001\002\000\020\002\uff49\003\uff49" +
    "\006\uff49\031\uff49\033\uff49\060\uff49\064\uff49\001\002\000" +
    "\004\064\u01af\001\002\000\012\050\u01a6\051\u01a5\064\110" +
    "\065\105\001\002\000\006\052\u01a0\062\u019f\001\002\000" +
    "\020\005\u0193\026\107\027\113\050\077\063\u0196\064\u0194" +
    "\065\105\001\002\000\004\062\u019e\001\002\000\020\035" +
    "\136\036\134\037\132\040\130\041\131\042\135\062\uff3c" +
    "\001\002\000\004\053\u0199\001\002\000\026\035\uff24\036" +
    "\uff24\037\uff24\040\uff24\041\uff24\042\uff24\050\u018e\062\uff24" +
    "\064\110\065\105\001\002\000\042\003\uff32\005\uff32\006" +
    "\uff32\013\uff32\015\uff32\016\uff32\017\uff32\021\uff32\024\uff32" +
    "\025\uff32\050\uff32\054\uff32\056\uff32\060\uff32\064\uff32\065" +
    "\uff32\001\002\000\004\062\uff3b\001\002\000\042\003\uff33" +
    "\005\uff33\006\uff33\013\uff33\015\uff33\016\uff33\017\uff33\021" +
    "\uff33\024\uff33\025\uff33\050\uff33\054\uff33\056\uff33\060\uff33" +
    "\064\uff33\065\uff33\001\002\000\004\062\uff3d\001\002\000" +
    "\004\057\u019a\001\002\000\004\050\u019b\001\002\000\004" +
    "\051\u019c\001\002\000\004\062\u019d\001\002\000\042\003" +
    "\uff31\005\uff31\006\uff31\013\uff31\015\uff31\016\uff31\017\uff31" +
    "\021\uff31\024\uff31\025\uff31\050\uff31\054\uff31\056\uff31\060" +
    "\uff31\064\uff31\065\uff31\001\002\000\042\003\uff34\005\uff34" +
    "\006\uff34\013\uff34\015\uff34\016\uff34\017\uff34\021\uff34\024" +
    "\uff34\025\uff34\050\uff34\054\uff34\056\uff34\060\uff34\064\uff34" +
    "\065\uff34\001\002\000\042\003\uff04\005\uff04\006\uff04\013" +
    "\uff04\015\uff04\016\uff04\017\uff04\021\uff04\024\uff04\025\uff04" +
    "\050\uff04\054\uff04\056\uff04\060\uff04\064\uff04\065\uff04\001" +
    "\002\000\006\064\110\065\105\001\002\000\004\062\u01a2" +
    "\001\002\000\042\003\uff05\005\uff05\006\uff05\013\uff05\015" +
    "\uff05\016\uff05\017\uff05\021\uff05\024\uff05\025\uff05\050\uff05" +
    "\054\uff05\056\uff05\060\uff05\064\uff05\065\uff05\001\002\000" +
    "\006\052\u01a0\062\uff08\001\002\000\004\062\uff09\001\002" +
    "\000\004\062\u01ae\001\002\000\006\064\110\065\105\001" +
    "\002\000\006\052\u01a0\062\u01a8\001\002\000\042\003\uff07" +
    "\005\uff07\006\uff07\013\uff07\015\uff07\016\uff07\017\uff07\021" +
    "\uff07\024\uff07\025\uff07\050\uff07\054\uff07\056\uff07\060\uff07" +
    "\064\uff07\065\uff07\001\002\000\004\062\u01aa\001\002\000" +
    "\042\003\uff02\005\uff02\006\uff02\013\uff02\015\uff02\016\uff02" +
    "\017\uff02\021\uff02\024\uff02\025\uff02\050\uff02\054\uff02\056" +
    "\uff02\060\uff02\064\uff02\065\uff02\001\002\000\004\051\u01ac" +
    "\001\002\000\004\062\u01ad\001\002\000\042\003\uff03\005" +
    "\uff03\006\uff03\013\uff03\015\uff03\016\uff03\017\uff03\021\uff03" +
    "\024\uff03\025\uff03\050\uff03\054\uff03\056\uff03\060\uff03\064" +
    "\uff03\065\uff03\001\002\000\042\003\uff06\005\uff06\006\uff06" +
    "\013\uff06\015\uff06\016\uff06\017\uff06\021\uff06\024\uff06\025" +
    "\uff06\050\uff06\054\uff06\056\uff06\060\uff06\064\uff06\065\uff06" +
    "\001\002\000\004\047\u01b0\001\002\000\016\005\u01b3\026" +
    "\107\027\113\063\u0196\064\110\065\105\001\002\000\004" +
    "\062\u01b9\001\002\000\004\062\uff3c\001\002\000\004\053" +
    "\u01b4\001\002\000\004\057\u01b5\001\002\000\004\050\u01b6" +
    "\001\002\000\004\051\u01b7\001\002\000\004\062\u01b8\001" +
    "\002\000\042\003\uff2f\005\uff2f\006\uff2f\013\uff2f\015\uff2f" +
    "\016\uff2f\017\uff2f\021\uff2f\024\uff2f\025\uff2f\050\uff2f\054" +
    "\uff2f\056\uff2f\060\uff2f\064\uff2f\065\uff2f\001\002\000\042" +
    "\003\uff35\005\uff35\006\uff35\013\uff35\015\uff35\016\uff35\017" +
    "\uff35\021\uff35\024\uff35\025\uff35\050\uff35\054\uff35\056\uff35" +
    "\060\uff35\064\uff35\065\uff35\001\002\000\004\047\u01bb\001" +
    "\002\000\006\064\110\065\105\001\002\000\004\020\u01bd" +
    "\001\002\000\010\050\077\064\110\065\105\001\002\000" +
    "\026\005\071\006\u01ca\013\u01cc\017\065\025\u01cd\050\077" +
    "\054\062\056\u01cf\064\067\065\105\001\002\000\020\023" +
    "\u01c0\035\136\036\134\037\132\040\130\041\131\042\135" +
    "\001\002\000\006\036\353\065\352\001\002\000\004\062" +
    "\u01c2\001\002\000\026\005\071\006\u01ca\013\u01cc\017\065" +
    "\025\u01cd\050\077\054\062\056\u01cf\064\067\065\105\001" +
    "\002\000\030\005\071\006\u01ca\013\u01cc\017\065\024\ufeb5" +
    "\025\u01cd\050\077\054\062\056\u01cf\064\067\065\105\001" +
    "\002\000\030\005\071\006\u01ca\013\u01cc\017\065\024\ufeb1" +
    "\025\u01cd\050\077\054\062\056\u01cf\064\067\065\105\001" +
    "\002\000\030\005\071\006\u01ca\013\u01cc\017\065\024\ufeb0" +
    "\025\u01cd\050\077\054\062\056\u01cf\064\067\065\105\001" +
    "\002\000\030\005\071\006\u01ca\013\u01cc\017\065\024\ufeb2" +
    "\025\u01cd\050\077\054\062\056\u01cf\064\067\065\105\001" +
    "\002\000\030\005\071\006\u01ca\013\u01cc\017\065\024\ufeb3" +
    "\025\u01cd\050\077\054\062\056\u01cf\064\067\065\105\001" +
    "\002\000\030\005\071\006\u01ca\013\u01cc\017\065\024\ufeaf" +
    "\025\u01cd\050\077\054\062\056\u01cf\064\067\065\105\001" +
    "\002\000\004\024\u024b\001\002\000\004\062\u0249\001\002" +
    "\000\030\005\071\006\u01ca\013\u01cc\017\065\024\ufeae\025" +
    "\u01cd\050\077\054\062\056\u01cf\064\067\065\105\001\002" +
    "\000\012\026\107\027\113\064\110\065\105\001\002\000" +
    "\004\022\u01d3\001\002\000\030\005\071\006\u01ca\013\u01cc" +
    "\017\065\024\ufeb4\025\u01cd\050\077\054\062\056\u01cf\064" +
    "\067\065\105\001\002\000\004\017\u01d0\001\002\000\004" +
    "\062\u01d1\001\002\000\004\024\ufead\001\002\000\004\024" +
    "\ufebe\001\002\000\012\026\107\027\113\064\110\065\105" +
    "\001\002\000\004\062\u01d5\001\002\000\026\005\071\006" +
    "\u01dc\013\u01cc\017\065\025\u01cd\050\077\054\062\056\u01e0" +
    "\064\067\065\105\001\002\000\030\005\071\006\u01dc\013" +
    "\u01cc\017\065\021\ufe62\025\u01cd\050\077\054\062\056\u01e0" +
    "\064\067\065\105\001\002\000\030\005\071\006\u01dc\013" +
    "\u01cc\017\065\021\ufe5f\025\u01cd\050\077\054\062\056\u01e0" +
    "\064\067\065\105\001\002\000\030\005\071\006\u01dc\013" +
    "\u01cc\017\065\021\ufe5e\025\u01cd\050\077\054\062\056\u01e0" +
    "\064\067\065\105\001\002\000\030\005\071\006\u01dc\013" +
    "\u01cc\017\065\021\ufe60\025\u01cd\050\077\054\062\056\u01e0" +
    "\064\067\065\105\001\002\000\030\005\071\006\u01dc\013" +
    "\u01cc\017\065\021\ufe61\025\u01cd\050\077\054\062\056\u01e0" +
    "\064\067\065\105\001\002\000\030\005\071\006\u01dc\013" +
    "\u01cc\017\065\021\ufe5d\025\u01cd\050\077\054\062\056\u01e0" +
    "\064\067\065\105\001\002\000\004\062\u01e9\001\002\000" +
    "\004\021\u01e7\001\002\000\030\005\071\006\u01dc\013\u01cc" +
    "\017\065\021\ufe5b\025\u01cd\050\077\054\062\056\u01e0\064" +
    "\067\065\105\001\002\000\030\005\071\006\u01dc\013\u01cc" +
    "\017\065\021\ufe5c\025\u01cd\050\077\054\062\056\u01e0\064" +
    "\067\065\105\001\002\000\006\017\u01e2\025\u01e1\001\002" +
    "\000\004\062\u01e4\001\002\000\004\062\u01e3\001\002\000" +
    "\004\021\ufe59\001\002\000\004\021\ufe5a\001\002\000\004" +
    "\021\ufe65\001\002\000\004\021\ufe66\001\002\000\004\062" +
    "\u01e8\001\002\000\040\005\ufe6d\006\ufe6d\013\ufe6d\015\ufe6d" +
    "\016\ufe6d\017\ufe6d\021\ufe6d\024\ufe6d\025\ufe6d\050\ufe6d\054" +
    "\ufe6d\056\ufe6d\060\ufe6d\064\ufe6d\065\ufe6d\001\002\000\030" +
    "\005\071\006\u01dc\013\u01cc\017\065\021\ufe63\025\u01cd\050" +
    "\077\054\062\056\u01e0\064\067\065\105\001\002\000\004" +
    "\021\ufe64\001\002\000\004\021\ufe67\001\002\000\004\021" +
    "\ufe6b\001\002\000\004\021\ufe6a\001\002\000\004\021\ufe68" +
    "\001\002\000\004\021\ufe69\001\002\000\004\021\ufe6c\001" +
    "\002\000\004\014\u01f2\001\002\000\004\062\u01f3\001\002" +
    "\000\032\005\071\006\u01fd\013\u01cc\015\u01f7\016\u01f4\017" +
    "\065\025\u01cd\050\077\054\062\056\u0200\064\067\065\105" +
    "\001\002\000\004\062\u0246\001\002\000\034\005\071\006" +
    "\u01fd\013\u01cc\015\u01f7\016\u01f4\017\065\025\u01cd\050\077" +
    "\054\062\056\u0200\060\ufe9a\064\067\065\105\001\002\000" +
    "\034\005\071\006\u01fd\013\u01cc\015\u01f7\016\u01f4\017\065" +
    "\025\u01cd\050\077\054\062\056\u0200\060\ufe9d\064\067\065" +
    "\105\001\002\000\012\026\107\027\113\064\110\065\105" +
    "\001\002\000\034\005\071\006\u01fd\013\u01cc\015\u01f7\016" +
    "\u01f4\017\065\025\u01cd\050\077\054\062\056\u0200\060\ufe9c" +
    "\064\067\065\105\001\002\000\034\005\071\006\u01fd\013" +
    "\u01cc\015\u01f7\016\u01f4\017\065\025\u01cd\050\077\054\062" +
    "\056\u0200\060\ufe9e\064\067\065\105\001\002\000\034\005" +
    "\071\006\u01fd\013\u01cc\015\u01f7\016\u01f4\017\065\025\u01cd" +
    "\050\077\054\062\056\u0200\060\ufe9f\064\067\065\105\001" +
    "\002\000\034\005\071\006\u01fd\013\u01cc\015\u01f7\016\u01f4" +
    "\017\065\025\u01cd\050\077\054\062\056\u0200\060\ufe9b\064" +
    "\067\065\105\001\002\000\004\060\u0207\001\002\000\004" +
    "\062\u0205\001\002\000\034\005\071\006\u01fd\013\u01cc\015" +
    "\u01f7\016\u01f4\017\065\025\u01cd\050\077\054\062\056\u0200" +
    "\060\ufe99\064\067\065\105\001\002\000\034\005\071\006" +
    "\u01fd\013\u01cc\015\u01f7\016\u01f4\017\065\025\u01cd\050\077" +
    "\054\062\056\u0200\060\ufea0\064\067\065\105\001\002\000" +
    "\004\017\u0201\001\002\000\004\062\u0202\001\002\000\004" +
    "\060\ufe98\001\002\000\004\060\ufeaa\001\002\000\004\060" +
    "\ufea3\001\002\000\034\005\071\006\u01fd\013\u01cc\015\u01f7" +
    "\016\u01f4\017\065\025\u01cd\050\077\054\062\056\u0200\060" +
    "\ufea1\064\067\065\105\001\002\000\004\060\ufea2\001\002" +
    "\000\004\013\u0208\001\002\000\004\062\u0209\001\002\000" +
    "\040\005\ufeac\006\ufeac\013\ufeac\015\ufeac\016\ufeac\017\ufeac" +
    "\021\ufeac\024\ufeac\025\ufeac\050\ufeac\054\ufeac\056\ufeac\060" +
    "\ufeac\064\ufeac\065\ufeac\001\002\000\004\060\ufea6\001\002" +
    "\000\004\060\ufea9\001\002\000\004\060\ufea8\001\002\000" +
    "\004\060\ufea5\001\002\000\004\014\u0210\001\002\000\004" +
    "\060\ufe96\001\002\000\004\062\u0211\001\002\000\032\005" +
    "\071\006\u021a\013\u01cc\015\u0214\016\u0212\017\065\025\u01cd" +
    "\050\077\054\062\056\u021e\064\067\065\105\001\002\000" +
    "\004\062\u022c\001\002\000\034\005\071\006\u021a\013\u01cc" +
    "\015\u0214\016\u0212\017\065\025\u01cd\050\077\054\062\056" +
    "\u021e\060\ufe83\064\067\065\105\001\002\000\012\026\107" +
    "\027\113\064\110\065\105\001\002\000\034\005\071\006" +
    "\u021a\013\u01cc\015\u0214\016\u0212\017\065\025\u01cd\050\077" +
    "\054\062\056\u021e\060\ufe86\064\067\065\105\001\002\000" +
    "\034\005\071\006\u021a\013\u01cc\015\u0214\016\u0212\017\065" +
    "\025\u01cd\050\077\054\062\056\u021e\060\ufe85\064\067\065" +
    "\105\001\002\000\034\005\071\006\u021a\013\u01cc\015\u0214" +
    "\016\u0212\017\065\025\u01cd\050\077\054\062\056\u021e\060" +
    "\ufe87\064\067\065\105\001\002\000\034\005\071\006\u021a" +
    "\013\u01cc\015\u0214\016\u0212\017\065\025\u01cd\050\077\054" +
    "\062\056\u021e\060\ufe88\064\067\065\105\001\002\000\034" +
    "\005\071\006\u021a\013\u01cc\015\u0214\016\u0212\017\065\025" +
    "\u01cd\050\077\054\062\056\u021e\060\ufe84\064\067\065\105" +
    "\001\002\000\004\062\u0223\001\002\000\034\005\071\006" +
    "\u021a\013\u01cc\015\u0214\016\u0212\017\065\025\u01cd\050\077" +
    "\054\062\056\u021e\060\ufe82\064\067\065\105\001\002\000" +
    "\004\060\ufeab\001\002\000\034\005\071\006\u021a\013\u01cc" +
    "\015\u0214\016\u0212\017\065\025\u01cd\050\077\054\062\056" +
    "\u021e\060\ufe89\064\067\065\105\001\002\000\004\017\u021f" +
    "\001\002\000\004\062\u0220\001\002\000\004\060\ufe81\001" +
    "\002\000\004\060\ufe95\001\002\000\004\060\ufe8c\001\002" +
    "\000\034\005\071\006\u021a\013\u01cc\015\u0214\016\u0212\017" +
    "\065\025\u01cd\050\077\054\062\056\u021e\060\ufe8a\064\067" +
    "\065\105\001\002\000\004\060\ufe8b\001\002\000\004\060" +
    "\ufe8f\001\002\000\004\060\ufe94\001\002\000\004\060\ufe93" +
    "\001\002\000\004\060\ufe8e\001\002\000\004\060\ufe92\001" +
    "\002\000\004\060\ufe90\001\002\000\004\060\ufe8d\001\002" +
    "\000\026\005\071\006\u0233\013\u01cc\017\065\025\u01cd\050" +
    "\077\054\062\056\u0237\064\067\065\105\001\002\000\030" +
    "\005\071\006\u0233\013\u01cc\017\065\025\u01cd\050\077\054" +
    "\062\056\u0237\060\ufe70\064\067\065\105\001\002\000\030" +
    "\005\071\006\u0233\013\u01cc\017\065\025\u01cd\050\077\054" +
    "\062\056\u0237\060\ufe73\064\067\065\105\001\002\000\030" +
    "\005\071\006\u0233\013\u01cc\017\065\025\u01cd\050\077\054" +
    "\062\056\u0237\060\ufe72\064\067\065\105\001\002\000\030" +
    "\005\071\006\u0233\013\u01cc\017\065\025\u01cd\050\077\054" +
    "\062\056\u0237\060\ufe74\064\067\065\105\001\002\000\030" +
    "\005\071\006\u0233\013\u01cc\017\065\025\u01cd\050\077\054" +
    "\062\056\u0237\060\ufe75\064\067\065\105\001\002\000\030" +
    "\005\071\006\u0233\013\u01cc\017\065\025\u01cd\050\077\054" +
    "\062\056\u0237\060\ufe71\064\067\065\105\001\002\000\004" +
    "\062\u023c\001\002\000\004\060\ufe91\001\002\000\030\005" +
    "\071\006\u0233\013\u01cc\017\065\025\u01cd\050\077\054\062" +
    "\056\u0237\060\ufe6f\064\067\065\105\001\002\000\030\005" +
    "\071\006\u0233\013\u01cc\017\065\025\u01cd\050\077\054\062" +
    "\056\u0237\060\ufe76\064\067\065\105\001\002\000\004\017" +
    "\u0238\001\002\000\004\062\u0239\001\002\000\004\060\ufe6e" +
    "\001\002\000\004\060\ufe80\001\002\000\004\060\ufe79\001" +
    "\002\000\030\005\071\006\u0233\013\u01cc\017\065\025\u01cd" +
    "\050\077\054\062\056\u0237\060\ufe77\064\067\065\105\001" +
    "\002\000\004\060\ufe78\001\002\000\004\060\ufe7c\001\002" +
    "\000\004\060\ufe7f\001\002\000\004\060\ufe7e\001\002\000" +
    "\004\060\ufe7b\001\002\000\004\060\ufe7d\001\002\000\004" +
    "\060\ufe7a\001\002\000\004\060\ufea7\001\002\000\004\060" +
    "\ufea4\001\002\000\026\005\071\006\u0233\013\u01cc\017\065" +
    "\025\u01cd\050\077\054\062\056\u0237\064\067\065\105\001" +
    "\002\000\004\060\ufe97\001\002\000\004\024\ufeb8\001\002" +
    "\000\030\005\071\006\u01ca\013\u01cc\017\065\024\ufeb6\025" +
    "\u01cd\050\077\054\062\056\u01cf\064\067\065\105\001\002" +
    "\000\004\024\ufeb7\001\002\000\004\064\u024c\001\002\000" +
    "\004\062\u024d\001\002\000\042\003\ufec3\005\ufec3\006\ufec3" +
    "\013\ufec3\015\ufec3\016\ufec3\017\ufec3\021\ufec3\024\ufec3\025" +
    "\ufec3\050\ufec3\054\ufec3\056\ufec3\060\ufec3\064\ufec3\065\ufec3" +
    "\001\002\000\004\024\ufeb9\001\002\000\004\024\ufebd\001" +
    "\002\000\004\024\ufebc\001\002\000\004\024\ufeba\001\002" +
    "\000\004\024\ufebb\001\002\000\004\024\ufebf\001\002\000" +
    "\004\024\u0255\001\002\000\004\064\u0256\001\002\000\004" +
    "\062\u0257\001\002\000\042\003\ufec2\005\ufec2\006\ufec2\013" +
    "\ufec2\015\ufec2\016\ufec2\017\ufec2\021\ufec2\024\ufec2\025\ufec2" +
    "\050\ufec2\054\ufec2\056\ufec2\060\ufec2\064\ufec2\065\ufec2\001" +
    "\002\000\020\002\uff45\003\uff45\006\uff45\031\uff45\033\uff45" +
    "\060\uff45\064\uff45\001\002\000\020\002\uff47\003\uff47\006" +
    "\uff47\031\uff47\033\uff47\060\uff47\064\uff47\001\002\000\006" +
    "\047\u025c\055\u025b\001\002\000\010\007\u0260\010\u0262\011" +
    "\u0261\001\002\000\016\026\107\027\113\050\077\063\u0196" +
    "\064\110\065\105\001\002\000\004\062\u025f\001\002\000" +
    "\042\003\uff36\005\uff36\006\uff36\013\uff36\015\uff36\016\uff36" +
    "\017\uff36\021\uff36\024\uff36\025\uff36\050\uff36\054\uff36\056" +
    "\uff36\060\uff36\064\uff36\065\uff36\001\002\000\042\003\uff37" +
    "\005\uff37\006\uff37\013\uff37\015\uff37\016\uff37\017\uff37\021" +
    "\uff37\024\uff37\025\uff37\050\uff37\054\uff37\056\uff37\060\uff37" +
    "\064\uff37\065\uff37\001\002\000\014\047\uff2b\051\uff2b\052" +
    "\uff2b\055\uff2b\062\uff2b\001\002\000\014\047\uff2c\051\uff2c" +
    "\052\uff2c\055\uff2c\062\uff2c\001\002\000\014\047\uff2a\051" +
    "\uff2a\052\uff2a\055\uff2a\062\uff2a\001\002\000\006\047\u0265" +
    "\062\u0264\001\002\000\042\003\uff3a\005\uff3a\006\uff3a\013" +
    "\uff3a\015\uff3a\016\uff3a\017\uff3a\021\uff3a\024\uff3a\025\uff3a" +
    "\050\uff3a\054\uff3a\056\uff3a\060\uff3a\064\uff3a\065\uff3a\001" +
    "\002\000\014\026\107\027\113\063\u0196\064\u0194\065\105" +
    "\001\002\000\004\062\u0268\001\002\000\042\003\uff38\005" +
    "\uff38\006\uff38\013\uff38\015\uff38\016\uff38\017\uff38\021\uff38" +
    "\024\uff38\025\uff38\050\uff38\054\uff38\056\uff38\060\uff38\064" +
    "\uff38\065\uff38\001\002\000\042\003\uff39\005\uff39\006\uff39" +
    "\013\uff39\015\uff39\016\uff39\017\uff39\021\uff39\024\uff39\025" +
    "\uff39\050\uff39\054\uff39\056\uff39\060\uff39\064\uff39\065\uff39" +
    "\001\002\000\020\002\uff48\003\uff48\006\uff48\031\uff48\033" +
    "\uff48\060\uff48\064\uff48\001\002\000\020\002\uff4c\003\uff4c" +
    "\006\uff4c\031\uff4c\033\uff4c\060\uff4c\064\uff4c\001\002\000" +
    "\004\055\u026c\001\002\000\010\007\u0260\010\u0262\011\u0261" +
    "\001\002\000\012\051\uff41\052\u026e\055\uff41\062\uff41\001" +
    "\002\000\006\012\055\064\054\001\002\000\010\051\uff3f" +
    "\055\uff3f\062\uff3f\001\002\000\010\007\u0260\010\u0262\011" +
    "\u0261\001\002\000\012\051\uff40\052\u0272\055\uff40\062\uff40" +
    "\001\002\000\006\012\055\064\054\001\002\000\010\051" +
    "\uff3e\055\uff3e\062\uff3e\001\002\000\004\062\u0277\001\002" +
    "\000\004\062\u0276\001\002\000\012\003\uffe1\006\uffe1\031" +
    "\uffe1\033\uffe1\001\002\000\012\003\uffdf\006\uffdf\031\uffdf" +
    "\033\uffdf\001\002\000\014\003\042\006\045\033\044\060" +
    "\043\064\040\001\002\000\004\064\u027c\001\002\000\004" +
    "\062\u027b\001\002\000\012\003\uffe0\006\uffe0\031\uffe0\033" +
    "\uffe0\001\002\000\004\050\u027d\001\002\000\006\012\055" +
    "\064\054\001\002\000\004\062\u027f\001\002\000\030\003" +
    "\103\005\071\006\076\013\101\017\065\025\104\050\077" +
    "\054\062\060\100\064\067\065\105\001\002\000\016\003" +
    "\ufff0\006\ufff0\031\ufff0\033\ufff0\060\ufff0\064\ufff0\001\002" +
    "\000\012\003\uffd1\006\uffd1\031\uffd1\033\uffd1\001\002\000" +
    "\012\003\uffd3\006\uffd3\031\uffd3\033\uffd3\001\002\000\010" +
    "\007\u0260\010\u0262\011\u0261\001\002\000\006\047\u0286\062" +
    "\u0285\001\002\000\014\003\uffd0\006\uffd0\033\uffd0\060\uffd0" +
    "\064\uffd0\001\002\000\014\026\107\027\113\063\u0196\064" +
    "\110\065\105\001\002\000\004\062\u0288\001\002\000\014" +
    "\003\uffcf\006\uffcf\033\uffcf\060\uffcf\064\uffcf\001\002\000" +
    "\012\003\uffd5\006\uffd5\031\uffd5\033\uffd5\001\002\000\014" +
    "\003\042\006\045\033\044\060\043\064\040\001\002\000" +
    "\012\003\ufff5\006\ufff5\031\ufff5\033\ufff5\001\002\000\006" +
    "\003\u0292\050\u0293\001\002\000\004\050\u028e\001\002\000" +
    "\006\012\055\064\054\001\002\000\004\062\u0290\001\002" +
    "\000\030\003\103\005\071\006\076\013\101\017\065\025" +
    "\104\050\077\054\062\060\100\064\067\065\105\001\002" +
    "\000\016\003\uffee\006\uffee\031\uffee\033\uffee\060\uffee\064" +
    "\uffee\001\002\000\006\012\055\064\054\001\002\000\006" +
    "\012\055\064\054\001\002\000\004\062\u0295\001\002\000" +
    "\030\003\103\005\071\006\076\013\101\017\065\025\104" +
    "\050\077\054\062\060\100\064\067\065\105\001\002\000" +
    "\016\003\ufff1\006\ufff1\031\ufff1\033\ufff1\060\ufff1\064\ufff1" +
    "\001\002\000\004\062\u0298\001\002\000\030\003\103\005" +
    "\071\006\076\013\101\017\065\025\104\050\077\054\062" +
    "\060\100\064\067\065\105\001\002\000\016\003\uffed\006" +
    "\uffed\031\uffed\033\uffed\060\uffed\064\uffed\001\002\000\006" +
    "\050\u029c\062\u029b\001\002\000\014\003\042\006\045\033" +
    "\044\060\043\064\040\001\002\000\006\012\055\064\054" +
    "\001\002\000\006\051\u029e\062\057\001\002\000\004\055" +
    "\u029f\001\002\000\010\007\u0260\010\u0262\011\u0261\001\002" +
    "\000\004\062\u02a1\001\002\000\030\003\u02af\005\071\006" +
    "\u02ac\013\u02ae\017\u02a5\025\u02b0\050\077\054\062\060\u02ad" +
    "\064\067\065\105\001\002\000\030\003\u02af\005\071\006" +
    "\u02ac\013\u02ae\017\u02a5\025\u02b0\050\077\054\062\060\u02ad" +
    "\064\067\065\105\001\002\000\030\003\u02af\005\071\006" +
    "\u02ac\013\u02ae\017\u02a5\025\u02b0\050\077\054\062\060\u02ad" +
    "\064\067\065\105\001\002\000\030\003\u02af\005\071\006" +
    "\u02ac\013\u02ae\017\u02a5\025\u02b0\050\077\054\062\060\u02ad" +
    "\064\067\065\105\001\002\000\004\064\u0338\001\002\000" +
    "\030\003\u02af\005\071\006\u02ac\013\u02ae\017\u02a5\025\u02b0" +
    "\050\077\054\062\060\u02ad\064\067\065\105\001\002\000" +
    "\030\003\u02af\005\071\006\u02ac\013\u02ae\017\u02a5\025\u02b0" +
    "\050\077\054\062\060\u02ad\064\067\065\105\001\002\000" +
    "\030\003\u02af\005\071\006\u02ac\013\u02ae\017\u02a5\025\u02b0" +
    "\050\077\054\062\060\u02ad\064\067\065\105\001\002\000" +
    "\030\003\u02af\005\071\006\u02ac\013\u02ae\017\u02a5\025\u02b0" +
    "\050\077\054\062\060\u02ad\064\067\065\105\001\002\000" +
    "\012\003\ufff9\006\ufff9\031\ufff9\033\ufff9\001\002\000\012" +
    "\003\uffc5\006\uffc5\031\uffc5\033\uffc5\001\002\000\004\062" +
    "\u0332\001\002\000\006\003\u032f\030\u032e\001\002\000\012" +
    "\026\107\027\113\064\110\065\105\001\002\000\006\030" +
    "\u02d3\062\u02d4\001\002\000\004\022\u02b3\001\002\000\030" +
    "\003\u02af\005\071\006\u02ac\013\u02ae\017\u02a5\025\u02b0\050" +
    "\077\054\062\060\u02ad\064\067\065\105\001\002\000\012" +
    "\003\uffce\006\uffce\031\uffce\033\uffce\001\002\000\012\026" +
    "\107\027\113\064\110\065\105\001\002\000\004\062\u02b5" +
    "\001\002\000\026\005\071\006\u02bd\013\u02ae\017\u02a5\025" +
    "\u02b0\050\077\054\062\056\u02c0\064\067\065\105\001\002" +
    "\000\030\005\071\006\u02bd\013\u02ae\017\u02a5\021\uff75\025" +
    "\u02b0\050\077\054\062\056\u02c0\064\067\065\105\001\002" +
    "\000\030\005\071\006\u02bd\013\u02ae\017\u02a5\021\uff78\025" +
    "\u02b0\050\077\054\062\056\u02c0\064\067\065\105\001\002" +
    "\000\030\005\071\006\u02bd\013\u02ae\017\u02a5\021\uff74\025" +
    "\u02b0\050\077\054\062\056\u02c0\064\067\065\105\001\002" +
    "\000\030\005\071\006\u02bd\013\u02ae\017\u02a5\021\uff72\025" +
    "\u02b0\050\077\054\062\056\u02c0\064\067\065\105\001\002" +
    "\000\030\005\071\006\u02bd\013\u02ae\017\u02a5\021\uff76\025" +
    "\u02b0\050\077\054\062\056\u02c0\064\067\065\105\001\002" +
    "\000\030\005\071\006\u02bd\013\u02ae\017\u02a5\021\uff77\025" +
    "\u02b0\050\077\054\062\056\u02c0\064\067\065\105\001\002" +
    "\000\030\005\071\006\u02bd\013\u02ae\017\u02a5\021\uff73\025" +
    "\u02b0\050\077\054\062\056\u02c0\064\067\065\105\001\002" +
    "\000\004\062\u02ca\001\002\000\004\021\u02c8\001\002\000" +
    "\030\005\071\006\u02bd\013\u02ae\017\u02a5\021\uff79\025\u02b0" +
    "\050\077\054\062\056\u02c0\064\067\065\105\001\002\000" +
    "\010\017\u02c3\025\u02c2\030\u02c1\001\002\000\004\062\u02c6" +
    "\001\002\000\004\062\u02c5\001\002\000\004\062\u02c4\001" +
    "\002\000\004\021\uff6f\001\002\000\004\021\uff71\001\002" +
    "\000\004\021\uff70\001\002\000\004\021\uff83\001\002\000" +
    "\004\062\u02c9\001\002\000\042\003\uff84\005\uff84\006\uff84" +
    "\013\uff84\015\uff84\016\uff84\017\uff84\021\uff84\024\uff84\025" +
    "\uff84\050\uff84\054\uff84\056\uff84\060\uff84\064\uff84\065\uff84" +
    "\001\002\000\030\005\071\006\u02bd\013\u02ae\017\u02a5\021" +
    "\uff7a\025\u02b0\050\077\054\062\056\u02c0\064\067\065\105" +
    "\001\002\000\004\021\uff7b\001\002\000\004\021\uff7d\001" +
    "\002\000\004\021\uff81\001\002\000\004\021\uff80\001\002" +
    "\000\004\021\uff7c\001\002\000\004\021\uff7e\001\002\000" +
    "\004\021\uff82\001\002\000\004\021\uff7f\001\002\000\004" +
    "\062\u02d6\001\002\000\030\003\u02af\005\071\006\u02ac\013" +
    "\u02ae\017\u02a5\025\u02b0\050\077\054\062\060\u02ad\064\067" +
    "\065\105\001\002\000\012\003\uffc4\006\uffc4\031\uffc4\033" +
    "\uffc4\001\002\000\012\003\uffe3\006\uffe3\031\uffe3\033\uffe3" +
    "\001\002\000\004\014\u02d8\001\002\000\004\062\u02d9\001" +
    "\002\000\032\005\071\006\u02e4\013\u02ae\015\u02db\016\u02da" +
    "\017\u02a5\025\u02b0\050\077\054\062\056\u02e6\064\067\065" +
    "\105\001\002\000\004\062\u032c\001\002\000\012\026\107" +
    "\027\113\064\110\065\105\001\002\000\034\005\071\006" +
    "\u02e4\013\u02ae\015\u02db\016\u02da\017\u02a5\025\u02b0\050\077" +
    "\054\062\056\u02e6\060\uffb4\064\067\065\105\001\002\000" +
    "\034\005\071\006\u02e4\013\u02ae\015\u02db\016\u02da\017\u02a5" +
    "\025\u02b0\050\077\054\062\056\u02e6\060\uffb7\064\067\065" +
    "\105\001\002\000\034\005\071\006\u02e4\013\u02ae\015\u02db" +
    "\016\u02da\017\u02a5\025\u02b0\050\077\054\062\056\u02e6\060" +
    "\uffb3\064\067\065\105\001\002\000\034\005\071\006\u02e4" +
    "\013\u02ae\015\u02db\016\u02da\017\u02a5\025\u02b0\050\077\054" +
    "\062\056\u02e6\060\uffb0\064\067\065\105\001\002\000\034" +
    "\005\071\006\u02e4\013\u02ae\015\u02db\016\u02da\017\u02a5\025" +
    "\u02b0\050\077\054\062\056\u02e6\060\uffb5\064\067\065\105" +
    "\001\002\000\034\005\071\006\u02e4\013\u02ae\015\u02db\016" +
    "\u02da\017\u02a5\025\u02b0\050\077\054\062\056\u02e6\060\uffb6" +
    "\064\067\065\105\001\002\000\034\005\071\006\u02e4\013" +
    "\u02ae\015\u02db\016\u02da\017\u02a5\025\u02b0\050\077\054\062" +
    "\056\u02e6\060\uffb2\064\067\065\105\001\002\000\004\060" +
    "\u02ec\001\002\000\004\062\u02ea\001\002\000\034\005\071" +
    "\006\u02e4\013\u02ae\015\u02db\016\u02da\017\u02a5\025\u02b0\050" +
    "\077\054\062\056\u02e6\060\uffb1\064\067\065\105\001\002" +
    "\000\004\030\u02e7\001\002\000\004\062\u02e8\001\002\000" +
    "\004\060\uffaf\001\002\000\004\060\uffbb\001\002\000\034" +
    "\005\071\006\u02e4\013\u02ae\015\u02db\016\u02da\017\u02a5\025" +
    "\u02b0\050\077\054\062\056\u02e6\060\uffb8\064\067\065\105" +
    "\001\002\000\004\060\uffb9\001\002\000\004\013\u02ed\001" +
    "\002\000\004\062\u02ee\001\002\000\042\003\uffc3\005\uffc3" +
    "\006\uffc3\013\uffc3\015\uffc3\016\uffc3\017\uffc3\021\uffc3\024" +
    "\uffc3\025\uffc3\050\uffc3\054\uffc3\056\uffc3\060\uffc3\064\uffc3" +
    "\065\uffc3\001\002\000\004\060\uffbd\001\002\000\004\060" +
    "\uffc0\001\002\000\004\060\uffbf\001\002\000\004\060\uffba" +
    "\001\002\000\004\060\uffbc\001\002\000\004\060\uffc1\001" +
    "\002\000\004\060\uffbe\001\002\000\004\014\u02f8\001\002" +
    "\000\004\060\uffad\001\002\000\004\062\u02f9\001\002\000" +
    "\032\005\071\006\u0304\013\u02ae\015\u02fc\016\u02fa\017\u02a5" +
    "\025\u02b0\050\077\054\062\056\u0306\064\067\065\105\001" +
    "\002\000\004\062\u0314\001\002\000\034\005\071\006\u0304" +
    "\013\u02ae\015\u02fc\016\u02fa\017\u02a5\025\u02b0\050\077\054" +
    "\062\056\u0306\060\uff8d\064\067\065\105\001\002\000\012" +
    "\026\107\027\113\064\110\065\105\001\002\000\034\005" +
    "\071\006\u0304\013\u02ae\015\u02fc\016\u02fa\017\u02a5\025\u02b0" +
    "\050\077\054\062\056\u0306\060\uff8a\064\067\065\105\001" +
    "\002\000\034\005\071\006\u0304\013\u02ae\015\u02fc\016\u02fa" +
    "\017\u02a5\025\u02b0\050\077\054\062\056\u0306\060\uff89\064" +
    "\067\065\105\001\002\000\034\005\071\006\u0304\013\u02ae" +
    "\015\u02fc\016\u02fa\017\u02a5\025\u02b0\050\077\054\062\056" +
    "\u0306\060\uff86\064\067\065\105\001\002\000\034\005\071" +
    "\006\u0304\013\u02ae\015\u02fc\016\u02fa\017\u02a5\025\u02b0\050" +
    "\077\054\062\056\u0306\060\uff8b\064\067\065\105\001\002" +
    "\000\034\005\071\006\u0304\013\u02ae\015\u02fc\016\u02fa\017" +
    "\u02a5\025\u02b0\050\077\054\062\056\u0306\060\uff8c\064\067" +
    "\065\105\001\002\000\034\005\071\006\u0304\013\u02ae\015" +
    "\u02fc\016\u02fa\017\u02a5\025\u02b0\050\077\054\062\056\u0306" +
    "\060\uff88\064\067\065\105\001\002\000\004\060\uffc2\001" +
    "\002\000\004\062\u030a\001\002\000\034\005\071\006\u0304" +
    "\013\u02ae\015\u02fc\016\u02fa\017\u02a5\025\u02b0\050\077\054" +
    "\062\056\u0306\060\uff87\064\067\065\105\001\002\000\004" +
    "\030\u0307\001\002\000\004\062\u0308\001\002\000\004\060" +
    "\uff85\001\002\000\004\060\uff91\001\002\000\034\005\071" +
    "\006\u0304\013\u02ae\015\u02fc\016\u02fa\017\u02a5\025\u02b0\050" +
    "\077\054\062\056\u0306\060\uff8e\064\067\065\105\001\002" +
    "\000\004\060\uff8f\001\002\000\004\060\uff93\001\002\000" +
    "\004\060\uff98\001\002\000\004\060\uff97\001\002\000\004" +
    "\060\uff90\001\002\000\004\060\uff92\001\002\000\004\060" +
    "\uff96\001\002\000\004\060\uff94\001\002\000\004\060\uff99" +
    "\001\002\000\026\005\071\006\u031d\013\u02ae\017\u02a5\025" +
    "\u02b0\050\077\054\062\056\u031f\064\067\065\105\001\002" +
    "\000\004\060\uff95\001\002\000\030\005\071\006\u031d\013" +
    "\u02ae\017\u02a5\025\u02b0\050\077\054\062\056\u031f\060\uffa2" +
    "\064\067\065\105\001\002\000\030\005\071\006\u031d\013" +
    "\u02ae\017\u02a5\025\u02b0\050\077\054\062\056\u031f\060\uff9f" +
    "\064\067\065\105\001\002\000\030\005\071\006\u031d\013" +
    "\u02ae\017\u02a5\025\u02b0\050\077\054\062\056\u031f\060\uff9e" +
    "\064\067\065\105\001\002\000\030\005\071\006\u031d\013" +
    "\u02ae\017\u02a5\025\u02b0\050\077\054\062\056\u031f\060\uff9b" +
    "\064\067\065\105\001\002\000\030\005\071\006\u031d\013" +
    "\u02ae\017\u02a5\025\u02b0\050\077\054\062\056\u031f\060\uffa0" +
    "\064\067\065\105\001\002\000\030\005\071\006\u031d\013" +
    "\u02ae\017\u02a5\025\u02b0\050\077\054\062\056\u031f\060\uffa1" +
    "\064\067\065\105\001\002\000\030\005\071\006\u031d\013" +
    "\u02ae\017\u02a5\025\u02b0\050\077\054\062\056\u031f\060\uff9d" +
    "\064\067\065\105\001\002\000\004\062\u0323\001\002\000" +
    "\030\005\071\006\u031d\013\u02ae\017\u02a5\025\u02b0\050\077" +
    "\054\062\056\u031f\060\uff9c\064\067\065\105\001\002\000" +
    "\004\030\u0320\001\002\000\004\062\u0321\001\002\000\004" +
    "\060\uff9a\001\002\000\004\060\uffa6\001\002\000\030\005" +
    "\071\006\u031d\013\u02ae\017\u02a5\025\u02b0\050\077\054\062" +
    "\056\u031f\060\uffa3\064\067\065\105\001\002\000\004\060" +
    "\uffa4\001\002\000\004\060\uffa8\001\002\000\004\060\uffab" +
    "\001\002\000\004\060\uffaa\001\002\000\004\060\uffa5\001" +
    "\002\000\004\060\uffa7\001\002\000\004\060\uffa9\001\002" +
    "\000\004\060\uffac\001\002\000\026\005\071\006\u031d\013" +
    "\u02ae\017\u02a5\025\u02b0\050\077\054\062\056\u031f\064\067" +
    "\065\105\001\002\000\004\060\uffae\001\002\000\004\062" +
    "\u0331\001\002\000\004\062\u0330\001\002\000\012\003\uffe2" +
    "\006\uffe2\031\uffe2\033\uffe2\001\002\000\012\003\uffe4\006" +
    "\uffe4\031\uffe4\033\uffe4\001\002\000\030\003\u02af\005\071" +
    "\006\u02ac\013\u02ae\017\u02a5\025\u02b0\050\077\054\062\060" +
    "\u02ad\064\067\065\105\001\002\000\012\003\uffc6\006\uffc6" +
    "\031\uffc6\033\uffc6\001\002\000\012\003\uffc7\006\uffc7\031" +
    "\uffc7\033\uffc7\001\002\000\012\003\uffcb\006\uffcb\031\uffcb" +
    "\033\uffcb\001\002\000\012\003\uffca\006\uffca\031\uffca\033" +
    "\uffca\001\002\000\012\003\uffcd\006\uffcd\031\uffcd\033\uffcd" +
    "\001\002\000\004\047\u0339\001\002\000\006\064\110\065" +
    "\105\001\002\000\004\020\u033b\001\002\000\010\050\077" +
    "\064\110\065\105\001\002\000\026\005\071\006\u0348\013" +
    "\u02ae\017\u02a5\025\u02b0\050\077\054\062\056\u034b\064\067" +
    "\065\105\001\002\000\020\023\u033e\035\136\036\134\037" +
    "\132\040\130\041\131\042\135\001\002\000\006\036\353" +
    "\065\352\001\002\000\004\062\u0340\001\002\000\026\005" +
    "\071\006\u0348\013\u02ae\017\u02a5\025\u02b0\050\077\054\062" +
    "\056\u034b\064\067\065\105\001\002\000\030\005\071\006" +
    "\u0348\013\u02ae\017\u02a5\024\uff5d\025\u02b0\050\077\054\062" +
    "\056\u034b\064\067\065\105\001\002\000\030\005\071\006" +
    "\u0348\013\u02ae\017\u02a5\024\uff60\025\u02b0\050\077\054\062" +
    "\056\u034b\064\067\065\105\001\002\000\030\005\071\006" +
    "\u0348\013\u02ae\017\u02a5\024\uff5c\025\u02b0\050\077\054\062" +
    "\056\u034b\064\067\065\105\001\002\000\030\005\071\006" +
    "\u0348\013\u02ae\017\u02a5\024\uff62\025\u02b0\050\077\054\062" +
    "\056\u034b\064\067\065\105\001\002\000\030\005\071\006" +
    "\u0348\013\u02ae\017\u02a5\024\uff5e\025\u02b0\050\077\054\062" +
    "\056\u034b\064\067\065\105\001\002\000\030\005\071\006" +
    "\u0348\013\u02ae\017\u02a5\024\uff5f\025\u02b0\050\077\054\062" +
    "\056\u034b\064\067\065\105\001\002\000\030\005\071\006" +
    "\u0348\013\u02ae\017\u02a5\024\uff5b\025\u02b0\050\077\054\062" +
    "\056\u034b\064\067\065\105\001\002\000\004\062\u0356\001" +
    "\002\000\004\024\u0353\001\002\000\030\005\071\006\u0348" +
    "\013\u02ae\017\u02a5\024\uff61\025\u02b0\050\077\054\062\056" +
    "\u034b\064\067\065\105\001\002\000\010\017\u034e\025\u034d" +
    "\030\u034c\001\002\000\004\062\u0351\001\002\000\004\062" +
    "\u0350\001\002\000\004\062\u034f\001\002\000\004\024\uff58" +
    "\001\002\000\004\024\uff5a\001\002\000\004\024\uff59\001" +
    "\002\000\004\024\uff6b\001\002\000\004\064\u0354\001\002" +
    "\000\004\062\u0355\001\002\000\042\003\uff6e\005\uff6e\006" +
    "\uff6e\013\uff6e\015\uff6e\016\uff6e\017\uff6e\021\uff6e\024\uff6e" +
    "\025\uff6e\050\uff6e\054\uff6e\056\uff6e\060\uff6e\064\uff6e\065" +
    "\uff6e\001\002\000\030\005\071\006\u0348\013\u02ae\017\u02a5" +
    "\024\uff63\025\u02b0\050\077\054\062\056\u034b\064\067\065" +
    "\105\001\002\000\004\024\uff64\001\002\000\004\024\uff65" +
    "\001\002\000\004\024\uff69\001\002\000\004\024\uff68\001" +
    "\002\000\004\024\uff6c\001\002\000\004\024\uff66\001\002" +
    "\000\004\024\uff6a\001\002\000\004\024\uff67\001\002\000" +
    "\004\024\u0360\001\002\000\004\064\u0361\001\002\000\004" +
    "\062\u0362\001\002\000\042\003\uff6d\005\uff6d\006\uff6d\013" +
    "\uff6d\015\uff6d\016\uff6d\017\uff6d\021\uff6d\024\uff6d\025\uff6d" +
    "\050\uff6d\054\uff6d\056\uff6d\060\uff6d\064\uff6d\065\uff6d\001" +
    "\002\000\012\003\uffc8\006\uffc8\031\uffc8\033\uffc8\001\002" +
    "\000\012\003\uffc9\006\uffc9\031\uffc9\033\uffc9\001\002\000" +
    "\012\003\uffcc\006\uffcc\031\uffcc\033\uffcc\001\002\000\012" +
    "\003\ufff3\006\ufff3\031\ufff3\033\ufff3\001\002\000\006\003" +
    "\u0370\050\u0371\001\002\000\004\050\u0369\001\002\000\006" +
    "\012\055\064\054\001\002\000\004\055\u036b\001\002\000" +
    "\004\051\u036c\001\002\000\010\007\u0260\010\u0262\011\u0261" +
    "\001\002\000\004\062\u036e\001\002\000\030\003\u02af\005" +
    "\071\006\u02ac\013\u02ae\017\u02a5\025\u02b0\050\077\054\062" +
    "\060\u02ad\064\067\065\105\001\002\000\012\003\ufff8\006" +
    "\ufff8\031\ufff8\033\ufff8\001\002\000\006\012\055\064\054" +
    "\001\002\000\006\012\055\064\054\001\002\000\004\051" +
    "\u0373\001\002\000\006\003\u0374\055\u0375\001\002\000\010" +
    "\007\u0260\010\u0262\011\u0261\001\002\000\010\007\u0260\010" +
    "\u0262\011\u0261\001\002\000\004\062\u0377\001\002\000\030" +
    "\003\u02af\005\071\006\u02ac\013\u02ae\017\u02a5\025\u02b0\050" +
    "\077\054\062\060\u02ad\064\067\065\105\001\002\000\012" +
    "\003\ufffb\006\ufffb\031\ufffb\033\ufffb\001\002\000\004\062" +
    "\u037a\001\002\000\030\003\u02af\005\071\006\u02ac\013\u02ae" +
    "\017\u02a5\025\u02b0\050\077\054\062\060\u02ad\064\067\065" +
    "\105\001\002\000\012\003\ufff6\006\ufff6\031\ufff6\033\ufff6" +
    "\001\002\000\004\055\u037d\001\002\000\004\051\u037e\001" +
    "\002\000\010\007\u0260\010\u0262\011\u0261\001\002\000\004" +
    "\062\u0380\001\002\000\030\003\u02af\005\071\006\u02ac\013" +
    "\u02ae\017\u02a5\025\u02b0\050\077\054\062\060\u02ad\064\067" +
    "\065\105\001\002\000\012\003\ufff7\006\ufff7\031\ufff7\033" +
    "\ufff7\001\002\000\010\002\uffd9\003\uffd9\060\uffd9\001\002" +
    "\000\004\050\u0393\001\002\000\004\064\u038b\001\002\000" +
    "\012\003\021\006\024\031\020\033\023\001\002\000\004" +
    "\064\u0387\001\002\000\004\062\u0388\001\002\000\014\003" +
    "\042\006\045\033\044\060\043\064\040\001\002\000\012" +
    "\003\ufff4\006\ufff4\031\ufff4\033\ufff4\001\002\000\010\002" +
    "\uffd6\003\uffd6\060\uffd6\001\002\000\004\050\u038c\001\002" +
    "\000\006\012\055\064\054\001\002\000\004\051\u038e\001" +
    "\002\000\004\055\u038f\001\002\000\010\007\u0260\010\u0262" +
    "\011\u0261\001\002\000\004\062\u0391\001\002\000\030\003" +
    "\u02af\005\071\006\u02ac\013\u02ae\017\u02a5\025\u02b0\050\077" +
    "\054\062\060\u02ad\064\067\065\105\001\002\000\012\003" +
    "\ufffa\006\ufffa\031\ufffa\033\ufffa\001\002\000\004\051\u0394" +
    "\001\002\000\004\062\u0395\001\002\000\030\003\u03a1\005" +
    "\071\006\u039f\013\101\017\065\025\104\050\077\054\062" +
    "\060\100\064\067\065\105\001\002\000\030\003\u03a1\005" +
    "\071\006\u039f\013\101\017\065\025\104\050\077\054\062" +
    "\060\100\064\067\065\105\001\002\000\030\003\u03a1\005" +
    "\071\006\u039f\013\101\017\065\025\104\050\077\054\062" +
    "\060\100\064\067\065\105\001\002\000\030\003\u03a1\005" +
    "\071\006\u039f\013\101\017\065\025\104\050\077\054\062" +
    "\060\100\064\067\065\105\001\002\000\030\003\u03a1\005" +
    "\071\006\u039f\013\101\017\065\025\104\050\077\054\062" +
    "\060\100\064\067\065\105\001\002\000\030\003\u03a1\005" +
    "\071\006\u039f\013\101\017\065\025\104\050\077\054\062" +
    "\060\100\064\067\065\105\001\002\000\030\003\u03a1\005" +
    "\071\006\u039f\013\101\017\065\025\104\050\077\054\062" +
    "\060\100\064\067\065\105\001\002\000\030\003\u03a1\005" +
    "\071\006\u039f\013\101\017\065\025\104\050\077\054\062" +
    "\060\100\064\067\065\105\001\002\000\010\002\uffeb\003" +
    "\uffeb\060\uffeb\001\002\000\010\002\uff4e\003\uff4e\060\uff4e" +
    "\001\002\000\004\062\u03a5\001\002\000\030\003\u03a1\005" +
    "\071\006\u039f\013\101\017\065\025\104\050\077\054\062" +
    "\060\100\064\067\065\105\001\002\000\006\031\u0122\062" +
    "\u03a2\001\002\000\030\003\103\005\071\006\076\013\101" +
    "\017\065\025\104\050\077\054\062\060\100\064\067\065" +
    "\105\001\002\000\010\002\uff4d\003\uff4d\060\uff4d\001\002" +
    "\000\010\002\uff56\003\uff56\060\uff56\001\002\000\030\003" +
    "\u03a1\005\071\006\u039f\013\101\017\065\025\104\050\077" +
    "\054\062\060\100\064\067\065\105\001\002\000\010\002" +
    "\uff4f\003\uff4f\060\uff4f\001\002\000\010\002\uff55\003\uff55" +
    "\060\uff55\001\002\000\010\002\uff51\003\uff51\060\uff51\001" +
    "\002\000\010\002\uff54\003\uff54\060\uff54\001\002\000\010" +
    "\002\uff50\003\uff50\060\uff50\001\002\000\010\002\uff52\003" +
    "\uff52\060\uff52\001\002\000\010\002\uff53\003\uff53\060\uff53" +
    "\001\002\000\010\002\uff57\003\uff57\060\uff57\001\002\000" +
    "\006\003\u03b4\050\u03b5\001\002\000\004\050\u03b0\001\002" +
    "\000\004\051\u03b1\001\002\000\004\062\u03b2\001\002\000" +
    "\030\003\u03a1\005\071\006\u039f\013\101\017\065\025\104" +
    "\050\077\054\062\060\100\064\067\065\105\001\002\000" +
    "\010\002\uffea\003\uffea\060\uffea\001\002\000\004\051\u03bc" +
    "\001\002\000\006\003\u03b7\051\u03b6\001\002\000\004\062" +
    "\u03ba\001\002\000\004\062\u03b8\001\002\000\030\003\u03a1" +
    "\005\071\006\u039f\013\101\017\065\025\104\050\077\054" +
    "\062\060\100\064\067\065\105\001\002\000\010\002\uffe8" +
    "\003\uffe8\060\uffe8\001\002\000\030\003\u03a1\005\071\006" +
    "\u039f\013\101\017\065\025\104\050\077\054\062\060\100" +
    "\064\067\065\105\001\002\000\010\002\uffec\003\uffec\060" +
    "\uffec\001\002\000\004\062\u03bd\001\002\000\030\003\u03a1" +
    "\005\071\006\u039f\013\101\017\065\025\104\050\077\054" +
    "\062\060\100\064\067\065\105\001\002\000\010\002\uffe9" +
    "\003\uffe9\060\uffe9\001\002\000\010\002\uffda\003\uffda\060" +
    "\uffda\001\002\000\010\002\uffdb\003\uffdb\060\uffdb\001\002" +
    "\000\006\003\u03c6\034\u03c7\001\002\000\004\034\u03c4\001" +
    "\002\000\004\002\ufffd\001\002\000\004\062\u03c5\001\002" +
    "\000\004\002\uffe6\001\002\000\004\062\u03c9\001\002\000" +
    "\004\062\u03c8\001\002\000\004\002\uffe7\001\002\000\004" +
    "\002\uffe5\001\002\000\012\003\021\006\024\031\020\033" +
    "\023\001\002\000\006\003\u03c2\060\u03c1\001\002\000\004" +
    "\002\000\001\002\000\004\062\u03ce\001\002\000\012\003" +
    "\021\006\024\031\020\033\023\001\002\000\006\003\u03c2" +
    "\060\u03c1\001\002\000\004\002\ufffe\001\002\000\012\003" +
    "\021\006\024\031\020\033\023\001\002\000\004\064\u03d3" +
    "\001\002\000\004\062\u03d4\001\002\000\012\003\021\006" +
    "\024\031\020\033\023\001\002\000\006\003\u03c2\060\u03c1" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\ufffc\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u03d6\000\004\047\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\002" +
    "\013\042\015\066\014\067\016\070\021\001\001\000\004" +
    "\043\u03c2\001\001\000\014\002\u03bf\042\015\066\014\067" +
    "\016\070\021\001\001\000\002\001\001\000\014\002\u03be" +
    "\042\015\066\014\067\016\070\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\002\u0381\042\015\066\014" +
    "\067\016\070\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\002\025\042\015\066\014\067\016\070\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\036\030\035\045\045\070" +
    "\040\001\001\000\012\013\u0288\030\035\045\045\070\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\013" +
    "\u0281\030\035\045\045\070\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\047\030\035\045\045\070\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\071\005\060\006" +
    "\062\012\065\014\101\022\057\025\063\026\073\031\067" +
    "\033\072\044\074\001\001\000\030\004\071\005\060\006" +
    "\062\012\u0269\014\101\022\057\025\063\026\073\031\067" +
    "\033\072\044\074\001\001\000\030\004\071\005\060\006" +
    "\062\012\u0268\014\101\022\057\025\063\026\073\031\067" +
    "\033\072\044\074\001\001\000\002\001\001\000\030\004" +
    "\071\005\060\006\062\012\u0258\014\101\022\057\025\063" +
    "\026\073\031\067\033\072\044\074\001\001\000\030\004" +
    "\071\005\060\006\062\012\u0257\014\101\022\057\025\063" +
    "\026\073\031\067\033\072\044\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\u018e\001\001\000\030" +
    "\004\071\005\060\006\062\012\u018b\014\101\022\057\025" +
    "\063\026\073\031\067\033\072\044\074\001\001\000\002" +
    "\001\001\000\030\004\071\005\060\006\062\012\u017d\014" +
    "\101\022\057\025\063\026\073\031\067\033\072\044\074" +
    "\001\001\000\030\004\071\005\060\006\062\012\u017c\014" +
    "\101\022\057\025\063\026\073\031\067\033\072\044\074" +
    "\001\001\000\004\034\346\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\u0177\001\001\000\002\001\001" +
    "\000\010\010\111\021\u0125\026\113\001\001\000\030\004" +
    "\071\005\060\006\062\012\u0124\014\101\022\057\025\063" +
    "\026\073\031\067\033\072\044\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\111" +
    "\021\110\026\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\114\001\001\000\006\010\123\026\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\126\001\001\000\002\001\001" +
    "\000\004\034\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\142\032\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\004\166\005\161\006\162\025\163" +
    "\026\073\031\165\033\167\040\174\050\172\056\170\001" +
    "\001\000\026\004\166\005\161\006\162\025\163\026\073" +
    "\031\165\033\167\040\u011f\050\172\056\170\001\001\000" +
    "\026\004\166\005\161\006\162\025\163\026\073\031\165" +
    "\033\167\040\u011e\050\172\056\170\001\001\000\026\004" +
    "\166\005\161\006\162\025\163\026\073\031\165\033\167" +
    "\040\u011d\050\172\056\170\001\001\000\002\001\001\000" +
    "\026\004\166\005\161\006\162\025\163\026\073\031\165" +
    "\033\167\040\337\050\172\056\170\001\001\000\026\004" +
    "\166\005\161\006\162\025\163\026\073\031\165\033\167" +
    "\040\336\050\172\056\170\001\001\000\026\004\166\005" +
    "\161\006\162\025\163\026\073\031\165\033\167\040\335" +
    "\050\172\056\170\001\001\000\026\004\166\005\161\006" +
    "\162\025\163\026\073\031\165\033\167\040\334\050\172" +
    "\056\170\001\001\000\002\001\001\000\026\004\166\005" +
    "\161\006\162\025\163\026\073\031\165\033\167\040\331" +
    "\050\172\056\170\001\001\000\010\010\111\021\202\026" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\214" +
    "\005\207\006\210\025\211\026\073\031\212\033\215\050" +
    "\220\051\216\056\213\001\001\000\002\001\001\000\012" +
    "\010\111\021\242\026\113\054\241\001\001\000\026\004" +
    "\214\005\207\006\210\025\211\026\073\031\212\033\215" +
    "\050\220\051\240\056\213\001\001\000\026\004\214\005" +
    "\207\006\210\025\211\026\073\031\212\033\215\050\220" +
    "\051\237\056\213\001\001\000\026\004\214\005\207\006" +
    "\210\025\211\026\073\031\212\033\215\050\220\051\236" +
    "\056\213\001\001\000\026\004\214\005\207\006\210\025" +
    "\211\026\073\031\212\033\215\050\220\051\235\056\213" +
    "\001\001\000\026\004\214\005\207\006\210\025\211\026" +
    "\073\031\212\033\215\050\220\051\234\056\213\001\001" +
    "\000\026\004\214\005\207\006\210\025\211\026\073\031" +
    "\212\033\215\050\220\051\233\056\213\001\001\000\026" +
    "\004\214\005\207\006\210\025\211\026\073\031\212\033" +
    "\215\050\220\051\232\056\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\004\214\005\207\006\210\025" +
    "\211\026\073\031\212\033\215\050\220\051\224\056\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\214\005\207\006\210" +
    "\025\211\026\073\031\212\033\215\050\220\051\226\056" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\004\254\005\246" +
    "\006\250\025\251\026\073\031\253\033\255\050\260\053" +
    "\252\056\256\001\001\000\002\001\001\000\026\004\254" +
    "\005\246\006\250\025\251\026\073\031\253\033\255\050" +
    "\260\053\276\056\256\001\001\000\012\010\111\021\242" +
    "\026\113\054\275\001\001\000\026\004\254\005\246\006" +
    "\250\025\251\026\073\031\253\033\255\050\260\053\274" +
    "\056\256\001\001\000\026\004\254\005\246\006\250\025" +
    "\251\026\073\031\253\033\255\050\260\053\273\056\256" +
    "\001\001\000\002\001\001\000\026\004\254\005\246\006" +
    "\250\025\251\026\073\031\253\033\255\050\260\053\272" +
    "\056\256\001\001\000\026\004\254\005\246\006\250\025" +
    "\251\026\073\031\253\033\255\050\260\053\271\056\256" +
    "\001\001\000\026\004\254\005\246\006\250\025\251\026" +
    "\073\031\253\033\255\050\260\053\270\056\256\001\001" +
    "\000\026\004\254\005\246\006\250\025\251\026\073\031" +
    "\253\033\255\050\260\053\267\056\256\001\001\000\002" +
    "\001\001\000\026\004\254\005\246\006\250\025\251\026" +
    "\073\031\253\033\255\050\260\053\264\056\256\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\004\254\005\246\006\250\025\251" +
    "\026\073\031\253\033\255\050\260\053\266\056\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\004\304\005\300\006\301\025\302\026\073\031\303\033" +
    "\305\050\310\052\312\056\306\001\001\000\026\004\304" +
    "\005\300\006\301\025\302\026\073\031\303\033\305\050" +
    "\310\052\326\056\306\001\001\000\026\004\304\005\300" +
    "\006\301\025\302\026\073\031\303\033\305\050\310\052" +
    "\325\056\306\001\001\000\026\004\304\005\300\006\301" +
    "\025\302\026\073\031\303\033\305\050\310\052\324\056" +
    "\306\001\001\000\026\004\304\005\300\006\301\025\302" +
    "\026\073\031\303\033\305\050\310\052\323\056\306\001" +
    "\001\000\026\004\304\005\300\006\301\025\302\026\073" +
    "\031\303\033\305\050\310\052\322\056\306\001\001\000" +
    "\026\004\304\005\300\006\301\025\302\026\073\031\303" +
    "\033\305\050\310\052\321\056\306\001\001\000\026\004" +
    "\304\005\300\006\301\025\302\026\073\031\303\033\305" +
    "\050\310\052\320\056\306\001\001\000\002\001\001\000" +
    "\026\004\304\005\300\006\301\025\302\026\073\031\303" +
    "\033\305\050\310\052\315\056\306\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\004\304\005\300\006\301\025" +
    "\302\026\073\031\303\033\305\050\310\052\317\056\306" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\304\005" +
    "\300\006\301\025\302\026\073\031\303\033\305\050\310" +
    "\052\330\056\306\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\004\166\005\161\006\162\025\163\026\073" +
    "\031\165\033\167\040\333\050\172\056\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\342\001\001\000\002\001\001\000\006\026\345\033\344" +
    "\001\001\000\026\004\362\005\355\006\356\025\357\026" +
    "\073\031\360\033\363\050\366\055\u0119\056\364\001\001" +
    "\000\004\034\346\001\001\000\010\026\u0109\034\u010c\041" +
    "\u010a\001\001\000\004\024\350\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\004\362\005\355\006\356\025\357\026\073\031\360" +
    "\033\363\050\366\055\361\056\364\001\001\000\026\004" +
    "\362\005\355\006\356\025\357\026\073\031\360\033\363" +
    "\050\366\055\u0108\056\364\001\001\000\026\004\362\005" +
    "\355\006\356\025\357\026\073\031\360\033\363\050\366" +
    "\055\u0107\056\364\001\001\000\026\004\362\005\355\006" +
    "\356\025\357\026\073\031\360\033\363\050\366\055\u0106" +
    "\056\364\001\001\000\026\004\362\005\355\006\356\025" +
    "\357\026\073\031\360\033\363\050\366\055\u0105\056\364" +
    "\001\001\000\002\001\001\000\026\004\362\005\355\006" +
    "\356\025\357\026\073\031\360\033\363\050\366\055\u0101" +
    "\056\364\001\001\000\026\004\362\005\355\006\356\025" +
    "\357\026\073\031\360\033\363\050\366\055\u0100\056\364" +
    "\001\001\000\026\004\362\005\355\006\356\025\357\026" +
    "\073\031\360\033\363\050\366\055\377\056\364\001\001" +
    "\000\002\001\001\000\026\004\362\005\355\006\356\025" +
    "\357\026\073\031\360\033\363\050\366\055\374\056\364" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\004\362\005\355\006\356\025\357\026\073\031" +
    "\360\033\363\050\366\055\376\056\364\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\u0114\001\001\000\002\001\001" +
    "\000\004\026\u0110\001\001\000\004\026\u010d\001\001\000" +
    "\010\026\u0109\034\u010c\041\u010e\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\u0111\001\001\000\010\026" +
    "\u0109\034\u010c\041\u0112\001\001\000\002\001\001\000\010" +
    "\026\u0109\034\u010c\041\u0117\001\001\000\010\026\u0109\034" +
    "\u010c\041\u0116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\004" +
    "\071\005\060\006\062\012\u0123\014\101\022\057\025\063" +
    "\026\073\031\067\033\072\044\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\u012f\005" +
    "\u012b\006\u012c\014\u0133\015\u0131\022\u0129\025\u012d\026\073" +
    "\031\u012e\033\u0130\001\001\000\002\001\001\000\026\004" +
    "\u012f\005\u012b\006\u012c\014\u0133\015\u0170\022\u0129\025\u012d" +
    "\026\073\031\u012e\033\u0130\001\001\000\012\010\111\020" +
    "\u0141\021\u0140\026\113\001\001\000\026\004\u012f\005\u012b" +
    "\006\u012c\014\u0133\015\u013f\022\u0129\025\u012d\026\073\031" +
    "\u012e\033\u0130\001\001\000\026\004\u012f\005\u012b\006\u012c" +
    "\014\u0133\015\u013e\022\u0129\025\u012d\026\073\031\u012e\033" +
    "\u0130\001\001\000\026\004\u012f\005\u012b\006\u012c\014\u0133" +
    "\015\u013d\022\u0129\025\u012d\026\073\031\u012e\033\u0130\001" +
    "\001\000\026\004\u012f\005\u012b\006\u012c\014\u0133\015\u013c" +
    "\022\u0129\025\u012d\026\073\031\u012e\033\u0130\001\001\000" +
    "\026\004\u012f\005\u012b\006\u012c\014\u0133\015\u013b\022\u0129" +
    "\025\u012d\026\073\031\u012e\033\u0130\001\001\000\026\004" +
    "\u012f\005\u012b\006\u012c\014\u0133\015\u013a\022\u0129\025\u012d" +
    "\026\073\031\u012e\033\u0130\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\004\u012f\005\u012b\006\u012c\014\u0133" +
    "\015\u0134\022\u0129\025\u012d\026\073\031\u012e\033\u0130\001" +
    "\001\000\002\001\001\000\026\004\u012f\005\u012b\006\u012c" +
    "\014\u0133\015\u0136\022\u0129\025\u012d\026\073\031\u012e\033" +
    "\u0130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\004\u014b\005\u0147\006\u0148\014\u014f" +
    "\017\u014d\022\u0145\025\u0149\026\073\031\u014a\033\u014c\001" +
    "\001\000\002\001\001\000\026\004\u014b\005\u0147\006\u0148" +
    "\014\u014f\017\u015a\022\u0145\025\u0149\026\073\031\u014a\033" +
    "\u014c\001\001\000\012\010\111\020\u0159\021\u0140\026\113" +
    "\001\001\000\026\004\u014b\005\u0147\006\u0148\014\u014f\017" +
    "\u0158\022\u0145\025\u0149\026\073\031\u014a\033\u014c\001\001" +
    "\000\026\004\u014b\005\u0147\006\u0148\014\u014f\017\u0157\022" +
    "\u0145\025\u0149\026\073\031\u014a\033\u014c\001\001\000\026" +
    "\004\u014b\005\u0147\006\u0148\014\u014f\017\u0156\022\u0145\025" +
    "\u0149\026\073\031\u014a\033\u014c\001\001\000\026\004\u014b" +
    "\005\u0147\006\u0148\014\u014f\017\u0155\022\u0145\025\u0149\026" +
    "\073\031\u014a\033\u014c\001\001\000\026\004\u014b\005\u0147" +
    "\006\u0148\014\u014f\017\u0154\022\u0145\025\u0149\026\073\031" +
    "\u014a\033\u014c\001\001\000\026\004\u014b\005\u0147\006\u0148" +
    "\014\u014f\017\u0153\022\u0145\025\u0149\026\073\031\u014a\033" +
    "\u014c\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\004\u014b\005\u0147\006\u0148\014\u014f\017\u0150\022\u0145\025" +
    "\u0149\026\073\031\u014a\033\u014c\001\001\000\002\001\001" +
    "\000\026\004\u014b\005\u0147\006\u0148\014\u014f\017\u0152\022" +
    "\u0145\025\u0149\026\073\031\u014a\033\u014c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\u0161\005" +
    "\u015d\006\u015e\014\u0164\016\u0165\022\u015c\025\u015f\026\073" +
    "\031\u0160\033\u0162\001\001\000\026\004\u0161\005\u015d\006" +
    "\u015e\014\u0164\016\u016f\022\u015c\025\u015f\026\073\031\u0160" +
    "\033\u0162\001\001\000\026\004\u0161\005\u015d\006\u015e\014" +
    "\u0164\016\u016e\022\u015c\025\u015f\026\073\031\u0160\033\u0162" +
    "\001\001\000\026\004\u0161\005\u015d\006\u015e\014\u0164\016" +
    "\u016d\022\u015c\025\u015f\026\073\031\u0160\033\u0162\001\001" +
    "\000\026\004\u0161\005\u015d\006\u015e\014\u0164\016\u016c\022" +
    "\u015c\025\u015f\026\073\031\u0160\033\u0162\001\001\000\026" +
    "\004\u0161\005\u015d\006\u015e\014\u0164\016\u016b\022\u015c\025" +
    "\u015f\026\073\031\u0160\033\u0162\001\001\000\026\004\u0161" +
    "\005\u015d\006\u015e\014\u0164\016\u016a\022\u015c\025\u015f\026" +
    "\073\031\u0160\033\u0162\001\001\000\026\004\u0161\005\u015d" +
    "\006\u015e\014\u0164\016\u0169\022\u015c\025\u015f\026\073\031" +
    "\u0160\033\u0162\001\001\000\002\001\001\000\026\004\u0161" +
    "\005\u015d\006\u015e\014\u0164\016\u0166\022\u015c\025\u015f\026" +
    "\073\031\u0160\033\u0162\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\u0161\005\u015d\006\u015e\014\u0164\016" +
    "\u0168\022\u015c\025\u015f\026\073\031\u0160\033\u0162\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\u0161\005\u015d\006\u015e\014\u0164\016\u0172\022\u015c\025\u015f" +
    "\026\073\031\u0160\033\u0162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\u0178\001\001\000\010\026\u0109\034" +
    "\u010c\041\u0179\001\001\000\002\001\001\000\030\004\071" +
    "\005\060\006\062\012\u017b\014\101\022\057\025\063\026" +
    "\073\031\067\033\072\044\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\142\032\u01a6\001\001\000\004" +
    "\036\u01a0\001\001\000\014\010\u0197\026\u0191\027\u0190\031" +
    "\u0194\033\u0196\001\001\000\002\001\001\000\004\034\346" +
    "\001\001\000\002\001\001\000\004\026\u018e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\u01a2\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\u01a3\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\026\142\032\u01aa\001" +
    "\001\000\004\036\u01a8\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\u0197\026\u01b1\027\u01b0\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\u01bb\001\001\000\002\001\001\000\006\026\u01be\033" +
    "\u01bd\001\001\000\026\004\u01c6\005\u01c3\006\u01c4\022\u01c2" +
    "\026\073\031\u01c5\033\u01c7\037\u0253\057\u01ca\061\u01cd\001" +
    "\001\000\004\034\346\001\001\000\004\024\u01c0\001\001" +
    "\000\002\001\001\000\026\004\u01c6\005\u01c3\006\u01c4\022" +
    "\u01c2\026\073\031\u01c5\033\u01c7\037\u01c8\057\u01ca\061\u01cd" +
    "\001\001\000\026\004\u01c6\005\u01c3\006\u01c4\022\u01c2\026" +
    "\073\031\u01c5\033\u01c7\037\u0252\057\u01ca\061\u01cd\001\001" +
    "\000\026\004\u01c6\005\u01c3\006\u01c4\022\u01c2\026\073\031" +
    "\u01c5\033\u01c7\037\u0251\057\u01ca\061\u01cd\001\001\000\026" +
    "\004\u01c6\005\u01c3\006\u01c4\022\u01c2\026\073\031\u01c5\033" +
    "\u01c7\037\u0250\057\u01ca\061\u01cd\001\001\000\026\004\u01c6" +
    "\005\u01c3\006\u01c4\022\u01c2\026\073\031\u01c5\033\u01c7\037" +
    "\u024f\057\u01ca\061\u01cd\001\001\000\026\004\u01c6\005\u01c3" +
    "\006\u01c4\022\u01c2\026\073\031\u01c5\033\u01c7\037\u024e\057" +
    "\u01ca\061\u01cd\001\001\000\026\004\u01c6\005\u01c3\006\u01c4" +
    "\022\u01c2\026\073\031\u01c5\033\u01c7\037\u024d\057\u01ca\061" +
    "\u01cd\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\004\u01c6\005\u01c3\006\u01c4\022\u01c2\026\073\031\u01c5\033" +
    "\u01c7\037\u0247\057\u01ca\061\u01cd\001\001\000\010\010\111" +
    "\021\u01f0\026\113\001\001\000\002\001\001\000\026\004" +
    "\u01c6\005\u01c3\006\u01c4\022\u01c2\026\073\031\u01c5\033\u01c7" +
    "\037\u01d1\057\u01ca\061\u01cd\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\111\021\u01d3\026\113\001\001\000\002\001\001\000" +
    "\026\004\u01d9\005\u01d6\006\u01d7\022\u01d5\026\073\031\u01d8" +
    "\033\u01da\057\u01dd\060\u01dc\061\u01de\001\001\000\026\004" +
    "\u01d9\005\u01d6\006\u01d7\022\u01d5\026\073\031\u01d8\033\u01da" +
    "\057\u01dd\060\u01ef\061\u01de\001\001\000\026\004\u01d9\005" +
    "\u01d6\006\u01d7\022\u01d5\026\073\031\u01d8\033\u01da\057\u01dd" +
    "\060\u01ee\061\u01de\001\001\000\026\004\u01d9\005\u01d6\006" +
    "\u01d7\022\u01d5\026\073\031\u01d8\033\u01da\057\u01dd\060\u01ed" +
    "\061\u01de\001\001\000\026\004\u01d9\005\u01d6\006\u01d7\022" +
    "\u01d5\026\073\031\u01d8\033\u01da\057\u01dd\060\u01ec\061\u01de" +
    "\001\001\000\026\004\u01d9\005\u01d6\006\u01d7\022\u01d5\026" +
    "\073\031\u01d8\033\u01da\057\u01dd\060\u01eb\061\u01de\001\001" +
    "\000\026\004\u01d9\005\u01d6\006\u01d7\022\u01d5\026\073\031" +
    "\u01d8\033\u01da\057\u01dd\060\u01ea\061\u01de\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\004\u01d9\005\u01d6\006" +
    "\u01d7\022\u01d5\026\073\031\u01d8\033\u01da\057\u01dd\060\u01e5" +
    "\061\u01de\001\001\000\026\004\u01d9\005\u01d6\006\u01d7\022" +
    "\u01d5\026\073\031\u01d8\033\u01da\057\u01dd\060\u01e4\061\u01de" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\004\u01d9\005\u01d6\006\u01d7\022\u01d5\026\073\031\u01d8" +
    "\033\u01da\057\u01dd\060\u01e9\061\u01de\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\004\u01f9\005\u01f5" +
    "\006\u01f7\022\u01f4\026\073\031\u01f8\033\u01fa\057\u01fd\061" +
    "\u01fe\063\u01fb\001\001\000\002\001\001\000\026\004\u01f9" +
    "\005\u01f5\006\u01f7\022\u01f4\026\073\031\u01f8\033\u01fa\057" +
    "\u01fd\061\u01fe\063\u0244\001\001\000\026\004\u01f9\005\u01f5" +
    "\006\u01f7\022\u01f4\026\073\031\u01f8\033\u01fa\057\u01fd\061" +
    "\u01fe\063\u0243\001\001\000\012\010\111\021\u020d\026\113" +
    "\062\u020e\001\001\000\026\004\u01f9\005\u01f5\006\u01f7\022" +
    "\u01f4\026\073\031\u01f8\033\u01fa\057\u01fd\061\u01fe\063\u020c" +
    "\001\001\000\026\004\u01f9\005\u01f5\006\u01f7\022\u01f4\026" +
    "\073\031\u01f8\033\u01fa\057\u01fd\061\u01fe\063\u020b\001\001" +
    "\000\026\004\u01f9\005\u01f5\006\u01f7\022\u01f4\026\073\031" +
    "\u01f8\033\u01fa\057\u01fd\061\u01fe\063\u020a\001\001\000\026" +
    "\004\u01f9\005\u01f5\006\u01f7\022\u01f4\026\073\031\u01f8\033" +
    "\u01fa\057\u01fd\061\u01fe\063\u0209\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\004\u01f9\005\u01f5\006\u01f7\022" +
    "\u01f4\026\073\031\u01f8\033\u01fa\057\u01fd\061\u01fe\063\u0203" +
    "\001\001\000\026\004\u01f9\005\u01f5\006\u01f7\022\u01f4\026" +
    "\073\031\u01f8\033\u01fa\057\u01fd\061\u01fe\063\u0202\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\004\u01f9\005\u01f5" +
    "\006\u01f7\022\u01f4\026\073\031\u01f8\033\u01fa\057\u01fd\061" +
    "\u01fe\063\u0205\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\u0217\005\u0214\006\u0215\022\u0212\026\073\031\u0216\033\u0218" +
    "\057\u021a\061\u021c\064\u021b\001\001\000\002\001\001\000" +
    "\026\004\u0217\005\u0214\006\u0215\022\u0212\026\073\031\u0216" +
    "\033\u0218\057\u021a\061\u021c\064\u022a\001\001\000\012\010" +
    "\111\021\u020d\026\113\062\u0229\001\001\000\026\004\u0217" +
    "\005\u0214\006\u0215\022\u0212\026\073\031\u0216\033\u0218\057" +
    "\u021a\061\u021c\064\u0228\001\001\000\026\004\u0217\005\u0214" +
    "\006\u0215\022\u0212\026\073\031\u0216\033\u0218\057\u021a\061" +
    "\u021c\064\u0227\001\001\000\026\004\u0217\005\u0214\006\u0215" +
    "\022\u0212\026\073\031\u0216\033\u0218\057\u021a\061\u021c\064" +
    "\u0226\001\001\000\026\004\u0217\005\u0214\006\u0215\022\u0212" +
    "\026\073\031\u0216\033\u0218\057\u021a\061\u021c\064\u0225\001" +
    "\001\000\026\004\u0217\005\u0214\006\u0215\022\u0212\026\073" +
    "\031\u0216\033\u0218\057\u021a\061\u021c\064\u0224\001\001\000" +
    "\002\001\001\000\026\004\u0217\005\u0214\006\u0215\022\u0212" +
    "\026\073\031\u0216\033\u0218\057\u021a\061\u021c\064\u0221\001" +
    "\001\000\002\001\001\000\026\004\u0217\005\u0214\006\u0215" +
    "\022\u0212\026\073\031\u0216\033\u0218\057\u021a\061\u021c\064" +
    "\u0220\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\u0217\005\u0214\006\u0215\022\u0212\026\073\031\u0216\033\u0218" +
    "\057\u021a\061\u021c\064\u0223\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\004\u0230\005\u022d\006\u022e\022\u022c\026\073" +
    "\031\u022f\033\u0231\057\u0234\061\u0235\065\u0233\001\001\000" +
    "\026\004\u0230\005\u022d\006\u022e\022\u022c\026\073\031\u022f" +
    "\033\u0231\057\u0234\061\u0235\065\u0242\001\001\000\026\004" +
    "\u0230\005\u022d\006\u022e\022\u022c\026\073\031\u022f\033\u0231" +
    "\057\u0234\061\u0235\065\u0241\001\001\000\026\004\u0230\005" +
    "\u022d\006\u022e\022\u022c\026\073\031\u022f\033\u0231\057\u0234" +
    "\061\u0235\065\u0240\001\001\000\026\004\u0230\005\u022d\006" +
    "\u022e\022\u022c\026\073\031\u022f\033\u0231\057\u0234\061\u0235" +
    "\065\u023f\001\001\000\026\004\u0230\005\u022d\006\u022e\022" +
    "\u022c\026\073\031\u022f\033\u0231\057\u0234\061\u0235\065\u023e" +
    "\001\001\000\026\004\u0230\005\u022d\006\u022e\022\u022c\026" +
    "\073\031\u022f\033\u0231\057\u0234\061\u0235\065\u023d\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\u0230\005" +
    "\u022d\006\u022e\022\u022c\026\073\031\u022f\033\u0231\057\u0234" +
    "\061\u0235\065\u023a\001\001\000\026\004\u0230\005\u022d\006" +
    "\u022e\022\u022c\026\073\031\u022f\033\u0231\057\u0234\061\u0235" +
    "\065\u0239\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\004\u0230\005\u022d\006\u022e\022\u022c\026\073\031\u022f\033" +
    "\u0231\057\u0234\061\u0235\065\u023c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\004\u0230\005\u022d\006" +
    "\u022e\022\u022c\026\073\031\u022f\033\u0231\057\u0234\061\u0235" +
    "\065\u0246\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\004\u01c6\005\u01c3\006\u01c4\022\u01c2\026\073\031\u01c5" +
    "\033\u01c7\037\u0249\057\u01ca\061\u01cd\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\u0262\001\001\000\012\010\u0197\026\u0191\027" +
    "\u025c\033\u025d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\u0197\026\u01b1\027\u0265\031\u0266\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\u026c\001" +
    "\001\000\002\001\001\000\004\003\u026e\001\001\000\002" +
    "\001\001\000\004\007\u0270\001\001\000\002\001\001\000" +
    "\004\003\u0272\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\u0280\030\035\045\045\070\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\u027d\001\001\000\002\001\001\000\030" +
    "\004\071\005\060\006\062\012\u027f\014\101\022\057\025" +
    "\063\026\073\031\067\033\072\044\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\u0283\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\u0197\026\u01b1\027\u0286\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\u028a\030\035" +
    "\045\045\070\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\u028e\001\001\000\002" +
    "\001\001\000\030\004\071\005\060\006\062\012\u0290\014" +
    "\101\022\057\025\063\026\073\031\067\033\072\044\074" +
    "\001\001\000\002\001\001\000\004\003\u0296\001\001\000" +
    "\004\003\u0293\001\001\000\002\001\001\000\030\004\071" +
    "\005\060\006\062\012\u0295\014\101\022\057\025\063\026" +
    "\073\031\067\033\072\044\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\004\071\005\060\006\062\012" +
    "\u0298\014\101\022\057\025\063\026\073\031\067\033\072" +
    "\044\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\u0365\030\035\045\045\070\040\001\001\000\004" +
    "\003\u029c\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\u029f\001\001\000\002\001\001\000\030\004\u02a7" +
    "\005\u02a2\006\u02a3\011\u02a9\026\073\031\u02a6\033\u02a8\046" +
    "\u02aa\071\u02a5\073\u02a1\101\u02b0\001\001\000\030\004\u02a7" +
    "\005\u02a2\006\u02a3\011\u0364\026\073\031\u02a6\033\u02a8\046" +
    "\u02aa\071\u02a5\073\u02a1\101\u02b0\001\001\000\030\004\u02a7" +
    "\005\u02a2\006\u02a3\011\u0363\026\073\031\u02a6\033\u02a8\046" +
    "\u02aa\071\u02a5\073\u02a1\101\u02b0\001\001\000\030\004\u02a7" +
    "\005\u02a2\006\u02a3\011\u0362\026\073\031\u02a6\033\u02a8\046" +
    "\u02aa\071\u02a5\073\u02a1\101\u02b0\001\001\000\002\001\001" +
    "\000\030\004\u02a7\005\u02a2\006\u02a3\011\u0336\026\073\031" +
    "\u02a6\033\u02a8\046\u02aa\071\u02a5\073\u02a1\101\u02b0\001\001" +
    "\000\030\004\u02a7\005\u02a2\006\u02a3\011\u0335\026\073\031" +
    "\u02a6\033\u02a8\046\u02aa\071\u02a5\073\u02a1\101\u02b0\001\001" +
    "\000\030\004\u02a7\005\u02a2\006\u02a3\011\u0334\026\073\031" +
    "\u02a6\033\u02a8\046\u02aa\071\u02a5\073\u02a1\101\u02b0\001\001" +
    "\000\030\004\u02a7\005\u02a2\006\u02a3\011\u0333\026\073\031" +
    "\u02a6\033\u02a8\046\u02aa\071\u02a5\073\u02a1\101\u02b0\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\111\021\u02d6\026\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\u02a7\005" +
    "\u02a2\006\u02a3\011\u02b1\026\073\031\u02a6\033\u02a8\046\u02aa" +
    "\071\u02a5\073\u02a1\101\u02b0\001\001\000\002\001\001\000" +
    "\010\010\111\021\u02b3\026\113\001\001\000\002\001\001" +
    "\000\026\004\u02ba\005\u02b5\006\u02b7\026\073\031\u02b9\033" +
    "\u02bb\071\u02b8\072\u02bd\073\u02b6\101\u02be\001\001\000\026" +
    "\004\u02ba\005\u02b5\006\u02b7\026\073\031\u02b9\033\u02bb\071" +
    "\u02b8\072\u02d1\073\u02b6\101\u02be\001\001\000\026\004\u02ba" +
    "\005\u02b5\006\u02b7\026\073\031\u02b9\033\u02bb\071\u02b8\072" +
    "\u02d0\073\u02b6\101\u02be\001\001\000\026\004\u02ba\005\u02b5" +
    "\006\u02b7\026\073\031\u02b9\033\u02bb\071\u02b8\072\u02cf\073" +
    "\u02b6\101\u02be\001\001\000\026\004\u02ba\005\u02b5\006\u02b7" +
    "\026\073\031\u02b9\033\u02bb\071\u02b8\072\u02ce\073\u02b6\101" +
    "\u02be\001\001\000\026\004\u02ba\005\u02b5\006\u02b7\026\073" +
    "\031\u02b9\033\u02bb\071\u02b8\072\u02cd\073\u02b6\101\u02be\001" +
    "\001\000\026\004\u02ba\005\u02b5\006\u02b7\026\073\031\u02b9" +
    "\033\u02bb\071\u02b8\072\u02cc\073\u02b6\101\u02be\001\001\000" +
    "\026\004\u02ba\005\u02b5\006\u02b7\026\073\031\u02b9\033\u02bb" +
    "\071\u02b8\072\u02cb\073\u02b6\101\u02be\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\u02ba\005\u02b5\006\u02b7" +
    "\026\073\031\u02b9\033\u02bb\071\u02b8\072\u02c6\073\u02b6\101" +
    "\u02be\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\004\u02ba\005\u02b5\006\u02b7\026" +
    "\073\031\u02b9\033\u02bb\071\u02b8\072\u02ca\073\u02b6\101\u02be" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\u02a7\005\u02a2\006\u02a3\011\u02d4\026\073\031\u02a6" +
    "\033\u02a8\046\u02aa\071\u02a5\073\u02a1\101\u02b0\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\u02e0\005\u02db\006\u02dd\026\073\031" +
    "\u02df\033\u02e1\071\u02de\073\u02dc\075\u02e2\101\u02e4\001\001" +
    "\000\002\001\001\000\012\010\111\021\u02f5\026\113\074" +
    "\u02f6\001\001\000\026\004\u02e0\005\u02db\006\u02dd\026\073" +
    "\031\u02df\033\u02e1\071\u02de\073\u02dc\075\u02f4\101\u02e4\001" +
    "\001\000\026\004\u02e0\005\u02db\006\u02dd\026\073\031\u02df" +
    "\033\u02e1\071\u02de\073\u02dc\075\u02f3\101\u02e4\001\001\000" +
    "\026\004\u02e0\005\u02db\006\u02dd\026\073\031\u02df\033\u02e1" +
    "\071\u02de\073\u02dc\075\u02f2\101\u02e4\001\001\000\026\004" +
    "\u02e0\005\u02db\006\u02dd\026\073\031\u02df\033\u02e1\071\u02de" +
    "\073\u02dc\075\u02f1\101\u02e4\001\001\000\026\004\u02e0\005" +
    "\u02db\006\u02dd\026\073\031\u02df\033\u02e1\071\u02de\073\u02dc" +
    "\075\u02f0\101\u02e4\001\001\000\026\004\u02e0\005\u02db\006" +
    "\u02dd\026\073\031\u02df\033\u02e1\071\u02de\073\u02dc\075\u02ef" +
    "\101\u02e4\001\001\000\026\004\u02e0\005\u02db\006\u02dd\026" +
    "\073\031\u02df\033\u02e1\071\u02de\073\u02dc\075\u02ee\101\u02e4" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\u02e0\005\u02db\006\u02dd\026\073\031\u02df\033\u02e1\071\u02de" +
    "\073\u02dc\075\u02e8\101\u02e4\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\004\u02e0\005\u02db\006\u02dd\026\073\031\u02df\033\u02e1\071" +
    "\u02de\073\u02dc\075\u02ea\101\u02e4\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\004\u0300\005\u02fc\006\u02fd\026\073\031\u02ff\033" +
    "\u0301\071\u02fe\073\u02fa\076\u0302\101\u0304\001\001\000\002" +
    "\001\001\000\026\004\u0300\005\u02fc\006\u02fd\026\073\031" +
    "\u02ff\033\u0301\071\u02fe\073\u02fa\076\u0312\101\u0304\001\001" +
    "\000\012\010\111\021\u02f5\026\113\074\u0311\001\001\000" +
    "\026\004\u0300\005\u02fc\006\u02fd\026\073\031\u02ff\033\u0301" +
    "\071\u02fe\073\u02fa\076\u0310\101\u0304\001\001\000\026\004" +
    "\u0300\005\u02fc\006\u02fd\026\073\031\u02ff\033\u0301\071\u02fe" +
    "\073\u02fa\076\u030f\101\u0304\001\001\000\026\004\u0300\005" +
    "\u02fc\006\u02fd\026\073\031\u02ff\033\u0301\071\u02fe\073\u02fa" +
    "\076\u030e\101\u0304\001\001\000\026\004\u0300\005\u02fc\006" +
    "\u02fd\026\073\031\u02ff\033\u0301\071\u02fe\073\u02fa\076\u030d" +
    "\101\u0304\001\001\000\026\004\u0300\005\u02fc\006\u02fd\026" +
    "\073\031\u02ff\033\u0301\071\u02fe\073\u02fa\076\u030c\101\u0304" +
    "\001\001\000\026\004\u0300\005\u02fc\006\u02fd\026\073\031" +
    "\u02ff\033\u0301\071\u02fe\073\u02fa\076\u030b\101\u0304\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\u0300\005" +
    "\u02fc\006\u02fd\026\073\031\u02ff\033\u0301\071\u02fe\073\u02fa" +
    "\076\u0308\101\u0304\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\u0300" +
    "\005\u02fc\006\u02fd\026\073\031\u02ff\033\u0301\071\u02fe\073" +
    "\u02fa\076\u030a\101\u0304\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\004\u031a\005\u0316\006\u0317\026" +
    "\073\031\u0319\033\u031b\071\u0318\073\u0315\077\u0314\101\u031d" +
    "\001\001\000\002\001\001\000\026\004\u031a\005\u0316\006" +
    "\u0317\026\073\031\u0319\033\u031b\071\u0318\073\u0315\077\u032a" +
    "\101\u031d\001\001\000\026\004\u031a\005\u0316\006\u0317\026" +
    "\073\031\u0319\033\u031b\071\u0318\073\u0315\077\u0329\101\u031d" +
    "\001\001\000\026\004\u031a\005\u0316\006\u0317\026\073\031" +
    "\u0319\033\u031b\071\u0318\073\u0315\077\u0328\101\u031d\001\001" +
    "\000\026\004\u031a\005\u0316\006\u0317\026\073\031\u0319\033" +
    "\u031b\071\u0318\073\u0315\077\u0327\101\u031d\001\001\000\026" +
    "\004\u031a\005\u0316\006\u0317\026\073\031\u0319\033\u031b\071" +
    "\u0318\073\u0315\077\u0326\101\u031d\001\001\000\026\004\u031a" +
    "\005\u0316\006\u0317\026\073\031\u0319\033\u031b\071\u0318\073" +
    "\u0315\077\u0325\101\u031d\001\001\000\026\004\u031a\005\u0316" +
    "\006\u0317\026\073\031\u0319\033\u031b\071\u0318\073\u0315\077" +
    "\u0324\101\u031d\001\001\000\002\001\001\000\026\004\u031a" +
    "\005\u0316\006\u0317\026\073\031\u0319\033\u031b\071\u0318\073" +
    "\u0315\077\u0321\101\u031d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\u031a\005\u0316\006\u0317\026\073\031\u0319\033\u031b\071\u0318" +
    "\073\u0315\077\u0323\101\u031d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\004\u031a\005\u0316\006\u0317\026\073\031\u0319" +
    "\033\u031b\071\u0318\073\u0315\077\u032c\101\u031d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\u02a7\005\u02a2\006" +
    "\u02a3\011\u0332\026\073\031\u02a6\033\u02a8\046\u02aa\071\u02a5" +
    "\073\u02a1\101\u02b0\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\u0339\001\001\000\002\001" +
    "\001\000\006\026\u033c\033\u033b\001\001\000\026\004\u0345" +
    "\005\u0340\006\u0342\026\073\031\u0344\033\u0346\071\u0343\073" +
    "\u0341\100\u035e\101\u0349\001\001\000\004\034\346\001\001" +
    "\000\004\024\u033e\001\001\000\002\001\001\000\026\004" +
    "\u0345\005\u0340\006\u0342\026\073\031\u0344\033\u0346\071\u0343" +
    "\073\u0341\100\u0348\101\u0349\001\001\000\026\004\u0345\005" +
    "\u0340\006\u0342\026\073\031\u0344\033\u0346\071\u0343\073\u0341" +
    "\100\u035d\101\u0349\001\001\000\026\004\u0345\005\u0340\006" +
    "\u0342\026\073\031\u0344\033\u0346\071\u0343\073\u0341\100\u035c" +
    "\101\u0349\001\001\000\026\004\u0345\005\u0340\006\u0342\026" +
    "\073\031\u0344\033\u0346\071\u0343\073\u0341\100\u035b\101\u0349" +
    "\001\001\000\026\004\u0345\005\u0340\006\u0342\026\073\031" +
    "\u0344\033\u0346\071\u0343\073\u0341\100\u035a\101\u0349\001\001" +
    "\000\026\004\u0345\005\u0340\006\u0342\026\073\031\u0344\033" +
    "\u0346\071\u0343\073\u0341\100\u0359\101\u0349\001\001\000\026" +
    "\004\u0345\005\u0340\006\u0342\026\073\031\u0344\033\u0346\071" +
    "\u0343\073\u0341\100\u0358\101\u0349\001\001\000\026\004\u0345" +
    "\005\u0340\006\u0342\026\073\031\u0344\033\u0346\071\u0343\073" +
    "\u0341\100\u0357\101\u0349\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\u0345\005\u0340\006\u0342\026\073\031" +
    "\u0344\033\u0346\071\u0343\073\u0341\100\u0351\101\u0349\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\u0345\005\u0340\006\u0342" +
    "\026\073\031\u0344\033\u0346\071\u0343\073\u0341\100\u0356\101" +
    "\u0349\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\u0369\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\u036c\001\001\000\002\001\001\000\030\004\u02a7\005" +
    "\u02a2\006\u02a3\011\u036e\026\073\031\u02a6\033\u02a8\046\u02aa" +
    "\071\u02a5\073\u02a1\101\u02b0\001\001\000\002\001\001\000" +
    "\004\003\u037b\001\001\000\004\003\u0371\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\u0378\001\001\000" +
    "\004\007\u0375\001\001\000\002\001\001\000\030\004\u02a7" +
    "\005\u02a2\006\u02a3\011\u0377\026\073\031\u02a6\033\u02a8\046" +
    "\u02aa\071\u02a5\073\u02a1\101\u02b0\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\004\u02a7\005\u02a2\006\u02a3\011" +
    "\u037a\026\073\031\u02a6\033\u02a8\046\u02aa\071\u02a5\073\u02a1" +
    "\101\u02b0\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\u037e\001\001\000\002\001\001" +
    "\000\030\004\u02a7\005\u02a2\006\u02a3\011\u0380\026\073\031" +
    "\u02a6\033\u02a8\046\u02aa\071\u02a5\073\u02a1\101\u02b0\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\002\u0389\042\015\066\014\067\016" +
    "\070\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\u0388\030\035\045\045\070\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\u038c\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\u038f\001\001\000\002\001\001\000\030\004\u02a7\005" +
    "\u02a2\006\u02a3\011\u0391\026\073\031\u02a6\033\u02a8\046\u02aa" +
    "\071\u02a5\073\u02a1\101\u02b0\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\u039b\005\u0396" +
    "\006\u0397\014\u039f\022\u0395\025\u0398\026\073\031\u0399\033" +
    "\u039a\035\u039c\044\u039d\001\001\000\030\004\u039b\005\u0396" +
    "\006\u0397\014\u039f\022\u0395\025\u0398\026\073\031\u0399\033" +
    "\u039a\035\u03ac\044\u039d\001\001\000\030\004\u039b\005\u0396" +
    "\006\u0397\014\u039f\022\u0395\025\u0398\026\073\031\u0399\033" +
    "\u039a\035\u03ab\044\u039d\001\001\000\030\004\u039b\005\u0396" +
    "\006\u0397\014\u039f\022\u0395\025\u0398\026\073\031\u0399\033" +
    "\u039a\035\u03aa\044\u039d\001\001\000\030\004\u039b\005\u0396" +
    "\006\u0397\014\u039f\022\u0395\025\u0398\026\073\031\u0399\033" +
    "\u039a\035\u03a9\044\u039d\001\001\000\030\004\u039b\005\u0396" +
    "\006\u0397\014\u039f\022\u0395\025\u0398\026\073\031\u0399\033" +
    "\u039a\035\u03a8\044\u039d\001\001\000\030\004\u039b\005\u0396" +
    "\006\u0397\014\u039f\022\u0395\025\u0398\026\073\031\u0399\033" +
    "\u039a\035\u03a7\044\u039d\001\001\000\030\004\u039b\005\u0396" +
    "\006\u0397\014\u039f\022\u0395\025\u0398\026\073\031\u0399\033" +
    "\u039a\035\u03a6\044\u039d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\u039b\005\u0396\006" +
    "\u0397\014\u039f\022\u0395\025\u0398\026\073\031\u0399\033\u039a" +
    "\035\u03a3\044\u039d\001\001\000\002\001\001\000\030\004" +
    "\071\005\060\006\062\012\u03a2\014\101\022\057\025\063" +
    "\026\073\031\067\033\072\044\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\004\u039b\005\u0396\006\u0397" +
    "\014\u039f\022\u0395\025\u0398\026\073\031\u0399\033\u039a\035" +
    "\u03a5\044\u039d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\u039b\005\u0396\006\u0397\014\u039f\022\u0395" +
    "\025\u0398\026\073\031\u0399\033\u039a\035\u03b2\044\u039d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\u039b\005" +
    "\u0396\006\u0397\014\u039f\022\u0395\025\u0398\026\073\031\u0399" +
    "\033\u039a\035\u03b8\044\u039d\001\001\000\002\001\001\000" +
    "\030\004\u039b\005\u0396\006\u0397\014\u039f\022\u0395\025\u0398" +
    "\026\073\031\u0399\033\u039a\035\u03ba\044\u039d\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\u039b\005\u0396" +
    "\006\u0397\014\u039f\022\u0395\025\u0398\026\073\031\u0399\033" +
    "\u039a\035\u03bd\044\u039d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\002\u03ca\042\015\066\014\067\016" +
    "\070\021\001\001\000\004\043\u03cb\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\002\u03ce\042\015\066\014" +
    "\067\016\070\021\001\001\000\004\043\u03cf\001\001\000" +
    "\002\001\001\000\014\002\u03d6\042\015\066\014\067\016" +
    "\070\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\002\u03d4\042\015\066\014\067\016\070\021\001\001" +
    "\000\004\043\u03d5\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Gramatica$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Gramatica$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Gramatica$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol sym;
    private Symbol cur_token;
    String unrecovered = "";
    String errorSintax = "";

    public String resultado="";
    public Nodo padre;
    public int contador = 1;

    ArrayList<String> listaRecover = new ArrayList<String>();

    @Override
    public void syntax_error(Symbol sym){
       listaRecover.add("\n Error Sintactico en la Linea " + (sym.right+1) +" Columna "+ (sym.left) + ". Palabras/Simbolo " + (sym.value) + " no reconocido \n") ;
    }

    public ArrayList<String> getSintax(){
        return listaRecover;
    }

    @Override
    public void unrecovered_syntax_error(Symbol cur_token){
       unrecovered = "Error Sintactico IRRECUPERABLE en la Linea: " + (cur_token.right+1)+ " Columna "+cur_token.left+". Palabras/Simbolo " + cur_token.value + " no reconocido"; 
    }

    public String getS(){
        return unrecovered;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Gramatica$actions {
  private final Gramatica parser;

  /** Constructor */
  CUP$Gramatica$actions(Gramatica parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Gramatica$do_action_part00000000(
    int                        CUP$Gramatica$act_num,
    java_cup.runtime.lr_parser CUP$Gramatica$parser,
    java.util.Stack            CUP$Gramatica$stack,
    int                        CUP$Gramatica$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Gramatica$result;

      /* select the action based on the action number */
      switch (CUP$Gramatica$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= MODULE EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		RESULT = start_val;
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Gramatica$parser.done_parsing();
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // MODULE ::= tk_public tk_module tk_Identificador tk_Linea OPCPROCESO ENDMODULE 
            {
              Object RESULT =null;
		int inmodleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int inmodright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object inmod = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("MODULE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)inmod);
                tmp.addHijo((Nodo)end);
                parser.padre = (Nodo) tmp;
                System.out.println("OK");
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("MODULE",37, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MODULE ::= error tk_module tk_Identificador tk_Linea OPCPROCESO ENDMODULE 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("MODULE",37, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MODULE ::= tk_public error tk_Identificador tk_Linea OPCPROCESO ENDMODULE 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("MODULE",37, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MODULE ::= tk_public tk_module error tk_Linea OPCPROCESO ENDMODULE 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("MODULE",37, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MODULE ::= error tk_Linea OPCPROCESO 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("MODULE",37, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNC ::= tk_public tk_function tk_Identificador tk_ParentesisA PARAMETROS tk_ParentesisC tk_as TIPOD tk_Linea CUERPOFUNC 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).value;
		int infuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int infuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object infunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
            Nodo tmp = new Nodo("FUNCION");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)param);
            tmp.addHijo((Nodo)infunc);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("FUNC",52, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-9)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNC ::= error tk_function tk_Identificador tk_ParentesisA PARAMETROS tk_ParentesisC tk_as TIPOD tk_Linea CUERPOFUNC 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("FUNC",52, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-9)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNC ::= tk_public error tk_Identificador tk_ParentesisA PARAMETROS tk_ParentesisC tk_as TIPOD tk_Linea CUERPOFUNC 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("FUNC",52, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-9)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNC ::= tk_public tk_function error tk_ParentesisA PARAMETROS tk_as tk_ParentesisC TIPOD tk_Linea CUERPOFUNC 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("FUNC",52, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-9)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNC ::= tk_public tk_function tk_Identificador error PARAMETROS tk_as tk_ParentesisC TIPOD tk_Linea CUERPOFUNC 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("FUNC",52, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-9)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNC ::= tk_public tk_function tk_Identificador tk_ParentesisA PARAMETROS tk_ParentesisC error TIPOD tk_Linea CUERPOFUNC 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("FUNC",52, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-9)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STRUCT ::= tk_public tk_structure tk_Identificador tk_Linea CUERPOSTRUC 
            {
              Object RESULT =null;
		int instructleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int instructright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object instruct = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("STRUCT");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)instruct);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("STRUCT",53, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STRUCT ::= error tk_structure tk_Identificador tk_Linea CUERPOSTRUC 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("STRUCT",53, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STRUCT ::= tk_public error tk_Identificador tk_Linea CUERPOSTRUC 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("STRUCT",53, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STRUCT ::= tk_public tk_structure error tk_Linea CUERPOSTRUC 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("STRUCT",53, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SUBPROCESS ::= tk_public tk_sub tk_Identificador tk_ParentesisA PARAMETROS tk_Linea CUERPOPRO 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int inproleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inproright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inpro = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("SUBPROCESS");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)param);
            tmp.addHijo((Nodo)inpro);
            RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("SUBPROCESS",54, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SUBPROCESS ::= error tk_sub tk_Identificador tk_ParentesisA PARAMETROS tk_Linea CUERPOPRO 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("SUBPROCESS",54, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SUBPROCESS ::= tk_public error tk_Identificador tk_ParentesisA PARAMETROS tk_Linea CUERPOPRO 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("SUBPROCESS",54, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SUBPROCESS ::= tk_public tk_sub error tk_ParentesisA PARAMETROS tk_Linea CUERPOPRO 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("SUBPROCESS",54, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SUBPROCESS ::= tk_public tk_sub tk_Identificador error PARAMETROS tk_Linea CUERPOPRO 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("SUBPROCESS",54, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MAIN ::= tk_sub tk_main tk_ParentesisA tk_ParentesisC tk_Linea CUERPOMAIN 
            {
              Object RESULT =null;
		int inmainleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inmainright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inmain = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("MAIN");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inmain);
            RESULT=tmp;

        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("MAIN",32, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MAIN ::= error tk_main tk_ParentesisA tk_ParentesisC tk_Linea CUERPOMAIN 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("MAIN",32, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MAIN ::= tk_sub error tk_ParentesisA tk_ParentesisC tk_Linea CUERPOMAIN 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("MAIN",32, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MAIN ::= tk_sub tk_main error tk_ParentesisC tk_Linea CUERPOMAIN 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("MAIN",32, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MAIN ::= tk_sub tk_main tk_ParentesisA error tk_Linea CUERPOMAIN 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("MAIN",32, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ENDMODULE ::= tk_end tk_module tk_Linea 
            {
              Object RESULT =null;
		 
         Nodo tmp = new Nodo("ENDMODULE");
         tmp.setNumNodo(parser.contador++);
         RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("ENDMODULE",33, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ENDMODULE ::= error tk_module tk_Linea 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("ENDMODULE",33, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ENDMODULE ::= tk_end error tk_Linea 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("ENDMODULE",33, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ENDFUNC ::= tk_end tk_function tk_Linea 
            {
              Object RESULT =null;
		 
            Nodo tmp = new Nodo("ENDFUNC");
            tmp.setNumNodo(parser.contador++);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("ENDFUNC",36, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ENDFUNC ::= error tk_function tk_Linea 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("ENDFUNC",36, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ENDFUNC ::= tk_end error tk_Linea 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("ENDFUNC",36, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ENDSTRUCT ::= tk_end tk_structure tk_Linea 
            {
              Object RESULT =null;
		 
            Nodo tmp = new Nodo("ENDSTRUCT");
            tmp.setNumNodo(parser.contador++);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("ENDSTRUCT",35, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ENDSTRUCT ::= error tk_structure tk_Linea 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("ENDSTRUCT",35, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ENDSTRUCT ::= tk_end error tk_Linea 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("ENDSTRUCT",35, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ENDSUB ::= tk_end tk_sub tk_Linea 
            {
              Object RESULT =null;
		 
            Nodo tmp = new Nodo("ENDSUB");
            tmp.setNumNodo(parser.contador++);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("ENDSUB",34, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ENDSUB ::= error tk_sub tk_Linea 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("ENDSUB",34, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ENDSUB ::= tk_end error tk_Linea 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("ENDSUB",34, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPCPROCESO ::= FUNC OPCPROCESO 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inmodleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inmodright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inmod = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("INMODULE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)func);
                tmp.addHijo((Nodo)inmod);
                RESULT=tmp;
             
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("OPCPROCESO",0, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPCPROCESO ::= STRUCT OPCPROCESO 
            {
              Object RESULT =null;
		int strtleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int strtright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object strt = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inmodleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inmodright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inmod = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("INMODULE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)strt);
                tmp.addHijo((Nodo)inmod);
                RESULT=tmp;
             
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("OPCPROCESO",0, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPCPROCESO ::= SUBPROCESS OPCPROCESO 
            {
              Object RESULT =null;
		int subproleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int subproright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object subpro = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inmodleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inmodright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inmod = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("INMODULE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)subpro);
                tmp.addHijo((Nodo)inmod);
                RESULT=tmp;
             
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("OPCPROCESO",0, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPCPROCESO ::= tk_comentario tk_Linea OPCPROCESO 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int inmodleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inmodright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inmod = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("INMODULE");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Comentario");
                nd1.setValor(com.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)inmod);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("OPCPROCESO",0, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPCPROCESO ::= MAIN 
            {
              Object RESULT =null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object main = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("INMODULE");
                tmp.setNumNodo(parser.contador++);           
                tmp.addHijo((Nodo)main);
                RESULT=tmp;
             
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("OPCPROCESO",0, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPCPROCESO ::= error tk_Linea OPCPROCESO 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("OPCPROCESO",0, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CUERPOSTRUC ::= VARIABLESTRUC CUERPOSTRUC 
            {
              Object RESULT =null;
		int varstrleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int varstrright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object varstr = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int instructleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int instructright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object instruct = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
                Nodo tmp = new Nodo("INSTRUCT");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)varstr);
                tmp.addHijo((Nodo)instruct);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOSTRUC",9, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CUERPOSTRUC ::= tk_comentario tk_Linea CUERPOSTRUC 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int instructleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int instructright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object instruct = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
                Nodo tmp = new Nodo("INSTRUCT");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Comentario");
                nd1.setValor(com.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)instruct);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOSTRUC",9, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CUERPOSTRUC ::= SUBPROCESS CUERPOSTRUC 
            {
              Object RESULT =null;
		int subpleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int subpright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object subp = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int instructleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int instructright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object instruct = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
                Nodo tmp = new Nodo("INSTRUCT");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)subp);
                tmp.addHijo((Nodo)instruct);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOSTRUC",9, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CUERPOSTRUC ::= ENDSTRUCT 
            {
              Object RESULT =null;
		int endstructleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int endstructright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object endstruct = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
                Nodo tmp = new Nodo("INSTRUCT");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)endstruct);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOSTRUC",9, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CUERPOSTRUC ::= error tk_Linea CUERPOSTRUC 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOSTRUC",9, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VARIABLESTRUC ::= tk_Identificador tk_as TIPOD tk_Linea 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		int tipodleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int tipodright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object tipod = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		 
                    Nodo tmp = new Nodo("Variable");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Identificador");
                    nd1.setValor(i.toString());
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    tmp.addHijo((Nodo)tipod);

                    RESULT = tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("VARIABLESTRUC",22, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VARIABLESTRUC ::= tk_Identificador tk_as TIPOD tk_Igual VALOR tk_Linea 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).value;
		int tipodleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int tipodright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		Object tipod = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		 
                    Nodo tmp = new Nodo("Variable");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Identificador");
                    nd1.setValor(i.toString());
                    nd1.setNumNodo(parser.contador++);
 
                    tmp.addHijo(nd1);
                    tmp.addHijo((Nodo)tipod);
                    tmp.addHijo((Nodo)valor);

                    RESULT = tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("VARIABLESTRUC",22, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CUERPOFUNC ::= SINTAXFOR_FUNC CUERPOFUNC 
            {
              Object RESULT =null;
		int forfunleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int forfunright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object forfun = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int infuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int infuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object infunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("INFUNCTION");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)forfun);
                tmp.addHijo((Nodo)infunc);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOFUNC",7, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CUERPOFUNC ::= SINTAXWHILE_FUNC CUERPOFUNC 
            {
              Object RESULT =null;
		int whilefnleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int whilefnright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object whilefn = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int infuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int infuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object infunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("INFUNCTION");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)whilefn);
                tmp.addHijo((Nodo)infunc);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOFUNC",7, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CUERPOFUNC ::= SINTAXIF_FUNC CUERPOFUNC 
            {
              Object RESULT =null;
		int iffnleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int iffnright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object iffn = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int infuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int infuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object infunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("INFUNCTION");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)iffn);
                tmp.addHijo((Nodo)infunc);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOFUNC",7, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CUERPOFUNC ::= VARIABLE CUERPOFUNC 
            {
              Object RESULT =null;
		int varfnleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int varfnright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object varfn = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int infuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int infuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object infunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("INFUNCTION");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)varfn);
                tmp.addHijo((Nodo)infunc);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOFUNC",7, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CUERPOFUNC ::= LLAMADAFUNC CUERPOFUNC 
            {
              Object RESULT =null;
		int llamfunleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int llamfunright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object llamfun = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int infuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int infuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object infunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("INFUNCTION");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)llamfun);
                tmp.addHijo((Nodo)infunc);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOFUNC",7, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CUERPOFUNC ::= ASIGNACIONVAL CUERPOFUNC 
            {
              Object RESULT =null;
		int asingleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int asingright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object asing = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int infuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int infuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object infunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("INFUNCTION");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)asing);
                tmp.addHijo((Nodo)infunc);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOFUNC",7, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CUERPOFUNC ::= CONSOLEWRITE CUERPOFUNC 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int infuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int infuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object infunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
                Nodo tmp = new Nodo("INFUNCTION");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)cs);
                tmp.addHijo((Nodo)infunc);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOFUNC",7, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CUERPOFUNC ::= OPERACIONES CUERPOFUNC 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int infuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int infuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object infunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("INFUNCTION");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)op);
                tmp.addHijo((Nodo)infunc);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOFUNC",7, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CUERPOFUNC ::= tk_comentario tk_Linea CUERPOFUNC 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int infuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int infuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object infunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
                Nodo tmp = new Nodo("INFUNCTION");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Comentario");
                nd1.setValor(com.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)infunc);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOFUNC",7, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CUERPOFUNC ::= ENDFUNC 
            {
              Object RESULT =null;
		int endfleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int endfright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object endf = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("INFUNCTION");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)endf);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOFUNC",7, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CUERPOFUNC ::= error tk_Linea CUERPOFUNC 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOFUNC",7, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SINTAXIF_FUNC ::= tk_if CONDICION tk_then tk_Linea INIF_FUNC tk_end tk_if tk_Linea 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)).value;
		int inifleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int inifright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		Object inif = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		int endifleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int endifright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object endif = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		
            Nodo tmp = new Nodo("IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("End if");
            nd1.setNumNodo(parser.contador++);
            
            tmp.addHijo((Nodo)con);
            tmp.addHijo((Nodo)inif);
            tmp.addHijo(nd1);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("SINTAXIF_FUNC",57, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-7)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SINTAXELSEIF_FUNC ::= CONDICION tk_then tk_Linea INELSEIF_FUNC 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		int elsefleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int elsefright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object elsef = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("ELSE IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("End if");
            nd1.setNumNodo(parser.contador++);
            
            tmp.addHijo((Nodo)con);
            tmp.addHijo((Nodo)elsef);
            tmp.addHijo(nd1);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("SINTAXELSEIF_FUNC",58, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // INIF_FUNC ::= SINTAXIF_FUNC INIF_FUNC 
            {
              Object RESULT =null;
		int sxiffuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxiffuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxiffunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxiffunc);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FUNC",59, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // INIF_FUNC ::= VARIABLE INIF_FUNC 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FUNC",59, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // INIF_FUNC ::= LLAMADAFUNC INIF_FUNC 
            {
              Object RESULT =null;
		int llamfuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int llamfuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object llamfunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)llamfunc);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FUNC",59, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INIF_FUNC ::= ASIGNACIONVAL INIF_FUNC 
            {
              Object RESULT =null;
		int asigvalleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int asigvalright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object asigval = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)asigval);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FUNC",59, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INIF_FUNC ::= OPERACIONES INIF_FUNC 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)oper);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FUNC",59, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INIF_FUNC ::= CONSOLEWRITE INIF_FUNC 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FUNC",59, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INIF_FUNC ::= SINTAXFOR_FUNC INIF_FUNC 
            {
              Object RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object fr = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)fr);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FUNC",59, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INIF_FUNC ::= SINTAXWHILE_FUNC INIF_FUNC 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FUNC",59, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INIF_FUNC ::= tk_comentario tk_Linea INIF_FUNC 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FUNC",59, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // INIF_FUNC ::= tk_comentario tk_Linea 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FUNC",59, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INIF_FUNC ::= SINTAXIF_FUNC 
            {
              Object RESULT =null;
		int sxiffuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxiffuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxiffunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxiffunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FUNC",59, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INIF_FUNC ::= VARIABLE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FUNC",59, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INIF_FUNC ::= LLAMADAFUNC 
            {
              Object RESULT =null;
		int llamfuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int llamfuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object llamfunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)llamfunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FUNC",59, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INIF_FUNC ::= ASIGNACIONVAL 
            {
              Object RESULT =null;
		int asigvalleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int asigvalright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object asigval = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)asigval);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FUNC",59, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INIF_FUNC ::= CONSOLEWRITE 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FUNC",59, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // INIF_FUNC ::= OPERACIONES 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)oper);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FUNC",59, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // INIF_FUNC ::= SINTAXFOR_FUNC 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FUNC",59, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // INIF_FUNC ::= SINTAXWHILE_FUNC 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FUNC",59, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // INIF_FUNC ::= tk_exit tk_function tk_Linea 
            {
              Object RESULT =null;
		int exitleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int exitright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object exit = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Exit Function");
            nd1.setValor(exit.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FUNC",59, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INIF_FUNC ::= tk_else tk_Linea INELSE_FUNC 
            {
              Object RESULT =null;
		int el1left = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int el1right = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object el1 = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN IF");
                    tmp.setNumNodo(parser.contador++);
                    Nodo nd1 = new Nodo("Else");
                    nd1.setNumNodo(parser.contador++);
                    tmp.addHijo(nd1);           
                    nd1.addHijo((Nodo)inifunc);           
                    RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FUNC",59, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INIF_FUNC ::= tk_elseif SINTAXELSEIF_FUNC 
            {
              Object RESULT =null;
		int eifleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int eifright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object eif = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN IF");
                    tmp.setNumNodo(parser.contador++);
                    Nodo nd1 = new Nodo("ELSE IF");
                    nd1.setNumNodo(parser.contador++);
                    tmp.addHijo(nd1);           
                    nd1.addHijo((Nodo)inifunc);           
                    RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FUNC",59, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INELSE_FUNC ::= SINTAXIF_FUNC INELSE_FUNC 
            {
              Object RESULT =null;
		int sxiffuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxiffuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxiffunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxiffunc);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FUNC",61, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INELSE_FUNC ::= VARIABLE INELSE_FUNC 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FUNC",61, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INELSE_FUNC ::= LLAMADAFUNC INELSE_FUNC 
            {
              Object RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object llamada = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)llamada);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FUNC",61, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INELSE_FUNC ::= ASIGNACIONVAL INELSE_FUNC 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)asig);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FUNC",61, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INELSE_FUNC ::= OPERACIONES INELSE_FUNC 
            {
              Object RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object ope = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ope);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FUNC",61, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INELSE_FUNC ::= CONSOLEWRITE INELSE_FUNC 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FUNC",61, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INELSE_FUNC ::= SINTAXFOR_FUNC INELSE_FUNC 
            {
              Object RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object fr = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE ");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)fr);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FUNC",61, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INELSE_FUNC ::= SINTAXWHILE_FUNC INELSE_FUNC 
            {
              Object RESULT =null;
		int inwleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int inwright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object inw = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE ");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inw);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FUNC",61, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INELSE_FUNC ::= tk_comentario tk_Linea INELSE_FUNC 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE ");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FUNC",61, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INELSE_FUNC ::= tk_comentario tk_Linea 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		
            Nodo tmp = new Nodo("IN ELSE ");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FUNC",61, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // INELSE_FUNC ::= SINTAXIF_FUNC 
            {
              Object RESULT =null;
		int ifnleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int ifnright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object ifn = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ifn);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FUNC",61, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // INELSE_FUNC ::= VARIABLE 
            {
              Object RESULT =null;
		int ifnleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int ifnright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object ifn = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ifn);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FUNC",61, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // INELSE_FUNC ::= LLAMADAFUNC 
            {
              Object RESULT =null;
		int ifnleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int ifnright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object ifn = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ifn);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FUNC",61, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // INELSE_FUNC ::= ASIGNACIONVAL 
            {
              Object RESULT =null;
		int ifnleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int ifnright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object ifn = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ifn);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FUNC",61, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // INELSE_FUNC ::= CONSOLEWRITE 
            {
              Object RESULT =null;
		int ifnleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int ifnright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object ifn = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ifn);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FUNC",61, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // INELSE_FUNC ::= OPERACIONES 
            {
              Object RESULT =null;
		int ifnleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int ifnright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object ifn = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ifn);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FUNC",61, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // INELSE_FUNC ::= SINTAXFOR_FUNC 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE ");
            tmp.setNumNodo(parser.contador++);
            
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FUNC",61, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // INELSE_FUNC ::= SINTAXWHILE_FUNC 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE ");
            tmp.setNumNodo(parser.contador++);
            
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FUNC",61, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // INELSE_FUNC ::= tk_exit tk_function tk_Linea 
            {
              Object RESULT =null;
		int exitleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int exitright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object exit = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Exit Function");
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FUNC",61, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // INELSEIF_FUNC ::= SINTAXIF_FUNC INELSEIF_FUNC 
            {
              Object RESULT =null;
		int iifleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int iifright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object iif = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)iif);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FUNC",60, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // INELSEIF_FUNC ::= VARIABLE INELSEIF_FUNC 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FUNC",60, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // INELSEIF_FUNC ::= LLAMADAFUNC INELSEIF_FUNC 
            {
              Object RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object llamada = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)llamada);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FUNC",60, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // INELSEIF_FUNC ::= ASIGNACIONVAL INELSEIF_FUNC 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)asig);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FUNC",60, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // INELSEIF_FUNC ::= tk_else tk_Linea INELSE_FUNC 
            {
              Object RESULT =null;
		int elsleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object els = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN ELSE IF");
                    tmp.setNumNodo(parser.contador++);
                    Nodo nd1 = new Nodo("ELSE");
                    nd1.setNumNodo(parser.contador++);
                    tmp.addHijo(nd1);           
                    nd1.addHijo((Nodo)inifunc);           
                    RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FUNC",60, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // INELSEIF_FUNC ::= tk_elseif SINTAXELSEIF_FUNC 
            {
              Object RESULT =null;
		int elsifleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int elsifright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object elsif = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN ELSE IF");
                    tmp.setNumNodo(parser.contador++);
                    Nodo nd1 = new Nodo("ELSE IF");
                    nd1.setNumNodo(parser.contador++);
                    tmp.addHijo(nd1);           
                    nd1.addHijo((Nodo)inifunc);           
                    RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FUNC",60, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // INELSEIF_FUNC ::= OPERACIONES INELSEIF_FUNC 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)op);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FUNC",60, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // INELSEIF_FUNC ::= CONSOLEWRITE INELSEIF_FUNC 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FUNC",60, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // INELSEIF_FUNC ::= SINTAXFOR_FUNC INELSEIF_FUNC 
            {
              Object RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object fr = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)fr);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FUNC",60, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // INELSEIF_FUNC ::= SINTAXWHILE_FUNC INELSEIF_FUNC 
            {
              Object RESULT =null;
		int inwleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int inwright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object inw = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inw);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FUNC",60, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // INELSEIF_FUNC ::= tk_comentario tk_Linea INELSEIF_FUNC 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FUNC",60, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // INELSEIF_FUNC ::= tk_comentario tk_Linea 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FUNC",60, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // INELSEIF_FUNC ::= SINTAXIF_FUNC 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FUNC",60, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // INELSEIF_FUNC ::= VARIABLE 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FUNC",60, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // INELSEIF_FUNC ::= LLAMADAFUNC 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FUNC",60, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // INELSEIF_FUNC ::= ASIGNACIONVAL 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
           
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FUNC",60, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // INELSEIF_FUNC ::= CONSOLEWRITE 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
          
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FUNC",60, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // INELSEIF_FUNC ::= OPERACIONES 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FUNC",60, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // INELSEIF_FUNC ::= SINTAXFOR_FUNC 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FUNC",60, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // INELSEIF_FUNC ::= SINTAXWHILE_FUNC 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FUNC",60, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // INELSEIF_FUNC ::= tk_exit tk_function tk_Linea 
            {
              Object RESULT =null;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Exit Function");
            
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FUNC",60, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SINTAXWHILE_FUNC ::= tk_do tk_while CONDICION tk_Linea INWHILE_FUNC tk_loop tk_Linea 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).value;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		
            Nodo tmp = new Nodo("WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Loop");
            nd1.setNumNodo(parser.contador++);
        
            tmp.addHijo((Nodo)con);
            tmp.addHijo((Nodo)inwhile);
            tmp.addHijo(nd1);
            RESULT=tmp;    
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("SINTAXWHILE_FUNC",55, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // INWHILE_FUNC ::= SINTAXFOR_FUNC INWHILE_FUNC 
            {
              Object RESULT =null;
		int forfleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int forfright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object forf = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)forf);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNC",56, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // INWHILE_FUNC ::= SINTAXIF_FUNC INWHILE_FUNC 
            {
              Object RESULT =null;
		int iffleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object iff = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)iff);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNC",56, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // INWHILE_FUNC ::= VARIABLE INWHILE_FUNC 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNC",56, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // INWHILE_FUNC ::= LLAMADAFUNC INWHILE_FUNC 
            {
              Object RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object llamada = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)llamada);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNC",56, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // INWHILE_FUNC ::= ASIGNACIONVAL INWHILE_FUNC 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)asig);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNC",56, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // INWHILE_FUNC ::= CONSOLEWRITE INWHILE_FUNC 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNC",56, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // INWHILE_FUNC ::= OPERACIONES INWHILE_FUNC 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)op);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNC",56, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // INWHILE_FUNC ::= SINTAXWHILE_FUNC INWHILE_FUNC 
            {
              Object RESULT =null;
		int wrleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int wrright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object wr = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)wr);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNC",56, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // INWHILE_FUNC ::= tk_comentario tk_Linea INWHILE_FUNC 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int inmainleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inmainright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inmain = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            tmp.addHijo((Nodo)inmain);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNC",56, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // INWHILE_FUNC ::= tk_comentario tk_Linea 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNC",56, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // INWHILE_FUNC ::= SINTAXFOR_FUNC 
            {
              Object RESULT =null;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
       
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNC",56, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // INWHILE_FUNC ::= SINTAXIF_FUNC 
            {
              Object RESULT =null;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
       
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNC",56, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // INWHILE_FUNC ::= VARIABLE 
            {
              Object RESULT =null;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
       
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNC",56, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // INWHILE_FUNC ::= LLAMADAFUNC 
            {
              Object RESULT =null;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
       
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNC",56, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // INWHILE_FUNC ::= ASIGNACIONVAL 
            {
              Object RESULT =null;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
       
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNC",56, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // INWHILE_FUNC ::= CONSOLEWRITE 
            {
              Object RESULT =null;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
       
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNC",56, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // INWHILE_FUNC ::= OPERACIONES 
            {
              Object RESULT =null;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
       
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNC",56, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // INWHILE_FUNC ::= SINTAXWHILE_FUNC 
            {
              Object RESULT =null;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);
       
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNC",56, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // INWHILE_FUNC ::= tk_exit tk_do tk_Linea 
            {
              Object RESULT =null;
		
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("EXIT DO");
            
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNC",56, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // INWHILE_FUNC ::= tk_exit tk_function tk_Linea 
            {
              Object RESULT =null;
		
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("EXIT FUNCTION");
            
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNC",56, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // INWHILE_FUNC ::= tk_exit tk_for tk_Linea 
            {
              Object RESULT =null;
		
            Nodo tmp = new Nodo("IN FUNC WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("EXIT FOR");
            
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FUNC",56, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // SINTAXFOR_FUNC ::= tk_for tk_Identificador tk_Igual iDNUM tk_to iDNUM tk_step AUMDEC tk_Linea INFOR_FUNC tk_next tk_Identificador tk_Linea 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-11)).value;
		int idnleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-9)).left;
		int idnright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-9)).right;
		Object idn = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-9)).value;
		int idnnleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-7)).left;
		int idnnright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-7)).right;
		Object idnn = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-7)).value;
		int aumdecleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).left;
		int aumdecright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).right;
		Object aumdec = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).value;
		int inforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int inforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		Object infor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		 
                    Nodo tmp = new Nodo("FOR");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Identificador");
                    nd1.setValor(i.toString());
                    nd1.setNumNodo(parser.contador++);
                    
                    Nodo nd2 = new Nodo("Identificador");
                    nd2.setValor(ii.toString());
                    nd2.setNumNodo(parser.contador++);
                    

                    tmp.addHijo(nd1);
                    tmp.addHijo((Nodo)idn);
                    tmp.addHijo((Nodo)idnn);
                    tmp.addHijo((Nodo)aumdec);
                    tmp.addHijo((Nodo)infor);
                    tmp.addHijo(nd2);
                    RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("SINTAXFOR_FUNC",63, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-12)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // SINTAXFOR_FUNC ::= tk_for tk_Identificador tk_Igual iDNUM tk_to OPERACIONES INFOR_FUNC tk_next tk_Identificador tk_Linea 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-8)).value;
		int idnleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)).left;
		int idnright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)).right;
		Object idn = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)).value;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).value;
		int inforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int inforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		Object infor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		
                    Nodo tmp = new Nodo("FOR");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Identificador");
                    nd1.setValor(i.toString());
                    nd1.setNumNodo(parser.contador++);
                    
                    Nodo nd2 = new Nodo("Identificador");
                    nd2.setValor(ii.toString());
                    nd2.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    tmp.addHijo((Nodo)idn);
                    tmp.addHijo((Nodo)oper);
                    tmp.addHijo((Nodo)infor);
                    tmp.addHijo(nd2);
                    RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("SINTAXFOR_FUNC",63, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-9)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // INFOR_FUNC ::= SINTAXWHILE_FUNC INFOR_FUNC 
            {
              Object RESULT =null;
		int inwleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int inwright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object inw = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inw);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_FUNC",62, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // INFOR_FUNC ::= SINTAXFOR_FUNC INFOR_FUNC 
            {
              Object RESULT =null;
		int infleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int infright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object inf = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inf);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_FUNC",62, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // INFOR_FUNC ::= SINTAXIF_FUNC INFOR_FUNC 
            {
              Object RESULT =null;
		int infleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int infright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object inf = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inf);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_FUNC",62, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // INFOR_FUNC ::= VARIABLE INFOR_FUNC 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_FUNC",62, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // INFOR_FUNC ::= LLAMADAFUNC INFOR_FUNC 
            {
              Object RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object llamada = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)llamada);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_FUNC",62, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // INFOR_FUNC ::= ASIGNACIONVAL INFOR_FUNC 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)asig);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_FUNC",62, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // INFOR_FUNC ::= CONSOLEWRITE INFOR_FUNC 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_FUNC",62, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // INFOR_FUNC ::= OPERACIONES INFOR_FUNC 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)op);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_FUNC",62, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // INFOR_FUNC ::= tk_comentario tk_Linea INFOR_FUNC 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int inmainleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inmainright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inmain = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            tmp.addHijo((Nodo)inmain);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_FUNC",62, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // INFOR_FUNC ::= tk_comentario tk_Linea 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_FUNC",62, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // INFOR_FUNC ::= SINTAXWHILE_FUNC 
            {
              Object RESULT =null;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
       
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_FUNC",62, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // INFOR_FUNC ::= SINTAXFOR_FUNC 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_FUNC",62, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // INFOR_FUNC ::= SINTAXIF_FUNC 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_FUNC",62, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // INFOR_FUNC ::= VARIABLE 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_FUNC",62, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // INFOR_FUNC ::= LLAMADAFUNC 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_FUNC",62, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // INFOR_FUNC ::= ASIGNACIONVAL 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_FUNC",62, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // INFOR_FUNC ::= CONSOLEWRITE 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_FUNC",62, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // INFOR_FUNC ::= OPERACIONES 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_FUNC",62, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // INFOR_FUNC ::= tk_exit tk_do tk_Linea 
            {
              Object RESULT =null;
		
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("EXIT DO");           
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_FUNC",62, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // INFOR_FUNC ::= tk_exit tk_function tk_Linea 
            {
              Object RESULT =null;
		
            Nodo tmp = new Nodo("IN FUNC FOR");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Exit Function"); 
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_FUNC",62, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // INFOR_FUNC ::= tk_exit tk_for tk_Linea 
            {
              Object RESULT =null;
		
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Exit Function");     
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_FUNC",62, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // CUERPOMAIN ::= SINTAXFOR CUERPOMAIN 
            {
              Object RESULT =null;
		int sxforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxfor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inmainleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inmainright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inmain = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
            Nodo tmp = new Nodo("INMAIN");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxfor);
            tmp.addHijo((Nodo)inmain);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOMAIN",27, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // CUERPOMAIN ::= SINTAXIF CUERPOMAIN 
            {
              Object RESULT =null;
		int sxifleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxifright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxif = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inmainleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inmainright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inmain = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
            Nodo tmp = new Nodo("INMAIN");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxif);
            tmp.addHijo((Nodo)inmain);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOMAIN",27, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // CUERPOMAIN ::= VARIABLE CUERPOMAIN 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inmainleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inmainright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inmain = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
            Nodo tmp = new Nodo("INMAIN");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            tmp.addHijo((Nodo)inmain);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOMAIN",27, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // CUERPOMAIN ::= LLAMADAFUNC CUERPOMAIN 
            {
              Object RESULT =null;
		int lfuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int lfuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object lfunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inmainleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inmainright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inmain = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
            Nodo tmp = new Nodo("INMAIN");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)lfunc);
            tmp.addHijo((Nodo)inmain);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOMAIN",27, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // CUERPOMAIN ::= ASIGNACIONVAL CUERPOMAIN 
            {
              Object RESULT =null;
		int asigvalleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int asigvalright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object asigval = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inmainleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inmainright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inmain = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
             Nodo tmp = new Nodo("INMAIN");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)asigval);
            tmp.addHijo((Nodo)inmain);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOMAIN",27, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // CUERPOMAIN ::= CONSOLEWRITE CUERPOMAIN 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inmainleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inmainright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inmain = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
            Nodo tmp = new Nodo("INMAIN");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            tmp.addHijo((Nodo)inmain);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOMAIN",27, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // CUERPOMAIN ::= OPERACIONES CUERPOMAIN 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inmainleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inmainright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inmain = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
            Nodo tmp = new Nodo("INMAIN");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)oper);
            tmp.addHijo((Nodo)inmain);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOMAIN",27, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // CUERPOMAIN ::= SINTAXWHILE CUERPOMAIN 
            {
              Object RESULT =null;
		int sxwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inmainleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inmainright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inmain = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
              Nodo tmp = new Nodo("INMAIN");
              tmp.setNumNodo(parser.contador++);
              tmp.addHijo((Nodo)sxwhile);
              tmp.addHijo((Nodo)inmain);
              RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOMAIN",27, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // CUERPOMAIN ::= tk_comentario tk_Linea CUERPOMAIN 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int inmainleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inmainright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inmain = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
            Nodo tmp = new Nodo("INMAIN");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            tmp.addHijo((Nodo)inmain);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOMAIN",27, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // CUERPOMAIN ::= ENDSUB 
            {
              Object RESULT =null;
		int endsleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int endsright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object ends = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("INMAIN");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ends);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOMAIN",27, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // CUERPOMAIN ::= error tk_Linea CUERPOPRO 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOMAIN",27, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // CUERPOPRO ::= SINTAXFOR CUERPOPRO 
            {
              Object RESULT =null;
		int sxforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxfor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int insubproleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int insubproright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object insubpro = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
            Nodo tmp = new Nodo("IN SUBPROC");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxfor);
            tmp.addHijo((Nodo)insubpro);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOPRO",8, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // CUERPOPRO ::= SINTAXIF CUERPOPRO 
            {
              Object RESULT =null;
		int sxifleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxifright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxif = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int insubproleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int insubproright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object insubpro = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
              Nodo tmp = new Nodo("IN SUBPROC");
              tmp.setNumNodo(parser.contador++);
              tmp.addHijo((Nodo)sxif);
              tmp.addHijo((Nodo)insubpro);
              RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOPRO",8, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // CUERPOPRO ::= VARIABLE CUERPOPRO 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int insubproleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int insubproright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object insubpro = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
            Nodo tmp = new Nodo("IN SUBPROC");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            tmp.addHijo((Nodo)insubpro);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOPRO",8, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // CUERPOPRO ::= LLAMADAFUNC CUERPOPRO 
            {
              Object RESULT =null;
		int lfuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int lfuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object lfunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int insubproleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int insubproright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object insubpro = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
            Nodo tmp = new Nodo("IN SUBPROC");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)lfunc);
            tmp.addHijo((Nodo)insubpro);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOPRO",8, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // CUERPOPRO ::= ASIGNACIONVAL CUERPOPRO 
            {
              Object RESULT =null;
		int asigvarleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int asigvarright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object asigvar = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int insubproleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int insubproright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object insubpro = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
             Nodo tmp = new Nodo("IN SUBPROC");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)asigvar);
            tmp.addHijo((Nodo)insubpro);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOPRO",8, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // CUERPOPRO ::= CONSOLEWRITE CUERPOPRO 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int insubproleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int insubproright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object insubpro = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
            Nodo tmp = new Nodo("IN SUBPROC");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            tmp.addHijo((Nodo)insubpro);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOPRO",8, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // CUERPOPRO ::= OPERACIONES CUERPOPRO 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int insubproleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int insubproright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object insubpro = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
            Nodo tmp = new Nodo("IN SUBPROC");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)oper);
            tmp.addHijo((Nodo)insubpro);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOPRO",8, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // CUERPOPRO ::= SINTAXWHILE CUERPOPRO 
            {
              Object RESULT =null;
		int sxwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int insubproleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int insubproright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object insubpro = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
            Nodo tmp = new Nodo("IN SUBPROC");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxwhile);
            tmp.addHijo((Nodo)insubpro);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOPRO",8, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // CUERPOPRO ::= tk_comentario tk_Linea CUERPOPRO 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int insubproleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int insubproright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object insubpro = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
            Nodo tmp = new Nodo("INMAIN");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            tmp.addHijo((Nodo)insubpro);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOPRO",8, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // CUERPOPRO ::= ENDSUB 
            {
              Object RESULT =null;
		int endsleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int endsright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object ends = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN SUBPROC");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ends);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOPRO",8, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // CUERPOPRO ::= error tk_Linea CUERPOPRO 
            {
              Object RESULT =null;

              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CUERPOPRO",8, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // PARAMETROS ::= tk_byval tk_Identificador tk_as TIPOD 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int tipdleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int tipdright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object tipd = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
                Nodo tmp = new Nodo("PARAMETROS");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)tipd);
                RESULT = tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("PARAMETROS",1, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // PARAMETROS ::= tk_Identificador tk_as TIPOD 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int tipdleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int tipdright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object tipd = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
                Nodo tmp = new Nodo("PARAMETROS");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)tipd);
                RESULT = tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("PARAMETROS",1, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // PARAMETROS ::= tk_byval tk_Identificador tk_as TIPOD tk_Coma PARAMETROS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).value;
		int tipdleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int tipdright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object tipd = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
                Nodo tmp = new Nodo("PARAMETROS");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)tipd);
                tmp.addHijo((Nodo)param);
                RESULT = tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("PARAMETROS",1, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // PARAMETROS ::= tk_Identificador tk_as TIPOD tk_Coma PARAMETROS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).value;
		int tipdleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int tipdright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object tipd = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
                Nodo tmp = new Nodo("PARAMETROS");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)tipd);
                tmp.addHijo((Nodo)param);
                RESULT = tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("PARAMETROS",1, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // VALOR ::= OPCBOOL 
            {
              Object RESULT =null;
		int opcboolleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int opcboolright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object opcbool = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
            Nodo tmp = new Nodo("VALOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)opcbool);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("VALOR",21, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // VALOR ::= iDNUM 
            {
              Object RESULT =null;
		int idnumleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int idnumright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object idnum = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("VALOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)idnum);
            RESULT=tmp; 
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("VALOR",21, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // VALOR ::= tk_valorString 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
           Nodo tmp = new Nodo("ValorString");
            tmp.setNumNodo(parser.contador++);
            tmp.setValor(str.toString().replaceAll("\"", ""));
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("VALOR",21, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // VARIABLE ::= tk_dim tk_Identificador tk_as TIPOD tk_Linea 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		int tipodleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int tipodright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object tipod = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		 
                Nodo tmp = new Nodo("Variable");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)tipod);

                RESULT = tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("VARIABLE",2, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // VARIABLE ::= tk_dim tk_Identificador tk_as TIPOD tk_Igual VALOR tk_Linea 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).value;
		int tipodleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int tipodright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		Object tipod = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		 
                Nodo tmp = new Nodo("Variable");
               tmp.setNumNodo(parser.contador++);

               Nodo nd1 = new Nodo("Identificador");
               nd1.setValor(i.toString());
               nd1.setNumNodo(parser.contador++);

               tmp.addHijo(nd1);
               tmp.addHijo((Nodo)tipod);
               tmp.addHijo((Nodo)val);

               RESULT = tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("VARIABLE",2, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // VARIABLE ::= tk_dim tk_Identificador tk_as TIPOD tk_Igual LLAMADAFUNC 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).value;
		int tipodleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int tipodright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object tipod = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int llamfuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int llamfuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object llamfunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
               Nodo tmp = new Nodo("Variable");
               tmp.setNumNodo(parser.contador++);

               Nodo nd1 = new Nodo("Identificador");
               nd1.setValor(i.toString());
               nd1.setNumNodo(parser.contador++);

               tmp.addHijo(nd1);
               tmp.addHijo((Nodo)tipod);
               tmp.addHijo((Nodo)llamfunc);

               RESULT = tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("VARIABLE",2, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // VARIABLE ::= tk_dim tk_Identificador tk_Igual VALOR tk_Linea 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		
                Nodo tmp = new Nodo("Variable");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)val);

                RESULT = tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("VARIABLE",2, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // VARIABLE ::= tk_dim tk_Identificador tk_Igual OPERACIONES 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
                Nodo tmp = new Nodo("Variable");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)oper);

                RESULT = tmp;

            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("VARIABLE",2, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // VARIABLE ::= tk_Identificador tk_punto tk_Identificador tk_Igual VALOR tk_Linea 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		
                Nodo tmp = new Nodo("Variable");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                Nodo nd2 = new Nodo("Identificador");
                nd2.setValor(ii.toString());
                nd2.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo(nd2);
                tmp.addHijo((Nodo)val);

                RESULT = tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("VARIABLE",2, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // ASIGNACIONVAL ::= tk_Identificador tk_Igual VALOR tk_Linea 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		 
                    Nodo tmp = new Nodo("Asignacion Variable");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Identificador");
                    nd1.setValor(i.toString());
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    tmp.addHijo((Nodo)val);
                    RESULT = tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("ASIGNACIONVAL",3, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // ASIGNACIONVAL ::= tk_Identificador tk_Igual OPERACIONES 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
                       Nodo tmp = new Nodo("Asignacion Variable");
                       tmp.setNumNodo(parser.contador++);

                       Nodo nd1 = new Nodo("Identificador");
                       nd1.setValor(i.toString());
                       nd1.setNumNodo(parser.contador++);

                       tmp.addHijo(nd1);
                       tmp.addHijo((Nodo)oper);
                       RESULT = tmp;
                    
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("ASIGNACIONVAL",3, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // ASIGNACIONVAL ::= tk_Identificador tk_Igual LLAMADAFUNC 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int llamfuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int llamfuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object llamfunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
                        Nodo tmp = new Nodo("Asignacion Variable");
                       tmp.setNumNodo(parser.contador++);

                       Nodo nd1 = new Nodo("Identificador");
                       nd1.setValor(i.toString());
                       nd1.setNumNodo(parser.contador++);

                       tmp.addHijo(nd1);
                       tmp.addHijo((Nodo)llamfunc);
                       RESULT = tmp;
                    
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("ASIGNACIONVAL",3, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // ASIGNACIONVAL ::= tk_Identificador tk_Igual tk_cs tk_punto tk_readline tk_ParentesisA tk_ParentesisC tk_Linea 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-7)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		Object rd = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		 
                       Nodo tmp = new Nodo("Asignacion Variable");
                       tmp.setNumNodo(parser.contador++);

                       Nodo nd1 = new Nodo("Identificador");
                       nd1.setValor(i.toString());
                       nd1.setNumNodo(parser.contador++);

                       Nodo nd2 = new Nodo("ReadLine");
                       nd2.setNumNodo(parser.contador++);

                       tmp.addHijo(nd1);
                       tmp.addHijo(nd2);
                       RESULT = tmp;
                    
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("ASIGNACIONVAL",3, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-7)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // ASIGNACIONVAL ::= tk_cs tk_punto tk_readline tk_ParentesisA tk_ParentesisC tk_Linea 
            {
              Object RESULT =null;
		
                       Nodo tmp = new Nodo("Asignacion Variable");
                       tmp.setNumNodo(parser.contador++);

                       Nodo nd1 = new Nodo("ReadLine");
                       nd1.setNumNodo(parser.contador++);

                       tmp.addHijo(nd1);
                       RESULT = tmp;
                     
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("ASIGNACIONVAL",3, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // ASIGNACIONVAL ::= tk_Identificador tk_punto tk_Identificador tk_Igual tk_cs tk_punto tk_readline tk_ParentesisA tk_ParentesisC tk_Linea 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-9)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-7)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-7)).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-7)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		Object rd = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		 
                       Nodo tmp = new Nodo("Asignacion Variable");
                       tmp.setNumNodo(parser.contador++);

                       Nodo nd1 = new Nodo("Identificador");
                       nd1.setValor(i.toString());
                       nd1.setNumNodo(parser.contador++);
                       
                       Nodo nd2 = new Nodo("Identificador");
                       nd2.setValor(ii.toString());
                       nd2.setNumNodo(parser.contador++);

                       Nodo nd3 = new Nodo("ReadLine");
                       nd3.setNumNodo(parser.contador++);

                       tmp.addHijo(nd1);
                       tmp.addHijo(nd2);
                       tmp.addHijo(nd3);
                       RESULT = tmp;
                    
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("ASIGNACIONVAL",3, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-9)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // OPCBOOL ::= tk_true 
            {
              Object RESULT =null;
		
            Nodo tmp = new Nodo("True");
            tmp.setNumNodo(parser.contador++);
            RESULT = tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("OPCBOOL",6, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // OPCBOOL ::= tk_false 
            {
              Object RESULT =null;
		
            Nodo tmp = new Nodo("False");
            tmp.setNumNodo(parser.contador++);
            RESULT = tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("OPCBOOL",6, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // TIPOD ::= tk_String 
            {
              Object RESULT =null;
		int strgleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int strgright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object strg = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("String");
            tmp.setValor(strg.toString());
            tmp.setNumNodo(parser.contador++);
            RESULT = tmp;
         
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("TIPOD",5, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // TIPOD ::= tk_integer 
            {
              Object RESULT =null;
		int intvleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int intvright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object intv = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
            Nodo tmp = new Nodo("Integer");
            tmp.setValor(intv.toString());
            tmp.setNumNodo(parser.contador++);
            RESULT = tmp; 
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("TIPOD",5, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // TIPOD ::= tk_boolean 
            {
              Object RESULT =null;
		int boolvleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int boolvright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object boolv = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
            Nodo tmp = new Nodo("Boolean");
            tmp.setValor(boolv.toString());
            tmp.setNumNodo(parser.contador++);
            RESULT = tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("TIPOD",5, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // OPCRELACIONALES ::= tk_mayorque 
            {
              Object RESULT =null;
		int mqleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int mqright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object mq = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                        Nodo tmp = new Nodo("MayorQue");
                        tmp.setValor(mq.toString());
                        tmp.setNumNodo(parser.contador++);
                        RESULT = tmp;
                    
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("OPCRELACIONALES",17, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // OPCRELACIONALES ::= tk_mayorigual 
            {
              Object RESULT =null;
		int mileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int miright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object mi = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                        Nodo tmp = new Nodo("MenorIgual");
                        tmp.setValor(mi.toString());
                        tmp.setNumNodo(parser.contador++);
                        RESULT = tmp;
                    
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("OPCRELACIONALES",17, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // OPCRELACIONALES ::= tk_menorque 
            {
              Object RESULT =null;
		int meqleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int meqright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object meq = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                        Nodo tmp = new Nodo("MenorQque");
                        tmp.setValor(meq.toString());
                        tmp.setNumNodo(parser.contador++);
                        RESULT = tmp;
                    
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("OPCRELACIONALES",17, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // OPCRELACIONALES ::= tk_menorigual 
            {
              Object RESULT =null;
		int meileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int meiright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object mei = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                        Nodo tmp = new Nodo("MenorIgual");
                        tmp.setValor(mei.toString());
                        tmp.setNumNodo(parser.contador++);
                        RESULT = tmp;
                    
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("OPCRELACIONALES",17, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // OPCRELACIONALES ::= tk_Igual 
            {
              Object RESULT =null;
		int iqleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int iqright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object iq = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                        Nodo tmp = new Nodo("Igual");
                        tmp.setValor(iq.toString());
                        tmp.setNumNodo(parser.contador++);
                        RESULT = tmp;
                    
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("OPCRELACIONALES",17, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // iDNUM ::= tk_Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("Identificador");
            tmp.setValor(id.toString());
            tmp.setNumNodo(parser.contador++);
            RESULT = tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("iDNUM",20, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // iDNUM ::= tk_Numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
            Nodo tmp = new Nodo("Numero");
            tmp.setValor(num.toString());
            tmp.setNumNodo(parser.contador++);
            RESULT = tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("iDNUM",20, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // CONDICION ::= iDNUM OPCRELACIONALES iDNUM 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int opcrleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int opcrright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object opcr = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("Condicion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)opcr);
                    tmp.addHijo((Nodo)idd);
                    RESULT = tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // CONDICION ::= iDNUM OPCRELACIONALES OPCBOOL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int opcrleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int opcrright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object opcr = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int opbleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int opbright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object opb = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
                    Nodo tmp = new Nodo("Condicion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)opcr);
                    tmp.addHijo((Nodo)opb);
                    RESULT = tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // CONDICION ::= iDNUM OPCRELACIONALES tk_Identificador tk_ParentesisA IDENTIFICADORES 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
                    Nodo tmp = new Nodo("Condicion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)opr);

                    Nodo nd1 = new Nodo("Identificador");
                    nd1.setValor(i.toString());
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    tmp.addHijo((Nodo)ids);
                    RESULT = tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // CONDICION ::= OPCBOOL 
            {
              Object RESULT =null;
		int opbleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int opbright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object opb = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
                    Nodo tmp = new Nodo("Condicion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)opb);
                    RESULT = tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // CONDICION ::= iDNUM OPCRELACIONALES tk_ParentesisA iDNUM OPEARITMETICA iDNUM tk_ParentesisC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)).value;
		int opcrleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).left;
		int opcrright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).right;
		Object opcr = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		int opealeft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int opearight = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object opea = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int idddleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int idddright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object iddd = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		
                    Nodo tmp = new Nodo("Condicion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)opcr);
                    tmp.addHijo((Nodo)idd);
                    tmp.addHijo((Nodo)opea);
                    tmp.addHijo((Nodo)iddd);
                    RESULT = tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // OPERACIONES ::= iDNUM OPEARITMETICA OPERACIONAUX 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object signo = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int operbleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int operbright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object operb = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("Operacion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)signo);
                    tmp.addHijo((Nodo)operb);
                    RESULT = tmp;
                 
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("OPERACIONES",25, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // OPERACIONES ::= tk_ParentesisA iDNUM OPEARITMETICA OPERACIONAUX 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object signo = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int operbleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int operbright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object operb = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
                    Nodo tmp = new Nodo("Operacion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)signo);
                    tmp.addHijo((Nodo)operb);
                    RESULT = tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("OPERACIONES",25, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // OPERACIONAUX ::= iDNUM OPEARITMETICA OPERACIONAUX 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object signo = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int operbleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int operbright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object operb = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
                    Nodo tmp = new Nodo("InOperacion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)signo);
                    tmp.addHijo((Nodo)operb);
                    RESULT = tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("OPERACIONAUX",31, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // OPERACIONAUX ::= tk_ParentesisA iDNUM OPEARITMETICA OPERACIONAUX 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object signo = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int operbleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int operbright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object operb = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("InOperacion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)signo);
                    tmp.addHijo((Nodo)operb);
                    RESULT = tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("OPERACIONAUX",31, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // OPERACIONAUX ::= OPEARITMETICA iDNUM OPERACIONAUX 
            {
              Object RESULT =null;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object signo = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int operbleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int operbright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object operb = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
                    Nodo tmp = new Nodo("InOperacion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)signo);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)operb);
                    RESULT = tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("OPERACIONAUX",31, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // OPERACIONAUX ::= iDNUM tk_ParentesisC OPERACIONAUX 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int operbleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int operbright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object operb = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("InOperacion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    tmp.addHijo((Nodo)operb);
                    RESULT = tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("OPERACIONAUX",31, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // OPERACIONAUX ::= OPEARITMETICA iDNUM tk_Linea 
            {
              Object RESULT =null;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object signo = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		 
                    Nodo tmp = new Nodo("InOperacion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)signo);
                    tmp.addHijo((Nodo)id);
                    RESULT = tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("OPERACIONAUX",31, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // OPERACIONAUX ::= iDNUM tk_ParentesisC tk_Linea 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		 
                    Nodo tmp = new Nodo("InOperacion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    RESULT = tmp;       
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("OPERACIONAUX",31, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // OPERACIONAUX ::= iDNUM tk_Linea 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		 
                    Nodo tmp = new Nodo("InOperacion");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)id);
                    RESULT = tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("OPERACIONAUX",31, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // OPEARITMETICA ::= tk_Suma 
            {
              Object RESULT =null;
		int sumleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sum = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		  
                    Nodo tmp = new Nodo("Suma");
                    tmp.setValor(sum.toString());
                    tmp.setNumNodo(parser.contador++);
                    RESULT = tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("OPEARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // OPEARITMETICA ::= tk_Resta 
            {
              Object RESULT =null;
		int restaleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int restaright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object resta = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
                    Nodo tmp = new Nodo("Resta");
                    tmp.setValor(resta.toString());
                    tmp.setNumNodo(parser.contador++);
                    RESULT = tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("OPEARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // OPEARITMETICA ::= tk_Multiplicacion 
            {
              Object RESULT =null;
		int mulleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int mulright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object mul = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("Multiplicacion");
                    tmp.setValor(mul.toString());
                    tmp.setNumNodo(parser.contador++);
                    RESULT = tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("OPEARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // OPEARITMETICA ::= tk_Division 
            {
              Object RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int divright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object div = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("Division");
                    tmp.setValor(div.toString());
                    tmp.setNumNodo(parser.contador++);
                    RESULT = tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("OPEARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // OPEARITMETICA ::= tk_Signomod 
            {
              Object RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int modright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object mod = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("Mod");
                    tmp.setValor(mod.toString());
                    tmp.setNumNodo(parser.contador++);
                    RESULT = tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("OPEARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // OPEARITMETICA ::= tk_Potencia 
            {
              Object RESULT =null;
		int potleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int potright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object pot = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("Potencia");
                    tmp.setValor(pot.toString());
                    tmp.setNumNodo(parser.contador++);
                    RESULT = tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("OPEARITMETICA",26, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // IDENTIFICADORES ::= iDNUM tk_Coma iDNUM tk_Coma iDNUM tk_Coma iDNUM tk_Coma iDNUM tk_ParentesisC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		 
                    Nodo tmp = new Nodo("Parametros Llamada");
                    tmp.setNumNodo(parser.contador++);

                    tmp.addHijo((Nodo)a);
                    tmp.addHijo((Nodo)b);
                    tmp.addHijo((Nodo)c);
                    tmp.addHijo((Nodo)d);
                    tmp.addHijo((Nodo)e);

                    RESULT = tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",24, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-9)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // IDENTIFICADORES ::= iDNUM tk_Coma iDNUM tk_Coma iDNUM tk_Coma iDNUM tk_ParentesisC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		 
                    Nodo tmp = new Nodo("Parametros Llamada");
                    tmp.setNumNodo(parser.contador++);

                    tmp.addHijo((Nodo)a);
                    tmp.addHijo((Nodo)b);
                    tmp.addHijo((Nodo)c);
                    tmp.addHijo((Nodo)d);

                    RESULT = tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",24, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-7)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // IDENTIFICADORES ::= iDNUM tk_Coma iDNUM tk_Coma iDNUM tk_ParentesisC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		 
                    Nodo tmp = new Nodo("Parametros Llamada");
                    tmp.setNumNodo(parser.contador++);

                    tmp.addHijo((Nodo)a);
                    tmp.addHijo((Nodo)b);
                    tmp.addHijo((Nodo)c);

                    RESULT = tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",24, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // IDENTIFICADORES ::= iDNUM tk_Coma iDNUM tk_ParentesisC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		 
                    Nodo tmp = new Nodo("Parametros Llamada");
                    tmp.setNumNodo(parser.contador++);

                    tmp.addHijo((Nodo)a);
                    tmp.addHijo((Nodo)b);

                    RESULT = tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",24, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // IDENTIFICADORES ::= iDNUM tk_ParentesisC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		  
                    Nodo tmp = new Nodo("Parametros Llamada");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)a);
                    RESULT = tmp; 
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",24, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // IDENTIFICADORESUB ::= tk_Coma iDNUM IDENTIFICADORESUB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int idsubleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int idsubright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object idsub = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
                        Nodo tmp = new Nodo("Parametros Llamada");
                        tmp.setNumNodo(parser.contador++);
                        tmp.addHijo((Nodo)a);
                        tmp.addHijo((Nodo)idsub);

                        RESULT = tmp;
                    
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORESUB",28, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // IDENTIFICADORESUB ::= tk_Coma iDNUM 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
                        Nodo tmp = new Nodo("Parametros Llamada");
                        tmp.setNumNodo(parser.contador++);
                        tmp.addHijo((Nodo)a);
                        RESULT = tmp; 
                    
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORESUB",28, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // LLAMADAFUNC ::= tk_Identificador tk_ParentesisA IDENTIFICADORES tk_Linea 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		 
                Nodo tmp = new Nodo("LLAMADAFUNCION");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                nd1.addHijo((Nodo)ids);

                RESULT = tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNC",23, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // LLAMADAFUNC ::= tk_Identificador tk_ParentesisA tk_ParentesisC tk_Linea 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		 
                Nodo tmp = new Nodo("LLAMADAFUNCION");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);

                RESULT = tmp;
               
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNC",23, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // LLAMADAFUNC ::= tk_Identificador iDNUM IDENTIFICADORESUB tk_Linea 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		int idsubleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int idsubright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object idsub = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		 
                Nodo tmp = new Nodo("LLAMADAFUNCION");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                nd1.addHijo((Nodo)idsub);

                RESULT = tmp;
               
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNC",23, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // LLAMADAFUNC ::= tk_Identificador iDNUM tk_Linea 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		 
                Nodo tmp = new Nodo("LLAMADAFUNCION");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)a);
                RESULT = tmp;
               
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNC",23, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // LLAMADAFUNC ::= tk_Identificador tk_ParentesisA tk_ParentesisA IDENTIFICADORES tk_ParentesisC tk_Linea 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		 
                Nodo tmp = new Nodo("LLAMADAFUNCION");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                nd1.addHijo((Nodo)ids);

                RESULT = tmp;
               
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNC",23, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // LLAMADAFUNC ::= tk_Identificador tk_ParentesisA IDENTIFICADORES IDENTIFICADORESUB tk_Linea 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int idsubleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int idsubright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object idsub = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		 
                Nodo tmp = new Nodo("LLAMADAFUNCION");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Identificador");
                nd1.setValor(i.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                nd1.addHijo((Nodo)ids);
                nd1.addHijo((Nodo)idsub);
                RESULT = tmp;
               
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNC",23, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // CONSOLEWRITE ::= tk_cs tk_punto tk_writeline tk_ParentesisA tk_valorString tk_ParentesisC tk_Linea 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		
                   Nodo tmp = new Nodo("console.writeline");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("ValorString");
                    nd1.setNumNodo(parser.contador++);
                    nd1.setValor(val.toString().replaceAll("\"", ""));

                    tmp.addHijo(nd1);
                    RESULT=tmp;
                 
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CONSOLEWRITE",4, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // CONSOLEWRITE ::= tk_cs tk_punto tk_writeline tk_ParentesisA tk_Identificador tk_ParentesisC tk_Linea 
            {
              Object RESULT =null;
		int wrleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).left;
		int wrright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).right;
		Object wr = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		
                    Nodo tmp = new Nodo("console.writeline");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Identificador");
                    nd1.setValor(i.toString());
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("CONSOLEWRITE",4, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // SINTAXIF ::= tk_if CONDICION tk_then tk_Linea INIF tk_end tk_if tk_Linea 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)).value;
		int inifleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int inifright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		Object inif = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		
            Nodo tmp = new Nodo("IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("End if");
            nd1.setNumNodo(parser.contador++);
            
            tmp.addHijo((Nodo)con);
            tmp.addHijo((Nodo)inif);
            tmp.addHijo(nd1);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("SINTAXIF",10, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-7)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // SINTAXELSEIF ::= CONDICION tk_then tk_Linea INELSEIF 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		int elsefleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int elsefright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object elsef = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("ELSE IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("End if");
            nd1.setNumNodo(parser.contador++);
            
            tmp.addHijo((Nodo)con);
            tmp.addHijo((Nodo)elsef);
            tmp.addHijo(nd1);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("SINTAXELSEIF",14, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // INIF ::= SINTAXIF INIF 
            {
              Object RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sif = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sif);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF",11, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // INIF ::= VARIABLE INIF 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF",11, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // INIF ::= LLAMADAFUNC INIF 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF",11, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // INIF ::= ASIGNACIONVAL INIF 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)asig);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF",11, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // INIF ::= OPERACIONES INIF 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)op);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF",11, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // INIF ::= CONSOLEWRITE INIF 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF",11, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // INIF ::= SINTAXFOR INIF 
            {
              Object RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object fr = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)fr);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF",11, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // INIF ::= SINTAXWHILE INIF 
            {
              Object RESULT =null;
		int whleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int whright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object wh = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)wh);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF",11, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // INIF ::= tk_comentario tk_Linea INIF 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF ");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF",11, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // INIF ::= tk_comentario tk_Linea 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF",11, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // INIF ::= SINTAXIF 
            {
              Object RESULT =null;
		int sxiffuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxiffuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxiffunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxiffunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF",11, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // INIF ::= VARIABLE 
            {
              Object RESULT =null;
		int sxiffuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxiffuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxiffunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxiffunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF",11, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // INIF ::= LLAMADAFUNC 
            {
              Object RESULT =null;
		int sxiffuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxiffuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxiffunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxiffunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF",11, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // INIF ::= ASIGNACIONVAL 
            {
              Object RESULT =null;
		int sxiffuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxiffuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxiffunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxiffunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF",11, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // INIF ::= CONSOLEWRITE 
            {
              Object RESULT =null;
		int sxiffuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxiffuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxiffunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxiffunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF",11, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // INIF ::= OPERACIONES 
            {
              Object RESULT =null;
		int sxiffuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxiffuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxiffunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxiffunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF",11, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // INIF ::= SINTAXFOR 
            {
              Object RESULT =null;
		int sxiffuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxiffuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxiffunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxiffunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF",11, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // INIF ::= SINTAXWHILE 
            {
              Object RESULT =null;
		int sxiffuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxiffuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxiffunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxiffunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF",11, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // INIF ::= tk_else tk_Linea INELSE 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN IF");
                    tmp.setNumNodo(parser.contador++);
                    Nodo nd1 = new Nodo("Else");
                    nd1.setNumNodo(parser.contador++);
                    tmp.addHijo(nd1);           
                    nd1.addHijo((Nodo)inifunc);           
                    RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF",11, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // INIF ::= tk_elseif SINTAXELSEIF 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN IF");
                    tmp.setNumNodo(parser.contador++);
                    Nodo nd1 = new Nodo("ELSE IF");
                    nd1.setNumNodo(parser.contador++);
                    tmp.addHijo(nd1);           
                    nd1.addHijo((Nodo)inifunc);           
                    RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF",11, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // INELSE ::= SINTAXIF INELSE 
            {
              Object RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sif = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object els = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sif);
            tmp.addHijo((Nodo)els);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE",12, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // INELSE ::= VARIABLE INELSE 
            {
              Object RESULT =null;
		int vrleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int vrright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object vr = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object els = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)vr);
            tmp.addHijo((Nodo)els);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE",12, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // INELSE ::= LLAMADAFUNC INELSE 
            {
              Object RESULT =null;
		int llmdaleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int llmdaright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object llmda = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object els = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)llmda);
            tmp.addHijo((Nodo)els);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE",12, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // INELSE ::= ASIGNACIONVAL INELSE 
            {
              Object RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object vl = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object els = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)vl);
            tmp.addHijo((Nodo)els);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE",12, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // INELSE ::= OPERACIONES INELSE 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object els = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)op);
            tmp.addHijo((Nodo)els);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE",12, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // INELSE ::= CONSOLEWRITE INELSE 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object els = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            tmp.addHijo((Nodo)els);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE",12, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // INELSE ::= SINTAXFOR INELSE 
            {
              Object RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object fr = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object els = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)fr);
            tmp.addHijo((Nodo)els);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE",12, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // INELSE ::= SINTAXWHILE INELSE 
            {
              Object RESULT =null;
		int whleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int whright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object wh = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object els = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)wh);
            tmp.addHijo((Nodo)els);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE",12, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // INELSE ::= tk_comentario tk_Linea INELSE 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE ");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE",12, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // INELSE ::= tk_comentario tk_Linea 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		
            Nodo tmp = new Nodo("IN ELSE ");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE",12, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // INELSE ::= SINTAXIF 
            {
              Object RESULT =null;
		int ifnleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int ifnright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object ifn = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ifn);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE",12, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // INELSE ::= VARIABLE 
            {
              Object RESULT =null;
		int ifnleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int ifnright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object ifn = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ifn);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE",12, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // INELSE ::= LLAMADAFUNC 
            {
              Object RESULT =null;
		int ifnleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int ifnright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object ifn = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ifn);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE",12, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // INELSE ::= ASIGNACIONVAL 
            {
              Object RESULT =null;
		int ifnleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int ifnright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object ifn = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ifn);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE",12, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // INELSE ::= CONSOLEWRITE 
            {
              Object RESULT =null;
		int ifnleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int ifnright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object ifn = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ifn);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE",12, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // INELSE ::= OPERACIONES 
            {
              Object RESULT =null;
		int ifnleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int ifnright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object ifn = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ifn);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE",12, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // INELSE ::= SINTAXFOR 
            {
              Object RESULT =null;
		int ifnleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int ifnright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object ifn = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ifn);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE",12, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // INELSE ::= SINTAXWHILE 
            {
              Object RESULT =null;
		int ifnleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int ifnright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object ifn = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)ifn);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE",12, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // INELSEIF ::= SINTAXIF INELSEIF 
            {
              Object RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sif = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sif);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF",13, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // INELSEIF ::= VARIABLE INELSEIF 
            {
              Object RESULT =null;
		int vrleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int vrright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object vr = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int elsifleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int elsifright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object elsif = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)vr);
            tmp.addHijo((Nodo)elsif);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF",13, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Gramatica$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$Gramatica$do_action_part00000001(
    int                        CUP$Gramatica$act_num,
    java_cup.runtime.lr_parser CUP$Gramatica$parser,
    java.util.Stack            CUP$Gramatica$stack,
    int                        CUP$Gramatica$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Gramatica$result;

      /* select the action based on the action number */
      switch (CUP$Gramatica$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // INELSEIF ::= LLAMADAFUNC INELSEIF 
            {
              Object RESULT =null;
		int llmsleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int llmsright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object llms = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int elsifleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int elsifright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object elsif = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)llms);
            tmp.addHijo((Nodo)elsif);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF",13, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // INELSEIF ::= ASIGNACIONVAL INELSEIF 
            {
              Object RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object vl = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int elsifleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int elsifright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object elsif = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)vl);
            tmp.addHijo((Nodo)elsif);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF",13, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // INELSEIF ::= tk_else tk_Linea INELSE 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN ELSE IF");
                    tmp.setNumNodo(parser.contador++);
                    Nodo nd1 = new Nodo("ELSE");
                    nd1.setNumNodo(parser.contador++);
                    tmp.addHijo(nd1);           
                    nd1.addHijo((Nodo)inifunc);           
                    RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF",13, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // INELSEIF ::= tk_elseif SINTAXELSEIF 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN ELSE IF");
                    tmp.setNumNodo(parser.contador++);
                    Nodo nd1 = new Nodo("ELSE IF");
                    nd1.setNumNodo(parser.contador++);
                    tmp.addHijo(nd1);           
                    nd1.addHijo((Nodo)inifunc);           
                    RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF",13, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // INELSEIF ::= OPERACIONES INELSEIF 
            {
              Object RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int elsifleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int elsifright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object elsif = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)pr);
            tmp.addHijo((Nodo)elsif);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF",13, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // INELSEIF ::= CONSOLEWRITE INELSEIF 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int elsifleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int elsifright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object elsif = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            tmp.addHijo((Nodo)elsif);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF",13, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // INELSEIF ::= SINTAXFOR INELSEIF 
            {
              Object RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object fr = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int elsifleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int elsifright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object elsif = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)fr);
            tmp.addHijo((Nodo)elsif);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF",13, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // INELSEIF ::= SINTAXWHILE INELSEIF 
            {
              Object RESULT =null;
		int wlleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object wl = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int elsifleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int elsifright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object elsif = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)wl);
            tmp.addHijo((Nodo)elsif);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF",13, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // INELSEIF ::= tk_comentario tk_Linea INELSEIF 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF",13, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // INELSEIF ::= tk_comentario tk_Linea 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF",13, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // INELSEIF ::= SINTAXIF 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF",13, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // INELSEIF ::= VARIABLE 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF",13, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // INELSEIF ::= LLAMADAFUNC 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF",13, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // INELSEIF ::= ASIGNACIONVAL 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF",13, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // INELSEIF ::= CONSOLEWRITE 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF",13, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // INELSEIF ::= OPERACIONES 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF",13, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // INELSEIF ::= SINTAXFOR 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF",13, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // INELSEIF ::= SINTAXWHILE 
            {
              Object RESULT =null;
		int inifuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN ELSE IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)inifunc);
            RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF",13, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // SINTAXFOR ::= tk_for tk_Identificador tk_Igual iDNUM tk_to iDNUM tk_step AUMDEC tk_Linea INFOR tk_next tk_Identificador tk_Linea 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-11)).value;
		int idnleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-9)).left;
		int idnright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-9)).right;
		Object idn = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-9)).value;
		int idnnleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-7)).left;
		int idnnright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-7)).right;
		Object idnn = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-7)).value;
		int aumdecleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).left;
		int aumdecright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).right;
		Object aumdec = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).value;
		int inforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int inforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		Object infor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		 
                    Nodo tmp = new Nodo("For");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Identificador");
                    nd1.setValor(i.toString());
                    nd1.setNumNodo(parser.contador++);
                    
                    Nodo nd2 = new Nodo("Identificador");
                    nd2.setValor(ii.toString());
                    nd2.setNumNodo(parser.contador++);
                    

                    tmp.addHijo(nd1);
                    tmp.addHijo((Nodo)idn);
                    tmp.addHijo((Nodo)idnn);
                    tmp.addHijo((Nodo)aumdec);
                    tmp.addHijo((Nodo)infor);
                    tmp.addHijo(nd2);
                    RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("SINTAXFOR",16, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-12)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // SINTAXFOR ::= tk_for tk_Identificador tk_Igual iDNUM tk_to OPERACIONES INFOR tk_next tk_Identificador tk_Linea 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-8)).value;
		int idnleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)).left;
		int idnright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)).right;
		Object idn = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)).value;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).value;
		int inforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int inforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		Object infor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		
                    Nodo tmp = new Nodo("For");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Identificador");
                    nd1.setValor(i.toString());
                    nd1.setNumNodo(parser.contador++);
                    
                    Nodo nd2 = new Nodo("Identificador");
                    nd2.setValor(ii.toString());
                    nd2.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    tmp.addHijo((Nodo)idn);
                    tmp.addHijo((Nodo)oper);
                    tmp.addHijo((Nodo)infor);
                    tmp.addHijo(nd2);
                    RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("SINTAXFOR",16, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-9)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // AUMDEC ::= tk_Resta tk_Numero 
            {
              Object RESULT =null;
		int restaleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int restaright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object resta = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("step");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Negativo");
                    nd1.setValor(resta.toString());
                    nd1.setNumNodo(parser.contador++);

                    Nodo nd2 = new Nodo("Numero");
                    nd2.setValor(num.toString());
                    nd2.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    tmp.addHijo(nd2);
                    RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("AUMDEC",18, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // AUMDEC ::= tk_Numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("step");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd2 = new Nodo("Numero");
                    nd2.setValor(num.toString());
                    nd2.setNumNodo(parser.contador++);

                    tmp.addHijo(nd2);
                    RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("AUMDEC",18, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // INFOR ::= SINTAXFOR INFOR 
            {
              Object RESULT =null;
		int sxforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxfor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object infor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		          
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxfor);
            tmp.addHijo((Nodo)infor);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR",29, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // INFOR ::= SINTAXIF_FOR INFOR 
            {
              Object RESULT =null;
		int sxifforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxifforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxiffor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object infor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxiffor);
            tmp.addHijo((Nodo)infor);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR",29, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // INFOR ::= VARIABLE INFOR 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object infor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		          
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            tmp.addHijo((Nodo)infor);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR",29, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // INFOR ::= LLAMADAFUNC INFOR 
            {
              Object RESULT =null;
		int llamleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int llamright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object llam = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object infor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		          
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)llam);
            tmp.addHijo((Nodo)infor);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR",29, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // INFOR ::= ASIGNACIONVAL INFOR 
            {
              Object RESULT =null;
		int asigvalleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int asigvalright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object asigval = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object infor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		          
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)asigval);
            tmp.addHijo((Nodo)infor);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR",29, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // INFOR ::= CONSOLEWRITE INFOR 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object infor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		          
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            tmp.addHijo((Nodo)infor);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR",29, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // INFOR ::= OPERACIONES INFOR 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object infor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		          
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)oper);
            tmp.addHijo((Nodo)infor);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR",29, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // INFOR ::= SINTAXWHILE_FOR INFOR 
            {
              Object RESULT =null;
		int sxwhileforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxwhileforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxwhilefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object infor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxwhilefor);
            tmp.addHijo((Nodo)infor);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR",29, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // INFOR ::= tk_comentario tk_Linea INFOR 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int inforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object infor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            tmp.addHijo((Nodo)infor);
            RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR",29, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // INFOR ::= tk_comentario tk_Linea 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR",29, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // INFOR ::= SINTAXFOR 
            {
              Object RESULT =null;
		int sxforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxfor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		          
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxfor);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR",29, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // INFOR ::= SINTAXIF_FOR 
            {
              Object RESULT =null;
		int sxifforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxifforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxiffor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxiffor);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR",29, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // INFOR ::= VARIABLE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		          
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR",29, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // INFOR ::= LLAMADAFUNC 
            {
              Object RESULT =null;
		int llamfuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int llamfuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object llamfunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		          
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)llamfunc);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR",29, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // INFOR ::= ASIGNACIONVAL 
            {
              Object RESULT =null;
		int asigvalleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int asigvalright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object asigval = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		          
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)asigval);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR",29, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // INFOR ::= CONSOLEWRITE 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		          
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR",29, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // INFOR ::= OPERACIONES 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		          
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)oper);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR",29, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // INFOR ::= SINTAXWHILE_FOR 
            {
              Object RESULT =null;
		int sxwhileforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxwhileforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxwhilefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxwhilefor);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR",29, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // INFOR ::= tk_exit tk_for tk_Linea 
            {
              Object RESULT =null;
		
            Nodo tmp = new Nodo("IN FOR");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Exit for");
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR",29, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // SINTAXIF_FOR ::= tk_if CONDICION tk_then tk_Linea INIF_FOR tk_end tk_if tk_Linea 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)).value;
		int inifleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int inifright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		Object inif = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		int endifleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int endifright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object endif = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		
            Nodo tmp = new Nodo("IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("End if");
            nd1.setNumNodo(parser.contador++);
            
            tmp.addHijo((Nodo)con);
            tmp.addHijo((Nodo)inif);
            tmp.addHijo(nd1);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("SINTAXIF_FOR",47, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-7)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // SINTAXELSEIF_FOR ::= CONDICION tk_then tk_Linea INELSEIF_FOR 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		int inelseifforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseifforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelseiffor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("ELSE IF");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)con);
            tmp.addHijo((Nodo)inelseiffor);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("SINTAXELSEIF_FOR",48, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // INIF_FOR ::= SINTAXIF_FOR INIF_FOR 
            {
              Object RESULT =null;
		int sixifforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sixifforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sixiffor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object infor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sixiffor);
                tmp.addHijo((Nodo)infor);
                RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FOR",49, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // INIF_FOR ::= VARIABLE INIF_FOR 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object infor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR IF ");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)var);
                tmp.addHijo((Nodo)infor);
                RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FOR",49, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // INIF_FOR ::= LLAMADAFUNC INIF_FOR 
            {
              Object RESULT =null;
		int llamfuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int llamfuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object llamfunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object infor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)llamfunc);
                tmp.addHijo((Nodo)infor);
                RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FOR",49, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // INIF_FOR ::= ASIGNACIONVAL INIF_FOR 
            {
              Object RESULT =null;
		int asigvalleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int asigvalright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object asigval = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object infor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR IF ");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)asigval);
                tmp.addHijo((Nodo)infor);
                RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FOR",49, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // INIF_FOR ::= OPERACIONES INIF_FOR 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object infor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)oper);
                tmp.addHijo((Nodo)infor);
                RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FOR",49, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // INIF_FOR ::= CONSOLEWRITE INIF_FOR 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object infor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)cs);
                tmp.addHijo((Nodo)infor);
                RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FOR",49, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // INIF_FOR ::= SINTAXFOR INIF_FOR 
            {
              Object RESULT =null;
		int sxforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxfor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object infor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxfor);
                tmp.addHijo((Nodo)infor);
                RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FOR",49, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // INIF_FOR ::= SINTAXWHILE_FOR INIF_FOR 
            {
              Object RESULT =null;
		int sxwhileforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxwhileforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxwhilefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object infor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxwhilefor);
                tmp.addHijo((Nodo)infor);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FOR",49, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // INIF_FOR ::= tk_comentario tk_Linea INIF_FOR 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int inforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object infor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Comentario");
                nd1.setValor(com.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)infor);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FOR",49, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // INIF_FOR ::= tk_comentario tk_Linea 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Comentario");
                nd1.setValor(com.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FOR",49, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // INIF_FOR ::= SINTAXIF_FOR 
            {
              Object RESULT =null;
		int sixifforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sixifforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sixiffor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sixiffor);
                RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FOR",49, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // INIF_FOR ::= VARIABLE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
               Nodo tmp = new Nodo("IN FOR IF");
               tmp.setNumNodo(parser.contador++);
               tmp.addHijo((Nodo)var);
               RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FOR",49, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // INIF_FOR ::= LLAMADAFUNC 
            {
              Object RESULT =null;
		int llamfuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int llamfuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object llamfunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)llamfunc);
                RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FOR",49, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // INIF_FOR ::= ASIGNACIONVAL 
            {
              Object RESULT =null;
		int asigvalleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int asigvalright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object asigval = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)asigval);
                RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FOR",49, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // INIF_FOR ::= CONSOLEWRITE 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR IF ");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)cs);
                RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FOR",49, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // INIF_FOR ::= OPERACIONES 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)oper);
                RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FOR",49, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // INIF_FOR ::= SINTAXFOR 
            {
              Object RESULT =null;
		int sxforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxfor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxfor);
                RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FOR",49, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // INIF_FOR ::= SINTAXWHILE_FOR 
            {
              Object RESULT =null;
		int sxwhileforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxwhileforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxwhilefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxwhilefor);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FOR",49, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // INIF_FOR ::= tk_exit tk_for tk_Linea 
            {
              Object RESULT =null;
		
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Exit For");
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FOR",49, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // INIF_FOR ::= tk_else tk_Linea INELSE_FOR 
            {
              Object RESULT =null;
		int inelseforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelsefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("ELSE");
                tmp.setNumNodo(parser.contador++);

                tmp.addHijo((Nodo)inelsefor);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FOR",49, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // INIF_FOR ::= tk_elseif SINTAXELSEIF_FOR 
            {
              Object RESULT =null;
		int sxelseifforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxelseifforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxelseiffor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR IF");
                tmp.setNumNodo(parser.contador++);

                tmp.addHijo((Nodo)sxelseiffor);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_FOR",49, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // INELSEIF_FOR ::= SINTAXIF_FOR INELSEIF_FOR 
            {
              Object RESULT =null;
		int sxifforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxifforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxiffor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelseifforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseifforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelseiffor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)sxiffor);
                    tmp.addHijo((Nodo)inelseiffor);
                    RESULT=tmp;
                 
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FOR",50, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // INELSEIF_FOR ::= VARIABLE INELSEIF_FOR 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelseifforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseifforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelseiffor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)var);
                    tmp.addHijo((Nodo)inelseiffor);
                    RESULT=tmp;
                 
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FOR",50, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // INELSEIF_FOR ::= LLAMADAFUNC INELSEIF_FOR 
            {
              Object RESULT =null;
		int llamfuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int llamfuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object llamfunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelseifforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseifforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelseiffor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)llamfunc);
                    tmp.addHijo((Nodo)inelseiffor);
                    RESULT=tmp;
                 
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FOR",50, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // INELSEIF_FOR ::= ASIGNACIONVAL INELSEIF_FOR 
            {
              Object RESULT =null;
		int asigvalleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int asigvalright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object asigval = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelseifforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseifforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelseiffor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)asigval);
                    tmp.addHijo((Nodo)inelseiffor);
                    RESULT=tmp;
                 
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FOR",50, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // INELSEIF_FOR ::= tk_else tk_Linea INELSE_FOR 
            {
              Object RESULT =null;
		int inelseforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelsefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		 
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Else");
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    nd1.addHijo((Nodo)inelsefor);
                    RESULT=tmp;    
               
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FOR",50, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // INELSEIF_FOR ::= tk_elseif SINTAXELSEIF_FOR 
            {
              Object RESULT =null;
		int sxelseifforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxelseifforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxelseiffor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Else If");
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    nd1.addHijo((Nodo)sxelseiffor);
                    RESULT=tmp;
                 
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FOR",50, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // INELSEIF_FOR ::= OPERACIONES INELSEIF_FOR 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelseifforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseifforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelseiffor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)oper);
                    tmp.addHijo((Nodo)inelseiffor);
                    RESULT=tmp;
                 
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FOR",50, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // INELSEIF_FOR ::= CONSOLEWRITE INELSEIF_FOR 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelseifforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseifforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelseiffor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)cs);
                    tmp.addHijo((Nodo)inelseiffor);
                    RESULT=tmp;
                 
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FOR",50, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // INELSEIF_FOR ::= SINTAXFOR INELSEIF_FOR 
            {
              Object RESULT =null;
		int sxforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxfor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelseifforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseifforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelseiffor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)sxfor);
                    tmp.addHijo((Nodo)inelseiffor);
                    RESULT=tmp;
                 
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FOR",50, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // INELSEIF_FOR ::= SINTAXWHILE_FOR INELSEIF_FOR 
            {
              Object RESULT =null;
		int sxwhileforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxwhileforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxwhilefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelseifforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseifforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelseiffor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)sxwhilefor);
                    tmp.addHijo((Nodo)inelseiffor);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FOR",50, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // INELSEIF_FOR ::= tk_comentario tk_Linea INELSEIF_FOR 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int inelseifforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseifforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelseiffor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Comentario");
                    nd1.setValor(com.toString());
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    tmp.addHijo((Nodo)inelseiffor);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FOR",50, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // INELSEIF_FOR ::= tk_comentario tk_Linea 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Comentario");
                    nd1.setValor(com.toString());
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FOR",50, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // INELSEIF_FOR ::= SINTAXIF_FOR 
            {
              Object RESULT =null;
		int sxifforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxifforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxiffor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)sxiffor);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FOR",50, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // INELSEIF_FOR ::= VARIABLE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)var);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FOR",50, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // INELSEIF_FOR ::= LLAMADAFUNC 
            {
              Object RESULT =null;
		int llamfuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int llamfuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object llamfunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)llamfunc);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FOR",50, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // INELSEIF_FOR ::= ASIGNACIONVAL 
            {
              Object RESULT =null;
		int asigvalleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int asigvalright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object asigval = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)asigval);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FOR",50, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // INELSEIF_FOR ::= CONSOLEWRITE 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)cs);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FOR",50, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // INELSEIF_FOR ::= OPERACIONES 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)oper);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FOR",50, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // INELSEIF_FOR ::= SINTAXFOR 
            {
              Object RESULT =null;
		int sxforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxfor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)sxfor);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FOR",50, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // INELSEIF_FOR ::= SINTAXWHILE_FOR 
            {
              Object RESULT =null;
		int sxwhileforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxwhileforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxwhilefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)sxwhilefor);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FOR",50, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // INELSEIF_FOR ::= tk_exit tk_for tk_Linea 
            {
              Object RESULT =null;
		
                    Nodo tmp = new Nodo("IN FOR ELSEIF");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Exit For");
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_FOR",50, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // INELSE_FOR ::= SINTAXIF_FOR INELSE_FOR 
            {
              Object RESULT =null;
		int sxifforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxifforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxiffor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelseforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelsefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxiffor);
                tmp.addHijo((Nodo)inelsefor);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FOR",51, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // INELSE_FOR ::= VARIABLE INELSE_FOR 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelseforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelsefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)var);
                tmp.addHijo((Nodo)inelsefor);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FOR",51, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // INELSE_FOR ::= LLAMADAFUNC INELSE_FOR 
            {
              Object RESULT =null;
		int llamfuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int llamfuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object llamfunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelseforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelsefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)llamfunc);
                tmp.addHijo((Nodo)inelsefor);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FOR",51, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // INELSE_FOR ::= ASIGNACIONVAL INELSE_FOR 
            {
              Object RESULT =null;
		int asigvalleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int asigvalright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object asigval = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelseforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelsefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)asigval);
                tmp.addHijo((Nodo)inelsefor);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FOR",51, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // INELSE_FOR ::= OPERACIONES INELSE_FOR 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelseforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelsefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)oper);
                tmp.addHijo((Nodo)inelsefor);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FOR",51, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // INELSE_FOR ::= CONSOLEWRITE INELSE_FOR 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelseforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelsefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)cs);
                tmp.addHijo((Nodo)inelsefor);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FOR",51, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // INELSE_FOR ::= SINTAXFOR INELSE_FOR 
            {
              Object RESULT =null;
		int sxforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxfor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelseforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelsefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxfor);
                tmp.addHijo((Nodo)inelsefor);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FOR",51, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // INELSE_FOR ::= SINTAXWHILE_FOR INELSE_FOR 
            {
              Object RESULT =null;
		int sxwhileforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxwhileforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxwhilefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelseforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelsefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxwhilefor);
                tmp.addHijo((Nodo)inelsefor);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FOR",51, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // INELSE_FOR ::= tk_comentario tk_Linea INELSE_FOR 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int inelseforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelsefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Comentario");
                nd1.setValor(com.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);           
                tmp.addHijo((Nodo)inelsefor);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FOR",51, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // INELSE_FOR ::= tk_comentario tk_Linea 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Comentario");
                nd1.setValor(com.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FOR",51, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // INELSE_FOR ::= SINTAXIF_FOR 
            {
              Object RESULT =null;
		int sxifforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxifforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxiffor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxiffor);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FOR",51, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // INELSE_FOR ::= VARIABLE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)var);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FOR",51, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // INELSE_FOR ::= LLAMADAFUNC 
            {
              Object RESULT =null;
		int llamfuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int llamfuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object llamfunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)llamfunc);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FOR",51, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // INELSE_FOR ::= ASIGNACIONVAL 
            {
              Object RESULT =null;
		int asigvalleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int asigvalright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object asigval = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)asigval);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FOR",51, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // INELSE_FOR ::= CONSOLEWRITE 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)cs);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FOR",51, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // INELSE_FOR ::= OPERACIONES 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)oper);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FOR",51, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // INELSE_FOR ::= SINTAXFOR 
            {
              Object RESULT =null;
		int sxforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxfor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxfor);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FOR",51, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // INELSE_FOR ::= SINTAXWHILE_FOR 
            {
              Object RESULT =null;
		int sxwhileforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxwhileforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxwhilefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxwhilefor);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FOR",51, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // INELSE_FOR ::= tk_exit tk_for tk_Linea 
            {
              Object RESULT =null;
		
                Nodo tmp = new Nodo("IN FOR ELSE");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Exit For");
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_FOR",51, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // SINTAXWHILE_FOR ::= tk_do tk_while CONDICION tk_Linea INWHILE_FOR tk_loop tk_Linea 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).value;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		
            Nodo tmp = new Nodo("WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Loop");
            nd1.setNumNodo(parser.contador++);
        
            tmp.addHijo((Nodo)con);
            tmp.addHijo((Nodo)inwhile);
            tmp.addHijo(nd1);
            RESULT=tmp;    
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("SINTAXWHILE_FOR",45, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // INWHILE_FOR ::= SINTAXFOR INWHILE_FOR 
            {
              Object RESULT =null;
		int sxforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxfor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inwhileforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhilefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxfor);
            tmp.addHijo((Nodo)inwhilefor);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",46, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // INWHILE_FOR ::= VARIABLE INWHILE_FOR 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inwhileforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhilefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            tmp.addHijo((Nodo)inwhilefor);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",46, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // INWHILE_FOR ::= LLAMADAFUNC INWHILE_FOR 
            {
              Object RESULT =null;
		int llamfuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int llamfuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object llamfunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inwhileforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhilefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
           Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)llamfunc);
            tmp.addHijo((Nodo)inwhilefor);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",46, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // INWHILE_FOR ::= ASIGNACIONVAL INWHILE_FOR 
            {
              Object RESULT =null;
		int asigvalleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int asigvalright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object asigval = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inwhileforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhilefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
           Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)asigval);
            tmp.addHijo((Nodo)inwhilefor);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",46, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // INWHILE_FOR ::= CONSOLEWRITE INWHILE_FOR 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inwhileforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhilefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
           Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            tmp.addHijo((Nodo)inwhilefor);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",46, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // INWHILE_FOR ::= OPERACIONES INWHILE_FOR 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inwhileforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhilefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
           Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)oper);
            tmp.addHijo((Nodo)inwhilefor);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",46, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // INWHILE_FOR ::= SINTAXWHILE_FOR INWHILE_FOR 
            {
              Object RESULT =null;
		int sxwhileforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxwhileforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxwhilefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inwhileforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhilefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
           Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxwhilefor);
            tmp.addHijo((Nodo)inwhilefor);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",46, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // INWHILE_FOR ::= SINTAXIF_FOR INWHILE_FOR 
            {
              Object RESULT =null;
		int sxifforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxifforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxiffor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inwhileforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhilefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
           Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxiffor);
            tmp.addHijo((Nodo)inwhilefor);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",46, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // INWHILE_FOR ::= tk_comentario tk_Linea INWHILE_FOR 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int inwhileforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhilefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            tmp.addHijo((Nodo)inwhilefor);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",46, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // INWHILE_FOR ::= tk_comentario tk_Linea 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		
            Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
         
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",46, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // INWHILE_FOR ::= SINTAXFOR 
            {
              Object RESULT =null;
		int sxforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxfor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)sxfor);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",46, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // INWHILE_FOR ::= VARIABLE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)var);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",46, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // INWHILE_FOR ::= LLAMADAFUNC 
            {
              Object RESULT =null;
		int llamfuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int llamfuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object llamfunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)llamfunc);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",46, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // INWHILE_FOR ::= ASIGNACIONVAL 
            {
              Object RESULT =null;
		int asigvalleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int asigvalright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object asigval = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)asigval);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",46, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // INWHILE_FOR ::= CONSOLEWRITE 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)cs);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",46, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // INWHILE_FOR ::= OPERACIONES 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)oper);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",46, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // INWHILE_FOR ::= SINTAXIF_FOR 
            {
              Object RESULT =null;
		int sxifforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxifforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxiffor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)sxiffor);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",46, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // INWHILE_FOR ::= SINTAXWHILE_FOR 
            {
              Object RESULT =null;
		int sxwhileforleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxwhileforright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxwhilefor = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)sxwhilefor);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",46, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // INWHILE_FOR ::= tk_exit tk_do tk_Linea 
            {
              Object RESULT =null;
		
            Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Exit do");
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",46, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // INWHILE_FOR ::= tk_exit tk_for tk_Linea 
            {
              Object RESULT =null;
		
            Nodo tmp = new Nodo("IN FOR WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Exit for");
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE_FOR",46, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // SINTAXIF_WHILE ::= tk_if CONDICION tk_then tk_Linea INIF_WHILE tk_end tk_if tk_Linea 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)).value;
		int inifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int inifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		Object inifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		
            Nodo tmp = new Nodo("IF");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("End if");
            nd1.setNumNodo(parser.contador++);
            
            tmp.addHijo((Nodo)con);
            tmp.addHijo((Nodo)inifwhile);
            tmp.addHijo(nd1);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("SINTAXIF_WHILE",38, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-7)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // SINTAXELSEIF_WHILE ::= CONDICION tk_then tk_Linea INELSEIF_WHILE 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		int inelseifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelseifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("ELSE IF");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)con);
            tmp.addHijo((Nodo)inelseifwhile);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("SINTAXELSEIF_WHILE",42, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // INIF_WHILE ::= SINTAXIF_WHILE INIF_WHILE 
            {
              Object RESULT =null;
		int sxifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxifwhile);
                tmp.addHijo((Nodo)inifwhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // INIF_WHILE ::= VARIABLE INIF_WHILE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)var);
                tmp.addHijo((Nodo)inifwhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // INIF_WHILE ::= LLAMADAFUNC INIF_WHILE 
            {
              Object RESULT =null;
		int llamfuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int llamfuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object llamfunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)llamfunc);
                tmp.addHijo((Nodo)inifwhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // INIF_WHILE ::= ASIGNACIONVAL INIF_WHILE 
            {
              Object RESULT =null;
		int asigvalleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int asigvalright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object asigval = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)asigval);
                tmp.addHijo((Nodo)inifwhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // INIF_WHILE ::= OPERACIONES INIF_WHILE 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)oper);
                tmp.addHijo((Nodo)inifwhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // INIF_WHILE ::= CONSOLEWRITE INIF_WHILE 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)cs);
                tmp.addHijo((Nodo)inifwhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // INIF_WHILE ::= SINTAXFOR_WHILE INIF_WHILE 
            {
              Object RESULT =null;
		int sxforwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxforwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxforwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxforwhile);
                tmp.addHijo((Nodo)inifwhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // INIF_WHILE ::= SINTAXWHILE INIF_WHILE 
            {
              Object RESULT =null;
		int sxwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxwhile);
                tmp.addHijo((Nodo)inifwhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // INIF_WHILE ::= tk_comentario tk_Linea INIF_WHILE 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int inifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Comentario");
                nd1.setValor(com.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                tmp.addHijo((Nodo)inifwhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // INIF_WHILE ::= tk_comentario tk_Linea 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Comentario");
                nd1.setValor(com.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // INIF_WHILE ::= SINTAXIF_WHILE 
            {
              Object RESULT =null;
		int sxifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxifwhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // INIF_WHILE ::= VARIABLE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)var);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // INIF_WHILE ::= LLAMADAFUNC 
            {
              Object RESULT =null;
		int llamfuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int llamfuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object llamfunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)llamfunc);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // INIF_WHILE ::= ASIGNACIONVAL 
            {
              Object RESULT =null;
		int asigvalleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int asigvalright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object asigval = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)asigval);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // INIF_WHILE ::= CONSOLEWRITE 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)cs);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // INIF_WHILE ::= OPERACIONES 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)oper);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // INIF_WHILE ::= SINTAXFOR_WHILE 
            {
              Object RESULT =null;
		int sxforwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxforwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxforwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxforwhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // INIF_WHILE ::= SINTAXWHILE 
            {
              Object RESULT =null;
		int sxwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxwhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // INIF_WHILE ::= tk_exit tk_do tk_Linea 
            {
              Object RESULT =null;
		
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Exit Do");
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // INIF_WHILE ::= tk_else tk_Linea INELSE_WHILE 
            {
              Object RESULT =null;
		int inelsewhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelsewhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelsewhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("ELSE");
                tmp.setNumNodo(parser.contador++);

                tmp.addHijo((Nodo)inelsewhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // INIF_WHILE ::= tk_elseif SINTAXELSEIF_WHILE 
            {
              Object RESULT =null;
		int sxelseifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxelseifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxelseifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE IF");
                tmp.setNumNodo(parser.contador++);

                tmp.addHijo((Nodo)sxelseifwhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INIF_WHILE",39, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // INELSEIF_WHILE ::= SINTAXWHILE INELSEIF_WHILE 
            {
              Object RESULT =null;
		int sxwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelseifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelseifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)sxwhile);
                    tmp.addHijo((Nodo)inelseifwhile);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_WHILE",41, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // INELSEIF_WHILE ::= SINTAXIF_WHILE INELSEIF_WHILE 
            {
              Object RESULT =null;
		int sxifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelseifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelseifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)sxifwhile);
                    tmp.addHijo((Nodo)inelseifwhile);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_WHILE",41, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // INELSEIF_WHILE ::= VARIABLE INELSEIF_WHILE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelseifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelseifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)var);
                    tmp.addHijo((Nodo)inelseifwhile);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_WHILE",41, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // INELSEIF_WHILE ::= LLAMADAFUNC INELSEIF_WHILE 
            {
              Object RESULT =null;
		int llamfuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int llamfuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object llamfunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelseifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelseifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)llamfunc);
                    tmp.addHijo((Nodo)inelseifwhile);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_WHILE",41, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // INELSEIF_WHILE ::= ASIGNACIONVAL INELSEIF_WHILE 
            {
              Object RESULT =null;
		int asigvalleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int asigvalright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object asigval = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelseifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelseifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)asigval);
                    tmp.addHijo((Nodo)inelseifwhile);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_WHILE",41, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // INELSEIF_WHILE ::= tk_else tk_Linea INELSE_WHILE 
            {
              Object RESULT =null;
		int inelsewhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelsewhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelsewhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Else");
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    nd1.addHijo((Nodo)inelsewhile);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_WHILE",41, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // INELSEIF_WHILE ::= tk_elseif SINTAXELSEIF_WHILE 
            {
              Object RESULT =null;
		int sxelseifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxelseifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxelseifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Else If");
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    nd1.addHijo((Nodo)sxelseifwhile);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_WHILE",41, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // INELSEIF_WHILE ::= OPERACIONES INELSEIF_WHILE 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelseifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelseifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)oper);
                    tmp.addHijo((Nodo)inelseifwhile);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_WHILE",41, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // INELSEIF_WHILE ::= CONSOLEWRITE INELSEIF_WHILE 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelseifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelseifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)cs);
                    tmp.addHijo((Nodo)inelseifwhile);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_WHILE",41, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // INELSEIF_WHILE ::= SINTAXFOR_WHILE INELSEIF_WHILE 
            {
              Object RESULT =null;
		int sxforwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxforwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxforwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelseifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelseifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)sxforwhile);
                    tmp.addHijo((Nodo)inelseifwhile);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_WHILE",41, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // INELSEIF_WHILE ::= tk_comentario tk_Linea INELSEIF_WHILE 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int inelseifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelseifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelseifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Comentario");
                    nd1.setValor(com.toString());
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    tmp.addHijo((Nodo)inelseifwhile);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_WHILE",41, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // INELSEIF_WHILE ::= tk_comentario tk_Linea 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Comentario");
                    nd1.setValor(com.toString());
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_WHILE",41, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // INELSEIF_WHILE ::= SINTAXWHILE 
            {
              Object RESULT =null;
		int sxwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)sxwhile);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_WHILE",41, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // INELSEIF_WHILE ::= SINTAXIF_WHILE 
            {
              Object RESULT =null;
		int sxifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)sxifwhile);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_WHILE",41, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // INELSEIF_WHILE ::= VARIABLE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)var);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_WHILE",41, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // INELSEIF_WHILE ::= LLAMADAFUNC 
            {
              Object RESULT =null;
		int llamfuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int llamfuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object llamfunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)llamfunc);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_WHILE",41, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // INELSEIF_WHILE ::= ASIGNACIONVAL 
            {
              Object RESULT =null;
		int asigvalleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int asigvalright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object asigval = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)asigval);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_WHILE",41, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // INELSEIF_WHILE ::= CONSOLEWRITE 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)cs);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_WHILE",41, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // INELSEIF_WHILE ::= OPERACIONES 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)oper);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_WHILE",41, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // INELSEIF_WHILE ::= SINTAXFOR_WHILE 
            {
              Object RESULT =null;
		int sxforwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxforwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxforwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)sxforwhile);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_WHILE",41, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // INELSEIF_WHILE ::= tk_exit tk_do tk_Linea 
            {
              Object RESULT =null;
		
                    Nodo tmp = new Nodo("IN WHILE ELSEIF");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Exit Do");
                    nd1.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    RESULT=tmp;
                
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSEIF_WHILE",41, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // INELSE_WHILE ::= SINTAXWHILE INELSE_WHILE 
            {
              Object RESULT =null;
		int sxwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelsewhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelsewhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelsewhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxwhile);
                tmp.addHijo((Nodo)inelsewhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_WHILE",40, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // INELSE_WHILE ::= SINTAXIF_WHILE INELSE_WHILE 
            {
              Object RESULT =null;
		int sxifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelsewhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelsewhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelsewhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxifwhile);
                tmp.addHijo((Nodo)inelsewhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_WHILE",40, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // INELSE_WHILE ::= VARIABLE INELSE_WHILE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelsewhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelsewhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelsewhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)var);
                tmp.addHijo((Nodo)inelsewhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_WHILE",40, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // INELSE_WHILE ::= LLAMADAFUNC INELSE_WHILE 
            {
              Object RESULT =null;
		int llamfuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int llamfuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object llamfunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelsewhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelsewhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelsewhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)llamfunc);
                tmp.addHijo((Nodo)inelsewhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_WHILE",40, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // INELSE_WHILE ::= ASIGNACIONVAL INELSE_WHILE 
            {
              Object RESULT =null;
		int asigvalleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int asigvalright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object asigval = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelsewhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelsewhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelsewhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)asigval);
                tmp.addHijo((Nodo)inelsewhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_WHILE",40, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // INELSE_WHILE ::= OPERACIONES INELSE_WHILE 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelsewhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelsewhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelsewhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)oper);
                tmp.addHijo((Nodo)inelsewhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_WHILE",40, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // INELSE_WHILE ::= CONSOLEWRITE INELSE_WHILE 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelsewhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelsewhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelsewhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)cs);
                tmp.addHijo((Nodo)inelsewhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_WHILE",40, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // INELSE_WHILE ::= SINTAXFOR_WHILE INELSE_WHILE 
            {
              Object RESULT =null;
		int sxforwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxforwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxforwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inelsewhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelsewhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelsewhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxforwhile);
                tmp.addHijo((Nodo)inelsewhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_WHILE",40, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // INELSE_WHILE ::= tk_comentario tk_Linea INELSE_WHILE 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int inelsewhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inelsewhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inelsewhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Comentario");
                nd1.setValor(com.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);           
                tmp.addHijo((Nodo)inelsewhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_WHILE",40, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // INELSE_WHILE ::= tk_comentario tk_Linea 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Comentario");
                nd1.setValor(com.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_WHILE",40, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // INELSE_WHILE ::= SINTAXWHILE 
            {
              Object RESULT =null;
		int sxwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxwhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_WHILE",40, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // INELSE_WHILE ::= SINTAXIF_WHILE 
            {
              Object RESULT =null;
		int sxifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxifwhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_WHILE",40, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // INELSE_WHILE ::= VARIABLE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)var);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_WHILE",40, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // INELSE_WHILE ::= LLAMADAFUNC 
            {
              Object RESULT =null;
		int llamfuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int llamfuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object llamfunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)llamfunc);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_WHILE",40, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // INELSE_WHILE ::= ASIGNACIONVAL 
            {
              Object RESULT =null;
		int asigvalleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int asigvalright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object asigval = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)asigval);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_WHILE",40, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // INELSE_WHILE ::= CONSOLEWRITE 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)cs);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_WHILE",40, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // INELSE_WHILE ::= OPERACIONES 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)oper);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_WHILE",40, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // INELSE_WHILE ::= SINTAXFOR_WHILE 
            {
              Object RESULT =null;
		int sxforwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxforwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxforwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxforwhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_WHILE",40, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // INELSE_WHILE ::= tk_exit tk_do tk_Linea 
            {
              Object RESULT =null;
		
                Nodo tmp = new Nodo("IN WHILE ELSE");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Exit Do");
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INELSE_WHILE",40, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // SINTAXFOR_WHILE ::= tk_for tk_Identificador tk_Igual iDNUM tk_to iDNUM tk_step AUMDEC tk_Linea INFOR_WHILE tk_next tk_Identificador tk_Linea 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-11)).value;
		int idnleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-9)).left;
		int idnright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-9)).right;
		Object idn = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-9)).value;
		int idnnleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-7)).left;
		int idnnright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-7)).right;
		Object idnn = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-7)).value;
		int aumdecleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).left;
		int aumdecright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).right;
		Object aumdec = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-5)).value;
		int inforwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int inforwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		Object inforwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		 
                    Nodo tmp = new Nodo("For");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Identificador");
                    nd1.setValor(i.toString());
                    nd1.setNumNodo(parser.contador++);
                    
                    Nodo nd2 = new Nodo("Identificador");
                    nd2.setValor(ii.toString());
                    nd2.setNumNodo(parser.contador++);
                    
                    tmp.addHijo(nd1);
                    tmp.addHijo((Nodo)idn);
                    tmp.addHijo((Nodo)idnn);
                    tmp.addHijo((Nodo)aumdec);
                    tmp.addHijo((Nodo)inforwhile);
                    tmp.addHijo(nd2);
                    RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("SINTAXFOR_WHILE",44, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-12)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // SINTAXFOR_WHILE ::= tk_for tk_Identificador tk_Igual iDNUM tk_to OPERACIONES INFOR_WHILE tk_next tk_Identificador tk_Linea 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-8)).value;
		int idnleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)).left;
		int idnright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)).right;
		Object idn = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)).value;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).value;
		int inforwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).left;
		int inforwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).right;
		Object inforwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-3)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		
                    Nodo tmp = new Nodo("For");
                    tmp.setNumNodo(parser.contador++);

                    Nodo nd1 = new Nodo("Identificador");
                    nd1.setValor(i.toString());
                    nd1.setNumNodo(parser.contador++);
                    
                    Nodo nd2 = new Nodo("Identificador");
                    nd2.setValor(ii.toString());
                    nd2.setNumNodo(parser.contador++);

                    tmp.addHijo(nd1);
                    tmp.addHijo((Nodo)idn);
                    tmp.addHijo((Nodo)oper);
                    tmp.addHijo((Nodo)inforwhile);
                    tmp.addHijo(nd2);
                    RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("SINTAXFOR_WHILE",44, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-9)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // INFOR_WHILE ::= SINTAXWHILE INFOR_WHILE 
            {
              Object RESULT =null;
		int sxwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inforwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inforwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inforwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxwhile);
                tmp.addHijo((Nodo)inforwhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",43, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // INFOR_WHILE ::= SINTAXFOR_WHILE INFOR_WHILE 
            {
              Object RESULT =null;
		int sxforwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxforwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxforwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inforwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inforwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inforwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxforwhile);
                tmp.addHijo((Nodo)inforwhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",43, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // INFOR_WHILE ::= SINTAXIF_WHILE INFOR_WHILE 
            {
              Object RESULT =null;
		int sxifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inforwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inforwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inforwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxifwhile);
                tmp.addHijo((Nodo)inforwhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",43, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // INFOR_WHILE ::= VARIABLE INFOR_WHILE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inforwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inforwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inforwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)var);
                tmp.addHijo((Nodo)inforwhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",43, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // INFOR_WHILE ::= LLAMADAFUNC INFOR_WHILE 
            {
              Object RESULT =null;
		int llamfuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int llamfuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object llamfunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inforwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inforwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inforwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)llamfunc);
                tmp.addHijo((Nodo)inforwhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",43, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // INFOR_WHILE ::= ASIGNACIONVAL INFOR_WHILE 
            {
              Object RESULT =null;
		int asigvalleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int asigvalright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object asigval = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inforwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inforwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inforwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)asigval);
                tmp.addHijo((Nodo)inforwhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",43, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // INFOR_WHILE ::= CONSOLEWRITE INFOR_WHILE 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inforwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inforwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inforwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)cs);
                tmp.addHijo((Nodo)inforwhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",43, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // INFOR_WHILE ::= OPERACIONES INFOR_WHILE 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inforwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inforwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inforwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)oper);
                tmp.addHijo((Nodo)inforwhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",43, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // INFOR_WHILE ::= tk_comentario tk_Linea INFOR_WHILE 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int inforwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inforwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inforwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
                Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Comentario");
                nd1.setValor(com.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);           
                tmp.addHijo((Nodo)inforwhile);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",43, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // INFOR_WHILE ::= tk_comentario tk_Linea 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		
                Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);

                Nodo nd1 = new Nodo("Comentario");
                nd1.setValor(com.toString());
                nd1.setNumNodo(parser.contador++);

                tmp.addHijo(nd1);
                RESULT=tmp;
            
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",43, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // INFOR_WHILE ::= SINTAXWHILE 
            {
              Object RESULT =null;
		int sxwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxwhile);
                RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",43, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // INFOR_WHILE ::= SINTAXFOR_WHILE 
            {
              Object RESULT =null;
		int sxforwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxforwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxforwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxforwhile);
                RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",43, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // INFOR_WHILE ::= SINTAXIF_WHILE 
            {
              Object RESULT =null;
		int sxifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)sxifwhile);
                RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",43, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // INFOR_WHILE ::= VARIABLE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)var);
                RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",43, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // INFOR_WHILE ::= LLAMADAFUNC 
            {
              Object RESULT =null;
		int llamfuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int llamfuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object llamfunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)llamfunc);
                RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",43, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // INFOR_WHILE ::= ASIGNACIONVAL 
            {
              Object RESULT =null;
		int asigvalleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int asigvalright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object asigval = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)asigval);
                RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",43, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // INFOR_WHILE ::= CONSOLEWRITE 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)cs);
                RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",43, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // INFOR_WHILE ::= OPERACIONES 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN WHILE FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)oper);
                RESULT=tmp;
          
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",43, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // INFOR_WHILE ::= tk_exit tk_do tk_Linea 
            {
              Object RESULT =null;
		
            Nodo tmp = new Nodo("IN WHILE FOR");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Exit do");
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",43, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // INFOR_WHILE ::= tk_exit tk_for tk_Linea 
            {
              Object RESULT =null;
		
            Nodo tmp = new Nodo("IN WHILE FOR");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Exit for");
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INFOR_WHILE",43, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // SINTAXWHILE ::= tk_do tk_while CONDICION tk_Linea INWHILE tk_loop tk_Linea 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-4)).value;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		
            Nodo tmp = new Nodo("WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Loop");
            nd1.setNumNodo(parser.contador++);
        
            tmp.addHijo((Nodo)con);
            tmp.addHijo((Nodo)inwhile);
            tmp.addHijo(nd1);
            RESULT=tmp;    
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("SINTAXWHILE",19, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-6)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // INWHILE ::= SINTAXWHILE INWHILE 
            {
              Object RESULT =null;
		int sxwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxwhile);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE",30, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // INWHILE ::= SINTAXFOR_WHILE INWHILE 
            {
              Object RESULT =null;
		int sxforwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxforwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxforwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
           Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxforwhile);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE",30, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // INWHILE ::= SINTAXIF_WHILE INWHILE 
            {
              Object RESULT =null;
		int sxifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int sxifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object sxifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
           Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)sxifwhile);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE",30, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // INWHILE ::= VARIABLE INWHILE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
           Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)var);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE",30, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // INWHILE ::= LLAMADAFUNC INWHILE 
            {
              Object RESULT =null;
		int llamfuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int llamfuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object llamfunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
           Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)llamfunc);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE",30, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // INWHILE ::= ASIGNACIONVAL INWHILE 
            {
              Object RESULT =null;
		int asigvalleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int asigvalright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object asigval = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
           Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)asigval);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE",30, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // INWHILE ::= CONSOLEWRITE INWHILE 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
           Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)cs);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE",30, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // INWHILE ::= OPERACIONES INWHILE 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
           Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)oper);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE",30, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // INWHILE ::= tk_comentario tk_Linea INWHILE 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)).value;
		int inwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int inwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object inwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            tmp.addHijo((Nodo)inwhile);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE",30, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // INWHILE ::= tk_comentario tk_Linea 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)).value;
		
            Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Comentario");
            nd1.setValor(com.toString());
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
         
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE",30, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-1)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // INWHILE ::= SINTAXWHILE 
            {
              Object RESULT =null;
		int sxwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)sxwhile);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE",30, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // INWHILE ::= SINTAXFOR_WHILE 
            {
              Object RESULT =null;
		int sxforwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxforwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxforwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)sxforwhile);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE",30, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // INWHILE ::= SINTAXIF_WHILE 
            {
              Object RESULT =null;
		int sxifwhileleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int sxifwhileright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object sxifwhile = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)sxifwhile);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE",30, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // INWHILE ::= VARIABLE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)var);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE",30, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // INWHILE ::= LLAMADAFUNC 
            {
              Object RESULT =null;
		int llamfuncleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int llamfuncright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object llamfunc = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)llamfunc);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE",30, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // INWHILE ::= ASIGNACIONVAL 
            {
              Object RESULT =null;
		int asigvalleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int asigvalright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object asigval = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)asigval);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE",30, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // INWHILE ::= CONSOLEWRITE 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)cs);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE",30, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // INWHILE ::= OPERACIONES 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Gramatica$stack.peek()).value;
		
            Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);

            tmp.addHijo((Nodo)oper);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE",30, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // INWHILE ::= tk_exit tk_do tk_Linea 
            {
              Object RESULT =null;
		
            Nodo tmp = new Nodo("IN WHILE");
            tmp.setNumNodo(parser.contador++);

            Nodo nd1 = new Nodo("Exit do");
            nd1.setNumNodo(parser.contador++);

            tmp.addHijo(nd1);
            RESULT=tmp;
        
              CUP$Gramatica$result = parser.getSymbolFactory().newSymbol("INWHILE",30, ((java_cup.runtime.Symbol)CUP$Gramatica$stack.elementAt(CUP$Gramatica$top-2)), ((java_cup.runtime.Symbol)CUP$Gramatica$stack.peek()), RESULT);
            }
          return CUP$Gramatica$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Gramatica$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Gramatica$do_action(
    int                        CUP$Gramatica$act_num,
    java_cup.runtime.lr_parser CUP$Gramatica$parser,
    java.util.Stack            CUP$Gramatica$stack,
    int                        CUP$Gramatica$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$Gramatica$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$Gramatica$do_action_part00000000(
                               CUP$Gramatica$act_num,
                               CUP$Gramatica$parser,
                               CUP$Gramatica$stack,
                               CUP$Gramatica$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$Gramatica$do_action_part00000001(
                               CUP$Gramatica$act_num,
                               CUP$Gramatica$parser,
                               CUP$Gramatica$stack,
                               CUP$Gramatica$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
