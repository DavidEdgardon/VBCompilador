/* The following code was generated by JFlex 1.4.3 on 03-13-21 11:52 PM */

package analizadores;
import static analizadores.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 03-13-21 11:52 PM from the specification file
 * <tt>C:/Users/David/Documents/NetBeansProjects/VBCompilador/src/analizadores/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\4\1\0\1\2\23\0\1\2\1\0\1\3\3\0"+
    "\1\55\1\5\1\61\1\62\1\52\1\50\1\54\1\51\1\56\1\53"+
    "\12\1\2\0\1\60\1\40\1\57\2\0\1\30\1\44\1\23\1\26"+
    "\1\25\1\31\1\33\1\41\1\10\1\6\1\43\1\22\1\11\1\32"+
    "\1\14\1\13\1\6\1\15\1\17\1\16\1\20\1\45\1\27\1\42"+
    "\1\24\1\6\4\0\1\6\1\0\1\46\1\21\1\23\1\26\1\36"+
    "\1\31\1\33\1\41\1\10\1\6\1\43\1\47\1\37\1\32\1\14"+
    "\1\13\1\6\1\15\1\7\1\35\1\20\1\6\1\27\1\42\1\34"+
    "\1\6\1\0\1\12\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\3\22\5\1\6\2\5\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\0"+
    "\1\22\4\5\2\23\4\5\1\24\1\5\1\24\1\25"+
    "\1\26\10\5\1\26\1\5\2\27\14\5\2\25\3\5"+
    "\1\24\13\5\1\30\1\31\1\32\1\5\1\33\1\5"+
    "\1\33\4\5\2\34\2\35\3\5\1\35\1\5\1\36"+
    "\1\37\1\5\1\33\2\5\1\40\3\5\2\36\1\37"+
    "\3\5\1\33\7\5\1\40\1\5\1\40\14\5\1\40"+
    "\1\5\1\41\1\36\1\37\1\42\3\5\2\43\2\5"+
    "\1\43\1\5\2\44\1\5\1\45\2\46\1\44\1\47"+
    "\3\5\1\50\1\51\1\52\1\5\1\53\1\5\1\50"+
    "\1\54\1\51\4\5\1\50\2\5\2\53\1\55\2\5"+
    "\1\52\1\51\1\5\1\50\2\53\1\52\1\44\1\5"+
    "\1\55\1\47\1\54\15\5\1\56\1\57\1\56\1\60"+
    "\1\5\1\60\2\61\1\5\1\60\2\5\1\61\1\60"+
    "\1\57\2\5\2\56\2\5\1\61\3\5\1\61\1\5"+
    "\1\60\1\62\1\63\1\64\1\65\1\5\1\66\1\67"+
    "\2\5\1\70\1\5\1\64\1\5\1\66\1\5\1\71"+
    "\2\63\1\70\1\67\1\71\1\5\1\66\1\70\1\63"+
    "\1\72\1\5\1\73\1\5\1\72\1\74\1\73\1\74"+
    "\1\73\1\0\1\5\2\75\1\0\1\76\4\0\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[303];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\63\0\231\0\63\0\314\0\377"+
    "\0\u0132\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297"+
    "\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f"+
    "\0\u0462\0\u0495\0\u04c8\0\63\0\u04fb\0\u052e\0\63\0\63"+
    "\0\63\0\63\0\63\0\63\0\63\0\u0561\0\u0594\0\63"+
    "\0\63\0\u05c7\0\314\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6"+
    "\0\377\0\u06c6\0\u06f9\0\u072c\0\u075f\0\377\0\u0792\0\u07c5"+
    "\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d"+
    "\0\u0990\0\u09c3\0\377\0\u09f6\0\u0a29\0\377\0\u0a5c\0\u0a8f"+
    "\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27"+
    "\0\u0c5a\0\u0c8d\0\u0c8d\0\377\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59"+
    "\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe"+
    "\0\u0ef1\0\u0f24\0\u0f57\0\63\0\63\0\u05c7\0\u0f8a\0\u0fbd"+
    "\0\u0ff0\0\377\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122"+
    "\0\377\0\u1155\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u0ff0"+
    "\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1122\0\u1353\0\u1386"+
    "\0\u13b9\0\u13ec\0\377\0\377\0\u141f\0\u1452\0\u1485\0\u14b8"+
    "\0\u14eb\0\u151e\0\u1551\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650"+
    "\0\u1650\0\377\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u12ba\0\u174f"+
    "\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7"+
    "\0\377\0\u191a\0\u194d\0\377\0\u1980\0\u19b3\0\u19e6\0\u1a19"+
    "\0\377\0\u1a4c\0\u1a7f\0\u1a7f\0\u1ab2\0\377\0\u1ae5\0\u1ae5"+
    "\0\377\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a"+
    "\0\u1c7d\0\377\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c\0\377"+
    "\0\u1daf\0\u1daf\0\u1de2\0\u1e15\0\u1e48\0\377\0\u1e7b\0\u1eae"+
    "\0\u1eae\0\377\0\377\0\u1ee1\0\u1f14\0\377\0\u1f47\0\u1bb1"+
    "\0\u1bb1\0\u1f7a\0\u1e7b\0\u1e48\0\u1eae\0\u1fad\0\u1be4\0\377"+
    "\0\u1e48\0\u1fe0\0\u1b7e\0\u2013\0\u2046\0\u2079\0\u20ac\0\u20df"+
    "\0\u2112\0\u2145\0\u2178\0\u21ab\0\u21de\0\u2211\0\u2244\0\u2244"+
    "\0\377\0\u2277\0\u2277\0\377\0\u20ac\0\377\0\u22aa\0\u22dd"+
    "\0\u2310\0\u2343\0\u21ab\0\u2376\0\u23a9\0\u23dc\0\u240f\0\u2442"+
    "\0\u2475\0\u24a8\0\u2475\0\u24db\0\u250e\0\u2541\0\u2574\0\u2178"+
    "\0\u25a7\0\u2343\0\377\0\377\0\377\0\377\0\u25da\0\377"+
    "\0\377\0\u260d\0\u2640\0\377\0\u2673\0\u26a6\0\u26d9\0\u25da"+
    "\0\u270c\0\377\0\u273f\0\u260d\0\u270c\0\u25da\0\u25da\0\u2772"+
    "\0\u27a5\0\u2673\0\u27d8\0\377\0\u280b\0\377\0\u283e\0\u2871"+
    "\0\377\0\u280b\0\u280b\0\u283e\0\u28a4\0\u28d7\0\377\0\u28d7"+
    "\0\u290a\0\377\0\u293d\0\u2970\0\u29a3\0\u29d6\0\63";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[303];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\10\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\2\10\1\20\1\26\1\13\1\34"+
    "\1\10\1\35\1\10\1\36\1\10\1\31\1\24\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\64\0\1\3\61\0\4\52\1\0\56\52"+
    "\4\53\1\0\56\53\1\0\1\10\4\0\32\10\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\1\54\3\10\1\55"+
    "\1\10\1\56\3\10\1\57\7\10\1\57\1\55\2\10"+
    "\1\0\7\10\14\0\1\10\4\0\4\10\1\60\16\10"+
    "\1\61\1\62\5\10\1\0\7\10\14\0\1\10\4\0"+
    "\4\10\1\63\1\10\1\64\13\10\1\65\7\10\1\0"+
    "\5\10\1\65\1\10\14\0\1\10\4\0\1\10\1\66"+
    "\1\67\1\10\1\70\1\10\1\71\1\72\1\55\1\66"+
    "\1\73\1\10\1\74\1\10\1\57\1\75\2\10\1\76"+
    "\1\61\1\77\1\10\1\57\1\55\1\75\1\10\1\0"+
    "\1\100\1\101\3\10\1\76\1\74\14\0\1\10\4\0"+
    "\4\10\1\102\5\10\1\102\17\10\1\0\7\10\14\0"+
    "\1\10\4\0\4\10\1\103\2\10\1\103\22\10\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\1\104\12\10\1\104"+
    "\10\10\1\104\1\10\1\0\7\10\14\0\1\10\4\0"+
    "\4\10\1\105\1\10\1\106\1\107\22\10\1\0\1\110"+
    "\6\10\14\0\1\10\4\0\4\10\1\54\3\10\1\55"+
    "\1\10\1\56\3\10\1\57\7\10\1\111\1\55\2\10"+
    "\1\0\7\10\14\0\1\10\4\0\4\10\1\112\17\10"+
    "\1\112\5\10\1\0\7\10\14\0\1\10\4\0\4\10"+
    "\1\113\1\10\1\113\23\10\1\0\7\10\14\0\1\10"+
    "\4\0\2\10\1\114\1\10\1\115\1\10\1\116\23\10"+
    "\1\0\7\10\14\0\1\10\4\0\4\10\1\117\1\10"+
    "\1\117\23\10\1\0\7\10\14\0\1\10\4\0\4\10"+
    "\1\120\7\10\1\74\7\10\1\121\5\10\1\0\1\10"+
    "\1\101\4\10\1\74\14\0\1\10\4\0\2\10\1\122"+
    "\1\10\1\123\1\10\1\124\23\10\1\0\7\10\14\0"+
    "\1\10\4\0\4\10\1\125\2\10\1\126\22\10\1\0"+
    "\1\127\6\10\14\0\1\10\4\0\1\10\1\66\2\10"+
    "\1\130\4\10\1\66\12\10\1\131\5\10\1\0\7\10"+
    "\14\0\1\10\4\0\4\10\1\132\1\10\1\133\3\10"+
    "\1\134\7\10\1\135\7\10\1\0\5\10\1\135\1\10"+
    "\14\0\1\10\4\0\4\10\1\136\1\10\1\137\3\10"+
    "\1\140\4\10\1\141\10\10\1\141\1\10\1\0\7\10"+
    "\14\0\1\10\4\0\4\10\1\142\1\10\1\142\23\10"+
    "\1\0\7\10\14\0\1\10\4\0\4\10\1\113\1\10"+
    "\1\113\17\10\1\143\3\10\1\0\7\10\53\0\1\144"+
    "\62\0\1\145\22\0\3\52\1\146\1\0\56\52\1\0"+
    "\1\10\4\0\1\10\1\147\2\10\1\150\2\10\1\151"+
    "\1\10\1\147\1\10\1\152\3\10\1\153\10\10\1\153"+
    "\1\10\1\0\3\10\1\152\3\10\14\0\1\10\4\0"+
    "\4\10\1\154\2\10\1\151\7\10\1\153\10\10\1\153"+
    "\1\10\1\0\7\10\14\0\1\10\4\0\4\10\1\152"+
    "\6\10\1\152\16\10\1\0\3\10\1\152\3\10\14\0"+
    "\1\10\4\0\1\10\1\147\2\10\1\147\4\10\1\147"+
    "\20\10\1\0\7\10\14\0\1\10\4\0\4\10\1\155"+
    "\3\10\1\155\16\10\1\155\2\10\1\0\7\10\14\0"+
    "\1\10\4\0\2\10\1\156\1\10\1\157\13\10\1\160"+
    "\11\10\1\0\7\10\14\0\1\10\4\0\4\10\1\160"+
    "\13\10\1\160\11\10\1\0\7\10\14\0\1\10\4\0"+
    "\2\10\1\156\1\10\1\156\25\10\1\0\7\10\14\0"+
    "\1\10\4\0\3\10\1\161\1\162\24\10\1\161\1\0"+
    "\2\10\1\163\4\10\14\0\1\10\4\0\1\10\1\164"+
    "\1\165\1\161\1\166\1\10\1\167\1\170\1\171\1\164"+
    "\1\172\1\173\1\174\2\10\1\175\1\176\1\10\1\177"+
    "\1\10\1\200\2\10\1\171\1\175\1\161\1\0\1\10"+
    "\1\201\1\163\1\173\1\10\1\177\1\174\14\0\1\10"+
    "\4\0\4\10\1\202\1\10\1\167\1\203\1\204\7\10"+
    "\1\160\3\10\1\205\2\10\1\204\2\10\1\0\7\10"+
    "\14\0\1\10\4\0\2\10\1\206\1\10\1\207\5\10"+
    "\1\172\17\10\1\0\7\10\14\0\1\10\4\0\4\10"+
    "\1\210\6\10\1\173\1\211\7\10\1\212\5\10\1\0"+
    "\3\10\1\173\2\10\1\211\14\0\1\10\4\0\1\10"+
    "\1\213\2\10\1\213\4\10\1\213\20\10\1\0\7\10"+
    "\14\0\1\10\4\0\4\10\1\214\3\10\1\215\11\10"+
    "\1\177\4\10\1\215\2\10\1\0\1\10\1\201\3\10"+
    "\1\177\1\10\14\0\1\10\4\0\2\10\1\156\1\10"+
    "\1\216\7\10\1\217\15\10\1\0\6\10\1\217\14\0"+
    "\1\10\4\0\4\10\1\220\3\10\1\221\7\10\1\222"+
    "\6\10\1\221\2\10\1\0\7\10\14\0\1\10\4\0"+
    "\2\10\1\223\1\10\1\224\12\10\1\225\10\10\1\225"+
    "\1\10\1\0\7\10\14\0\1\10\4\0\2\10\1\226"+
    "\1\10\1\226\25\10\1\0\7\10\14\0\1\10\4\0"+
    "\4\10\1\227\6\10\1\227\16\10\1\0\3\10\1\227"+
    "\3\10\14\0\1\10\4\0\4\10\1\230\3\10\1\215"+
    "\11\10\1\177\4\10\1\215\2\10\1\0\5\10\1\177"+
    "\1\10\14\0\1\10\4\0\4\10\1\231\5\10\1\172"+
    "\4\10\1\225\10\10\1\225\1\10\1\0\7\10\14\0"+
    "\1\10\4\0\4\10\1\172\5\10\1\172\17\10\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\1\225\12\10\1\225"+
    "\10\10\1\225\1\10\1\0\7\10\14\0\1\10\4\0"+
    "\1\10\1\232\2\10\1\147\4\10\1\147\20\10\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\1\233\3\10\1\233"+
    "\16\10\1\233\2\10\1\0\7\10\14\0\1\10\4\0"+
    "\4\10\1\234\1\10\1\234\23\10\1\0\7\10\14\0"+
    "\1\10\4\0\4\10\1\163\25\10\1\0\2\10\1\163"+
    "\4\10\14\0\1\10\4\0\4\10\1\235\1\10\1\236"+
    "\23\10\1\0\2\10\1\163\4\10\14\0\1\10\4\0"+
    "\4\10\1\236\1\10\1\236\23\10\1\0\7\10\14\0"+
    "\1\10\4\0\4\10\1\205\17\10\1\205\5\10\1\0"+
    "\7\10\14\0\1\10\4\0\1\10\1\213\1\226\1\10"+
    "\1\237\4\10\1\213\6\10\1\222\11\10\1\0\7\10"+
    "\14\0\1\10\4\0\4\10\1\222\13\10\1\222\11\10"+
    "\1\0\7\10\14\0\1\10\4\0\3\10\2\161\24\10"+
    "\1\161\1\0\7\10\14\0\1\10\4\0\2\10\1\240"+
    "\1\10\1\240\25\10\1\0\7\10\14\0\1\10\4\0"+
    "\2\10\1\206\1\10\1\206\25\10\1\0\7\10\14\0"+
    "\1\10\4\0\2\10\1\223\1\10\1\223\25\10\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\1\241\13\10\1\241"+
    "\11\10\1\0\7\10\14\0\1\10\4\0\4\10\1\242"+
    "\2\10\1\203\4\10\1\217\7\10\1\212\5\10\1\0"+
    "\6\10\1\217\14\0\1\10\4\0\4\10\1\203\2\10"+
    "\1\203\22\10\1\0\7\10\14\0\1\10\4\0\4\10"+
    "\1\212\17\10\1\212\5\10\1\0\7\10\14\0\1\10"+
    "\4\0\4\10\1\217\7\10\1\217\15\10\1\0\6\10"+
    "\1\217\14\0\1\10\4\0\4\10\1\243\3\10\1\204"+
    "\3\10\1\211\12\10\1\204\2\10\1\0\1\10\1\201"+
    "\4\10\1\211\14\0\1\10\4\0\4\10\1\204\3\10"+
    "\1\204\16\10\1\204\2\10\1\0\7\10\14\0\1\10"+
    "\4\0\4\10\1\211\7\10\1\211\15\10\1\0\6\10"+
    "\1\211\14\0\1\10\4\0\4\10\1\201\25\10\1\0"+
    "\1\10\1\201\5\10\14\0\1\10\4\0\4\10\1\244"+
    "\2\10\1\244\22\10\1\0\7\10\14\0\1\10\4\0"+
    "\32\10\1\0\4\10\1\245\2\10\14\0\1\10\4\0"+
    "\4\10\1\246\3\10\1\246\16\10\1\246\2\10\1\0"+
    "\7\10\14\0\1\10\4\0\2\10\1\247\1\10\1\250"+
    "\1\251\2\10\1\246\1\10\1\252\14\10\1\246\2\10"+
    "\1\0\7\10\14\0\1\10\4\0\2\10\1\247\1\10"+
    "\1\253\5\10\1\252\17\10\1\0\7\10\14\0\1\10"+
    "\4\0\4\10\2\251\24\10\1\0\7\10\14\0\1\10"+
    "\4\0\2\10\1\247\1\10\1\254\1\251\4\10\1\252"+
    "\17\10\1\0\7\10\14\0\1\10\4\0\4\10\1\255"+
    "\12\10\1\255\10\10\1\255\1\10\1\0\7\10\14\0"+
    "\1\10\4\0\4\10\1\256\17\10\1\256\5\10\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\1\257\5\10\1\260"+
    "\11\10\1\256\5\10\1\0\7\10\14\0\1\10\4\0"+
    "\4\10\1\260\5\10\1\260\17\10\1\0\7\10\14\0"+
    "\1\10\4\0\4\10\1\261\12\10\1\261\10\10\1\261"+
    "\1\10\1\0\7\10\14\0\1\10\4\0\4\10\1\262"+
    "\3\10\1\246\6\10\1\263\7\10\1\246\1\263\1\10"+
    "\1\0\7\10\14\0\1\10\4\0\4\10\1\264\3\10"+
    "\1\265\3\10\1\266\7\10\1\256\2\10\1\265\2\10"+
    "\1\0\6\10\1\266\14\0\1\10\4\0\1\10\1\267"+
    "\1\270\1\10\1\271\1\272\2\10\1\273\1\267\1\274"+
    "\1\10\1\275\1\276\1\10\1\277\1\300\3\10\1\256"+
    "\2\10\1\273\1\277\1\10\1\0\6\10\1\275\14\0"+
    "\1\10\4\0\4\10\1\301\1\272\6\10\1\302\15\10"+
    "\1\0\6\10\1\302\14\0\1\10\4\0\2\10\1\303"+
    "\1\10\1\304\5\10\1\305\4\10\1\255\10\10\1\255"+
    "\1\10\1\0\7\10\14\0\1\10\4\0\4\10\1\306"+
    "\12\10\1\306\10\10\1\306\1\10\1\0\7\10\14\0"+
    "\1\10\4\0\4\10\1\307\7\10\1\307\15\10\1\0"+
    "\6\10\1\307\14\0\1\10\4\0\1\10\1\310\2\10"+
    "\1\311\4\10\1\310\2\10\1\312\15\10\1\0\6\10"+
    "\1\312\14\0\1\10\4\0\4\10\1\313\1\251\16\10"+
    "\1\313\5\10\1\0\7\10\14\0\1\10\4\0\4\10"+
    "\1\300\13\10\1\300\11\10\1\0\7\10\14\0\1\10"+
    "\4\0\1\10\1\314\2\10\1\315\4\10\1\314\3\10"+
    "\1\276\14\10\1\0\7\10\14\0\1\10\4\0\4\10"+
    "\1\316\3\10\1\316\16\10\1\316\2\10\1\0\7\10"+
    "\14\0\1\10\4\0\1\10\1\314\2\10\1\317\1\272"+
    "\3\10\1\314\1\260\1\10\1\302\15\10\1\0\6\10"+
    "\1\302\14\0\1\10\4\0\1\10\1\314\2\10\1\314"+
    "\4\10\1\314\20\10\1\0\7\10\14\0\1\10\4\0"+
    "\4\10\1\320\3\10\1\320\16\10\1\320\2\10\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\1\321\3\10\1\320"+
    "\6\10\1\306\7\10\1\320\1\306\1\10\1\0\7\10"+
    "\14\0\1\10\4\0\4\10\1\322\7\10\1\323\1\276"+
    "\14\10\1\0\6\10\1\323\14\0\1\10\4\0\4\10"+
    "\1\312\7\10\1\312\15\10\1\0\6\10\1\312\14\0"+
    "\1\10\4\0\4\10\1\276\10\10\1\276\14\10\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\1\263\12\10\1\263"+
    "\10\10\1\263\1\10\1\0\7\10\14\0\1\10\4\0"+
    "\4\10\1\324\3\10\1\316\1\10\1\305\5\10\1\300"+
    "\6\10\1\316\2\10\1\0\7\10\14\0\1\10\4\0"+
    "\4\10\1\305\5\10\1\305\17\10\1\0\7\10\14\0"+
    "\1\10\4\0\1\10\1\310\2\10\1\325\4\10\1\310"+
    "\12\10\1\256\5\10\1\0\7\10\14\0\1\10\4\0"+
    "\1\10\1\310\2\10\1\310\4\10\1\310\20\10\1\0"+
    "\7\10\14\0\1\10\4\0\2\10\1\303\1\10\1\326"+
    "\12\10\1\255\10\10\1\255\1\10\1\0\7\10\14\0"+
    "\1\10\4\0\4\10\1\266\7\10\1\266\15\10\1\0"+
    "\6\10\1\266\14\0\1\10\4\0\4\10\1\327\7\10"+
    "\1\266\7\10\1\313\5\10\1\0\6\10\1\266\14\0"+
    "\1\10\4\0\4\10\1\313\17\10\1\313\5\10\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\1\330\3\10\1\330"+
    "\16\10\1\330\2\10\1\0\7\10\14\0\1\10\4\0"+
    "\4\10\1\331\5\10\1\305\5\10\1\300\11\10\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\1\306\12\10\1\306"+
    "\4\10\1\313\3\10\1\306\1\10\1\0\7\10\14\0"+
    "\1\10\4\0\4\10\1\246\3\10\1\246\16\10\1\332"+
    "\2\10\1\0\7\10\14\0\1\10\4\0\2\10\1\303"+
    "\1\10\1\303\25\10\1\0\7\10\14\0\1\10\4\0"+
    "\4\10\1\302\7\10\1\302\15\10\1\0\6\10\1\302"+
    "\14\0\1\10\4\0\4\10\2\272\11\10\1\261\10\10"+
    "\1\261\1\10\1\0\7\10\14\0\1\10\4\0\4\10"+
    "\2\272\24\10\1\0\7\10\14\0\1\10\4\0\4\10"+
    "\1\263\3\10\1\330\6\10\1\263\7\10\1\330\1\263"+
    "\1\10\1\0\7\10\14\0\1\10\4\0\4\10\1\333"+
    "\3\10\1\320\3\10\1\266\12\10\1\320\2\10\1\0"+
    "\6\10\1\266\14\0\1\10\4\0\1\10\1\310\2\10"+
    "\1\334\4\10\1\310\3\10\1\276\14\10\1\0\7\10"+
    "\14\0\1\10\4\0\4\10\1\316\3\10\1\316\3\10"+
    "\1\312\12\10\1\316\2\10\1\0\6\10\1\312\14\0"+
    "\1\10\4\0\32\10\1\0\5\10\1\335\1\10\14\0"+
    "\1\10\4\0\4\10\1\336\12\10\1\336\10\10\1\336"+
    "\1\10\1\0\7\10\14\0\1\10\4\0\4\10\1\337"+
    "\17\10\1\337\5\10\1\0\7\10\14\0\1\10\4\0"+
    "\4\10\1\340\10\10\1\341\1\10\1\336\4\10\1\337"+
    "\3\10\1\336\1\10\1\0\7\10\14\0\1\10\4\0"+
    "\4\10\1\341\10\10\1\341\14\10\1\0\7\10\14\0"+
    "\1\10\4\0\4\10\1\342\10\10\1\341\6\10\1\337"+
    "\5\10\1\0\7\10\14\0\1\10\4\0\4\10\1\343"+
    "\20\10\1\343\4\10\1\0\7\10\14\0\1\10\4\0"+
    "\4\10\1\344\7\10\1\344\15\10\1\0\6\10\1\344"+
    "\14\0\1\10\4\0\2\10\1\345\1\10\1\346\12\10"+
    "\1\336\10\10\1\336\1\10\1\0\7\10\14\0\1\10"+
    "\4\0\2\10\1\345\1\10\1\345\25\10\1\0\7\10"+
    "\14\0\1\10\4\0\4\10\1\347\12\10\1\347\10\10"+
    "\1\347\1\10\1\0\7\10\14\0\1\10\4\0\4\10"+
    "\1\350\12\10\1\350\10\10\1\350\1\10\1\0\7\10"+
    "\14\0\1\10\4\0\4\10\1\351\12\10\1\351\10\10"+
    "\1\351\1\10\1\0\7\10\14\0\1\10\4\0\4\10"+
    "\1\352\1\10\1\353\10\10\1\354\10\10\1\354\1\10"+
    "\1\0\7\10\14\0\1\10\4\0\4\10\1\355\7\10"+
    "\1\356\7\10\1\337\5\10\1\0\6\10\1\356\14\0"+
    "\1\10\4\0\2\10\1\357\1\10\1\360\1\10\1\353"+
    "\1\361\1\362\3\10\1\363\1\341\1\10\1\364\4\10"+
    "\1\337\1\343\1\10\1\362\1\364\1\10\1\0\6\10"+
    "\1\363\14\0\1\10\4\0\4\10\1\365\12\10\1\365"+
    "\10\10\1\365\1\10\1\0\7\10\14\0\1\10\4\0"+
    "\4\10\1\366\2\10\1\361\4\10\1\344\1\341\14\10"+
    "\1\0\6\10\1\344\14\0\1\10\4\0\2\10\1\367"+
    "\1\10\1\370\12\10\1\371\10\10\1\371\1\10\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\1\362\3\10\1\362"+
    "\16\10\1\362\2\10\1\0\7\10\14\0\1\10\4\0"+
    "\2\10\1\345\1\10\1\372\20\10\1\343\4\10\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\1\373\12\10\1\373"+
    "\10\10\1\373\1\10\1\0\7\10\14\0\1\10\4\0"+
    "\4\10\1\356\7\10\1\356\15\10\1\0\6\10\1\356"+
    "\14\0\1\10\4\0\4\10\1\374\2\10\1\361\4\10"+
    "\1\356\10\10\1\343\4\10\1\0\6\10\1\356\14\0"+
    "\1\10\4\0\4\10\1\361\2\10\1\361\22\10\1\0"+
    "\7\10\14\0\1\10\4\0\2\10\1\367\1\10\1\367"+
    "\25\10\1\0\7\10\14\0\1\10\4\0\4\10\1\354"+
    "\12\10\1\354\10\10\1\354\1\10\1\0\7\10\14\0"+
    "\1\10\4\0\4\10\1\353\1\10\1\353\23\10\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\1\375\1\10\1\353"+
    "\1\10\1\362\16\10\1\362\2\10\1\0\7\10\14\0"+
    "\1\10\4\0\4\10\1\376\1\10\1\353\5\10\1\344"+
    "\2\10\1\373\10\10\1\373\1\10\1\0\6\10\1\344"+
    "\14\0\1\10\4\0\2\10\1\367\1\10\1\377\3\10"+
    "\1\362\16\10\1\362\2\10\1\0\7\10\14\0\1\10"+
    "\4\0\4\10\1\u0100\7\10\1\356\10\10\1\343\4\10"+
    "\1\0\6\10\1\356\14\0\1\10\4\0\4\10\1\336"+
    "\12\10\1\336\10\10\1\u0101\1\10\1\0\7\10\14\0"+
    "\1\10\4\0\4\10\1\u0102\3\10\1\362\6\10\1\354"+
    "\7\10\1\362\1\354\1\10\1\0\7\10\14\0\1\10"+
    "\4\0\32\10\1\0\6\10\1\u0103\14\0\1\10\4\0"+
    "\3\10\2\u0104\24\10\1\u0104\1\0\7\10\14\0\1\10"+
    "\4\0\4\10\1\u0105\20\10\1\u0105\4\10\1\0\7\10"+
    "\14\0\1\10\4\0\3\10\1\u0104\1\u0105\3\10\1\u0106"+
    "\14\10\1\u0105\1\10\1\u0106\1\10\1\u0104\1\0\7\10"+
    "\14\0\1\10\4\0\4\10\1\u0106\3\10\1\u0106\16\10"+
    "\1\u0106\2\10\1\0\7\10\14\0\1\10\4\0\4\10"+
    "\1\u0105\3\10\1\u0106\14\10\1\u0105\1\10\1\u0106\2\10"+
    "\1\0\7\10\14\0\1\10\4\0\4\10\1\u0107\12\10"+
    "\1\u0107\10\10\1\u0107\1\10\1\0\7\10\14\0\1\10"+
    "\4\0\4\10\1\u0108\12\10\1\u0108\10\10\1\u0108\1\10"+
    "\1\0\7\10\14\0\1\10\4\0\4\10\1\u0109\16\10"+
    "\1\u0109\6\10\1\0\7\10\14\0\1\10\4\0\3\10"+
    "\1\u0104\1\u0109\16\10\1\u0109\5\10\1\u0104\1\0\7\10"+
    "\14\0\1\10\4\0\4\10\1\u010a\7\10\1\u010a\15\10"+
    "\1\0\6\10\1\u010a\14\0\1\10\4\0\4\10\1\u010b"+
    "\7\10\1\u010b\15\10\1\0\6\10\1\u010b\14\0\1\10"+
    "\4\0\4\10\1\u0109\10\10\1\u010c\5\10\1\u0109\6\10"+
    "\1\0\7\10\14\0\1\10\4\0\2\10\1\u010d\1\u0104"+
    "\1\u010e\3\10\1\u0106\3\10\1\u010f\1\u010c\1\10\1\u0110"+
    "\2\10\1\u0111\1\u0109\1\u0112\1\u0105\1\10\1\u0106\1\u0110"+
    "\1\u0104\1\0\5\10\1\u0111\1\u010f\14\0\1\10\4\0"+
    "\4\10\1\u0112\17\10\1\u0112\5\10\1\0\7\10\14\0"+
    "\1\10\4\0\2\10\1\u010d\1\10\1\u010d\25\10\1\0"+
    "\7\10\14\0\1\10\4\0\3\10\1\u0104\1\u0113\7\10"+
    "\1\u010a\5\10\1\u0111\6\10\1\u0104\1\0\5\10\1\u0111"+
    "\1\u010a\14\0\1\10\4\0\3\10\1\u0104\1\u0114\7\10"+
    "\1\u010a\14\10\1\u0104\1\0\6\10\1\u010a\14\0\1\10"+
    "\4\0\4\10\1\u0112\3\10\1\u0106\6\10\1\u0108\4\10"+
    "\1\u0112\2\10\1\u0106\1\u0108\1\10\1\0\7\10\14\0"+
    "\1\10\4\0\4\10\1\u010c\10\10\1\u010c\14\10\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\1\u0115\10\10\1\u010c"+
    "\4\10\1\u0111\7\10\1\0\5\10\1\u0111\1\10\14\0"+
    "\1\10\4\0\4\10\1\u0111\15\10\1\u0111\7\10\1\0"+
    "\5\10\1\u0111\1\10\14\0\1\10\4\0\4\10\1\u0116"+
    "\12\10\1\u0107\3\10\1\u0109\4\10\1\u0107\1\10\1\0"+
    "\7\10\14\0\1\10\4\0\4\10\1\u0117\12\10\1\u0107"+
    "\4\10\1\u0112\3\10\1\u0107\1\10\1\0\7\10\14\0"+
    "\1\10\4\0\2\10\1\u010d\1\10\1\u0118\7\10\1\u010b"+
    "\15\10\1\0\6\10\1\u010b\14\0\1\10\4\0\4\10"+
    "\1\u0119\7\10\1\u010b\2\10\1\u0108\2\10\1\u0111\5\10"+
    "\1\u0108\1\10\1\0\5\10\1\u0111\1\u010b\14\0\1\10"+
    "\4\0\2\10\1\u010d\1\10\1\u011a\10\10\1\u010c\14\10"+
    "\1\0\7\10\14\0\1\10\4\0\3\10\2\u0104\24\10"+
    "\1\u011b\1\0\7\10\14\0\1\10\4\0\4\10\1\u011c"+
    "\2\10\1\u011c\22\10\1\0\7\10\14\0\1\10\4\0"+
    "\2\10\1\u011d\1\10\1\u011d\25\10\1\0\7\10\14\0"+
    "\1\10\4\0\4\10\1\u011e\12\10\1\u011e\10\10\1\u011e"+
    "\1\10\1\0\7\10\14\0\1\10\4\0\4\10\1\u011f"+
    "\1\10\1\u011f\23\10\1\0\7\10\14\0\1\10\4\0"+
    "\2\10\1\u011d\1\10\1\u0120\1\10\1\u011f\1\u011c\7\10"+
    "\1\u011e\4\10\1\u0121\3\10\1\u011e\1\10\1\0\7\10"+
    "\14\0\1\10\4\0\2\10\1\u011d\1\10\1\u0122\12\10"+
    "\1\u011e\10\10\1\u011e\1\10\1\0\7\10\14\0\1\10"+
    "\4\0\4\10\1\u0121\17\10\1\u0121\5\10\1\0\7\10"+
    "\14\0\1\10\4\0\2\10\1\u011d\1\10\1\u0123\17\10"+
    "\1\u0121\5\10\1\0\7\10\14\0\1\10\4\0\4\10"+
    "\1\u0124\1\10\1\u011f\10\10\1\u011e\10\10\1\u011e\1\10"+
    "\1\0\7\10\14\0\1\10\4\0\4\10\1\u0121\12\10"+
    "\1\u011e\4\10\1\u0121\3\10\1\u011e\1\10\1\0\7\10"+
    "\14\0\1\10\4\0\32\10\1\u0125\7\10\14\0\1\10"+
    "\4\0\4\10\1\u0126\17\10\1\u0126\5\10\1\0\7\10"+
    "\14\0\1\10\4\0\4\10\1\u0127\17\10\1\u0127\5\10"+
    "\1\0\7\10\14\0\1\10\4\0\4\10\1\u0128\17\10"+
    "\1\u0128\5\10\1\0\7\10\22\0\1\u0129\2\0\1\u0129"+
    "\4\0\1\u0129\44\0\1\10\4\0\4\10\1\u012a\12\10"+
    "\1\u012a\10\10\1\u012a\1\10\1\0\7\10\25\0\1\u012b"+
    "\11\0\1\u012b\7\0\1\u012b\35\0\1\u012c\2\0\1\u012c"+
    "\4\0\1\u012c\55\0\1\u012d\3\0\1\u012d\16\0\1\u012d"+
    "\37\0\1\u012e\12\0\1\u012e\10\0\1\u012e\35\0\2\u012f"+
    "\24\0\1\u012f\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10761];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\1\11\25\1\1\11"+
    "\2\1\7\11\2\1\2\11\1\0\71\1\2\11\277\1"+
    "\1\0\3\1\1\0\1\1\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[303];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    int jline = 0;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 62: 
          { jline = 0; lexeme=yytext(); return tk_writeline;
          }
        case 63: break;
        case 7: 
          { jline = 0; lexeme=yytext(); return tk_Suma;
          }
        case 64: break;
        case 46: 
          { jline = 0; lexeme=yytext(); return tk_while;
          }
        case 65: break;
        case 56: 
          { jline = 0; lexeme=yytext(); return tk_public;
          }
        case 66: break;
        case 19: 
          { jline = 0; lexeme=yytext(); return tk_if;
          }
        case 67: break;
        case 30: 
          { jline = 0; lexeme=yytext(); return tk_for;
          }
        case 68: break;
        case 5: 
          { jline = 0; lexeme=yytext(); return tk_Identificador;
          }
        case 69: break;
        case 54: 
          { jline = 0; lexeme=yytext(); return tk_module;
          }
        case 70: break;
        case 25: 
          { jline = 0; lexeme = yytext(); return tk_menorigual;
          }
        case 71: break;
        case 9: 
          { jline = 0; lexeme=yytext(); return tk_Multiplicacion;
          }
        case 72: break;
        case 2: 
          { jline = 0; lexeme=yytext(); return tk_Numero;
          }
        case 73: break;
        case 43: 
          { jline = 0; lexeme=yytext(); return tk_null;
          }
        case 74: break;
        case 37: 
          { jline = 0; lexeme=yytext(); return tk_like;
          }
        case 75: break;
        case 14: 
          { jline = 0; lexeme = yytext(); return tk_mayorque;
          }
        case 76: break;
        case 8: 
          { jline = 0; lexeme=yytext(); return tk_Resta;
          }
        case 77: break;
        case 1: 
          { jline = 0; return ERROR;
          }
        case 78: break;
        case 17: 
          { jline = 0; lexeme=yytext(); return tk_ParentesisC;
          }
        case 79: break;
        case 45: 
          { jline = 0; lexeme=yytext(); return tk_then;
          }
        case 80: break;
        case 32: 
          { jline = 0; lexeme=yytext(); return tk_end;
          }
        case 81: break;
        case 60: 
          { jline = 0; lexeme=yytext(); return tk_boolean;
          }
        case 82: break;
        case 47: 
          { jline = 0; lexeme=yytext(); return tk_write;
          }
        case 83: break;
        case 44: 
          { jline = 0; lexeme=yytext(); return tk_read;
          }
        case 84: break;
        case 38: 
          { jline = 0; lexeme=yytext(); return tk_else;
          }
        case 85: break;
        case 12: 
          { jline = 0; lexeme=yytext(); return tk_ampersant;
          }
        case 86: break;
        case 34: 
          { jline = 0; lexeme=yytext(); return tk_xor;
          }
        case 87: break;
        case 22: 
          { jline = 0; lexeme=yytext(); return tk_or;
          }
        case 88: break;
        case 6: 
          { jline = 0; lexeme=yytext(); return tk_Igual;
          }
        case 89: break;
        case 58: 
          { jline = 0; lexeme=yytext(); return tk_integer;
          }
        case 90: break;
        case 15: 
          { jline = 0; lexeme = yytext(); return tk_menorque;
          }
        case 91: break;
        case 10: 
          { jline = 0; lexeme=yytext(); return tk_Division;
          }
        case 92: break;
        case 28: 
          { jline = 0; lexeme=yytext(); return tk_mod;
          }
        case 93: break;
        case 61: 
          { jline = 0; lexeme=yytext(); return tk_function;
          }
        case 94: break;
        case 59: 
          { jline = 0; lexeme=yytext(); return tk_cs;
          }
        case 95: break;
        case 42: 
          { jline = 0; lexeme=yytext(); return tk_next;
          }
        case 96: break;
        case 41: 
          { jline = 0; lexeme=yytext(); return tk_loop;
          }
        case 97: break;
        case 39: 
          { jline = 0; lexeme=yytext(); return tk_exit;
          }
        case 98: break;
        case 29: 
          { jline = 0; lexeme=yytext(); return tk_dim;
          }
        case 99: break;
        case 48: 
          { jline = 0; lexeme = yytext(); return tk_false;
          }
        case 100: break;
        case 33: 
          { jline = 0; lexeme=yytext(); return tk_and;
          }
        case 101: break;
        case 31: 
          { jline = 0; lexeme=yytext(); return tk_not;
          }
        case 102: break;
        case 21: 
          { jline = 0; lexeme=yytext(); return tk_do;
          }
        case 103: break;
        case 13: 
          { jline = 0; lexeme=yytext(); return tk_punto;
          }
        case 104: break;
        case 20: 
          { jline = 0; lexeme=yytext(); return tk_as;
          }
        case 105: break;
        case 23: 
          { jline = 0; lexeme=yytext(); return tk_to;
          }
        case 106: break;
        case 50: 
          { jline = 0; lexeme=yytext(); return tk_byval;
          }
        case 107: break;
        case 26: 
          { jline = 0; lexeme=yytext(); return tk_valorString;
          }
        case 108: break;
        case 35: 
          { jline = 0; lexeme=yytext(); return tk_step;
          }
        case 109: break;
        case 55: 
          { jline = 0; lexeme=yytext(); return tk_elseif;
          }
        case 110: break;
        case 40: 
          { jline = 0; lexeme = yytext(); return tk_true;
          }
        case 111: break;
        case 36: 
          { jline = 0; lexeme=yytext(); return tk_main;
          }
        case 112: break;
        case 4: 
          { jline++;
        if(jline == 1){
            return tk_Linea;
        }
          }
        case 113: break;
        case 51: 
          { jline = 0; lexeme=yytext(); return tk_sys;
          }
        case 114: break;
        case 11: 
          { jline = 0; lexeme=yytext(); return tk_Coma;
          }
        case 115: break;
        case 18: 
          { jline = 0; lexeme=yytext(); return tk_comentario;
          }
        case 116: break;
        case 57: 
          { jline = 0; lexeme=yytext(); return tk_return;
          }
        case 117: break;
        case 49: 
          { jline = 0; lexeme=yytext(); return tk_until;
          }
        case 118: break;
        case 27: 
          { jline = 0; lexeme=yytext(); return tk_sub;
          }
        case 119: break;
        case 52: 
          { jline = 0; lexeme=yytext(); return tk_String;
          }
        case 120: break;
        case 24: 
          { jline = 0; lexeme = yytext(); return tk_mayorigual;
          }
        case 121: break;
        case 53: 
          { jline = 0; lexeme=yytext(); return tk_structure;
          }
        case 122: break;
        case 16: 
          { jline = 0; lexeme=yytext(); return tk_ParentesisA;
          }
        case 123: break;
        case 3: 
          { 
          }
        case 124: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
