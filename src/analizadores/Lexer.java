/* The following code was generated by JFlex 1.4.3 on 03-21-21 10:42 PM */

package analizadores;
import static analizadores.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 03-21-21 10:42 PM from the specification file
 * <tt>C:/Users/David/Documents/NetBeansProjects/VBCompilador/src/analizadores/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\4\1\0\1\2\23\0\1\2\1\0\1\3\2\0"+
    "\1\51\1\54\1\5\1\60\1\61\1\47\1\45\1\53\1\46\1\55"+
    "\1\50\12\1\2\0\1\57\1\40\1\56\2\0\1\30\1\21\1\23"+
    "\1\26\1\25\1\32\1\33\1\41\1\10\1\6\1\44\1\22\1\11"+
    "\1\31\1\14\1\13\1\6\1\15\1\17\1\16\1\20\1\43\1\27"+
    "\1\42\1\24\1\6\3\0\1\52\1\6\1\0\1\30\1\21\1\23"+
    "\1\26\1\36\1\32\1\33\1\41\1\10\1\6\1\44\1\22\1\37"+
    "\1\31\1\14\1\13\1\6\1\15\1\7\1\35\1\20\1\43\1\27"+
    "\1\42\1\34\1\6\1\0\1\12\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\3\22\5\1\6\1\5\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\0\1\24\4\5\1\25\1\5\1\25\3\5"+
    "\1\26\1\5\1\26\1\27\1\30\11\5\1\30\1\5"+
    "\2\31\16\5\2\27\3\5\1\26\12\5\1\32\1\33"+
    "\1\34\1\5\1\35\1\5\1\35\4\5\2\36\2\37"+
    "\3\5\1\37\1\5\1\40\1\41\1\5\1\35\2\5"+
    "\1\42\4\5\2\40\1\41\3\5\1\35\10\5\1\42"+
    "\1\5\1\42\15\5\1\42\1\5\1\43\1\41\1\40"+
    "\1\44\2\5\2\45\2\5\1\45\1\5\2\46\1\5"+
    "\1\47\2\50\1\46\1\51\3\5\1\52\1\53\1\54"+
    "\1\5\1\55\1\5\1\52\2\5\1\53\4\5\1\52"+
    "\2\5\2\55\1\56\2\5\1\54\1\53\1\5\1\52"+
    "\2\55\1\5\1\54\1\46\1\5\1\56\1\51\16\5"+
    "\1\57\1\60\1\57\1\61\1\5\1\61\2\62\1\5"+
    "\1\63\2\5\1\63\1\61\1\60\2\5\2\57\2\5"+
    "\1\63\1\5\1\62\3\5\1\63\1\5\1\62\1\5"+
    "\1\63\1\61\1\64\2\65\2\5\1\66\1\67\2\5"+
    "\1\70\1\5\1\65\1\5\1\66\1\5\1\71\2\5"+
    "\1\66\2\64\1\71\1\70\1\67\1\71\1\5\1\66"+
    "\1\70\1\71\1\64\1\5\1\72\1\5\1\73\3\5"+
    "\1\72\1\74\1\73\2\74\1\73\1\0\2\5\1\75"+
    "\1\76\2\75\1\0\1\77\1\100\4\0\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\62\0\226\0\62\0\310\0\372"+
    "\0\u012c\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a"+
    "\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a"+
    "\0\u044c\0\u047e\0\u04b0\0\62\0\u04e2\0\62\0\62\0\62"+
    "\0\62\0\62\0\62\0\62\0\62\0\62\0\u0514\0\u0546"+
    "\0\62\0\62\0\u0578\0\310\0\u05aa\0\u05dc\0\u060e\0\u0640"+
    "\0\u0672\0\u0672\0\372\0\u06a4\0\u06d6\0\u0708\0\372\0\u073a"+
    "\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca"+
    "\0\u08fc\0\u092e\0\u0960\0\u0992\0\372\0\u09c4\0\u09f6\0\372"+
    "\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86"+
    "\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0cb2\0\372"+
    "\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0d7a\0\u0dac\0\u0dde\0\u0e10"+
    "\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\62\0\62"+
    "\0\u0578\0\u0f6e\0\u0fa0\0\u0fd2\0\372\0\u1004\0\u1036\0\u1068"+
    "\0\u109a\0\u10cc\0\u10fe\0\372\0\u1130\0\u1130\0\u1162\0\u1194"+
    "\0\u11c6\0\u11f8\0\u0fd2\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2"+
    "\0\u10fe\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec\0\372\0\372"+
    "\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c"+
    "\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u1676\0\372\0\u16a8"+
    "\0\u16da\0\u170c\0\u173e\0\u128e\0\u1770\0\u17a2\0\u17d4\0\u1806"+
    "\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\372\0\u1964"+
    "\0\u1996\0\372\0\u19c8\0\u19fa\0\u1a2c\0\372\0\u1a5e\0\u1a90"+
    "\0\u1a90\0\u1ac2\0\372\0\u1af4\0\u1af4\0\372\0\u1b26\0\u1b58"+
    "\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\372\0\u1cb6"+
    "\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2\0\u1e14\0\u1e14"+
    "\0\u1e46\0\u1e78\0\u1eaa\0\372\0\u1edc\0\u1f0e\0\u1f0e\0\372"+
    "\0\372\0\u1f40\0\u1f72\0\372\0\u1fa4\0\u1bbc\0\u1bbc\0\u1fd6"+
    "\0\u1edc\0\u2008\0\u203a\0\u1f0e\0\u206c\0\u1bee\0\372\0\u203a"+
    "\0\u209e\0\u20d0\0\u1b8a\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca"+
    "\0\u21fc\0\u222e\0\u2260\0\u2292\0\u22c4\0\u22f6\0\u22f6\0\372"+
    "\0\u2328\0\u2328\0\372\0\u2166\0\372\0\u235a\0\u238c\0\u23be"+
    "\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea\0\u251c\0\u254e"+
    "\0\u2580\0\u25b2\0\372\0\u254e\0\u25e4\0\u2616\0\u2648\0\u267a"+
    "\0\u2134\0\u26ac\0\u222e\0\u26de\0\u254e\0\u23f0\0\372\0\372"+
    "\0\u2710\0\u2710\0\u2742\0\372\0\372\0\u2774\0\u27a6\0\372"+
    "\0\u27d8\0\u280a\0\u283c\0\u2742\0\u286e\0\372\0\u28a0\0\u28d2"+
    "\0\u28d2\0\u2904\0\u2774\0\u2710\0\u286e\0\u2742\0\u2742\0\u2936"+
    "\0\u2968\0\u28a0\0\u28d2\0\u299a\0\u29cc\0\372\0\u29fe\0\372"+
    "\0\u2a30\0\u2a62\0\u2a94\0\u2ac6\0\u2a94\0\u29fe\0\372\0\u29fe"+
    "\0\u2a62\0\u2af8\0\u2b2a\0\u2b5c\0\372\0\372\0\u2b2a\0\u2b5c"+
    "\0\u2b8e\0\372\0\372\0\u2bc0\0\u2bf2\0\u2c24\0\u2c56\0\62";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\10\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\2\10\1\20\1\26\1\13\1\34"+
    "\1\10\1\35\2\10\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\63\0\1\3\60\0\4\53\1\0\55\53\4\54\1\0"+
    "\55\54\1\0\1\10\4\0\32\10\1\0\4\10\16\0"+
    "\1\10\4\0\4\10\1\55\3\10\1\56\1\10\1\57"+
    "\3\10\1\60\7\10\1\60\1\56\2\10\1\0\4\10"+
    "\16\0\1\10\4\0\4\10\1\61\16\10\1\62\1\63"+
    "\5\10\1\0\4\10\16\0\1\10\4\0\4\10\1\64"+
    "\1\10\1\65\13\10\1\66\7\10\1\0\4\10\16\0"+
    "\1\10\4\0\1\10\1\67\1\70\1\10\1\71\1\10"+
    "\1\72\1\73\1\56\1\67\1\74\1\10\1\75\1\10"+
    "\1\76\1\77\2\10\1\100\1\101\1\63\1\10\1\76"+
    "\1\56\1\77\1\10\1\0\1\102\1\103\2\10\16\0"+
    "\1\10\4\0\4\10\1\104\5\10\1\104\17\10\1\0"+
    "\4\10\16\0\1\10\4\0\4\10\1\105\2\10\1\105"+
    "\22\10\1\0\4\10\16\0\1\10\4\0\4\10\1\106"+
    "\12\10\1\106\10\10\1\106\1\10\1\0\4\10\16\0"+
    "\1\10\4\0\4\10\1\107\1\10\1\110\1\111\22\10"+
    "\1\0\1\112\3\10\16\0\1\10\4\0\4\10\1\55"+
    "\3\10\1\56\1\10\1\57\3\10\1\60\7\10\1\113"+
    "\1\56\2\10\1\0\4\10\16\0\1\10\4\0\4\10"+
    "\1\114\16\10\1\114\6\10\1\0\4\10\16\0\1\10"+
    "\4\0\4\10\1\115\1\10\1\116\7\10\1\117\7\10"+
    "\1\117\3\10\1\0\4\10\16\0\1\10\4\0\2\10"+
    "\1\120\1\10\1\121\1\10\1\122\23\10\1\0\4\10"+
    "\16\0\1\10\4\0\4\10\1\123\1\10\1\123\23\10"+
    "\1\0\4\10\16\0\1\10\4\0\4\10\1\124\7\10"+
    "\1\75\6\10\1\125\6\10\1\0\1\10\1\103\2\10"+
    "\16\0\1\10\4\0\2\10\1\126\1\10\1\127\1\10"+
    "\1\130\23\10\1\0\4\10\16\0\1\10\4\0\4\10"+
    "\1\131\2\10\1\132\22\10\1\0\1\133\3\10\16\0"+
    "\1\10\4\0\1\10\1\67\2\10\1\134\4\10\1\67"+
    "\11\10\1\135\6\10\1\0\4\10\16\0\1\10\4\0"+
    "\4\10\1\136\1\10\1\137\3\10\1\140\4\10\1\141"+
    "\10\10\1\141\1\10\1\0\4\10\16\0\1\10\4\0"+
    "\4\10\1\142\1\10\1\143\3\10\1\144\7\10\1\145"+
    "\7\10\1\0\4\10\16\0\1\10\4\0\4\10\1\146"+
    "\1\10\1\146\23\10\1\0\4\10\55\0\1\147\61\0"+
    "\1\150\21\0\3\53\1\151\1\0\55\53\1\0\1\10"+
    "\4\0\1\10\1\152\2\10\1\153\2\10\1\154\1\10"+
    "\1\152\1\10\1\155\3\10\1\156\10\10\1\156\1\10"+
    "\1\0\4\10\16\0\1\10\4\0\4\10\1\157\2\10"+
    "\1\154\7\10\1\156\10\10\1\156\1\10\1\0\4\10"+
    "\16\0\1\10\4\0\4\10\1\155\6\10\1\155\16\10"+
    "\1\0\4\10\16\0\1\10\4\0\1\10\1\152\2\10"+
    "\1\152\4\10\1\152\20\10\1\0\4\10\16\0\1\10"+
    "\4\0\4\10\1\160\3\10\1\160\16\10\1\160\2\10"+
    "\1\0\4\10\16\0\1\10\4\0\2\10\1\161\1\10"+
    "\1\162\13\10\1\163\11\10\1\0\4\10\16\0\1\10"+
    "\4\0\4\10\1\163\13\10\1\163\11\10\1\0\4\10"+
    "\16\0\1\10\4\0\2\10\1\161\1\10\1\161\25\10"+
    "\1\0\4\10\16\0\1\10\4\0\3\10\1\164\1\165"+
    "\24\10\1\164\1\0\3\10\1\166\16\0\1\10\4\0"+
    "\1\10\1\167\1\170\1\164\1\171\1\10\1\172\1\173"+
    "\1\174\1\167\1\175\1\176\1\177\2\10\1\200\1\201"+
    "\1\10\1\202\1\203\3\10\1\174\1\200\1\164\1\0"+
    "\1\10\1\204\1\205\1\166\16\0\1\10\4\0\4\10"+
    "\1\206\1\10\1\172\1\207\1\210\7\10\1\163\2\10"+
    "\1\211\3\10\1\210\2\10\1\0\4\10\16\0\1\10"+
    "\4\0\2\10\1\212\1\10\1\213\5\10\1\175\17\10"+
    "\1\0\4\10\16\0\1\10\4\0\4\10\1\214\6\10"+
    "\1\176\1\215\6\10\1\216\6\10\1\0\4\10\16\0"+
    "\1\10\4\0\1\10\1\217\2\10\1\217\4\10\1\217"+
    "\20\10\1\0\4\10\16\0\1\10\4\0\1\10\1\152"+
    "\2\10\1\220\4\10\1\152\20\10\1\0\2\10\1\205"+
    "\1\10\16\0\1\10\4\0\4\10\1\221\3\10\1\222"+
    "\11\10\1\202\4\10\1\222\2\10\1\0\1\10\1\204"+
    "\2\10\16\0\1\10\4\0\2\10\1\161\1\10\1\223"+
    "\7\10\1\224\15\10\1\0\4\10\16\0\1\10\4\0"+
    "\4\10\1\225\3\10\1\226\7\10\1\227\6\10\1\226"+
    "\2\10\1\0\4\10\16\0\1\10\4\0\2\10\1\230"+
    "\1\10\1\231\12\10\1\232\10\10\1\232\1\10\1\0"+
    "\4\10\16\0\1\10\4\0\2\10\1\233\1\10\1\233"+
    "\25\10\1\0\4\10\16\0\1\10\4\0\4\10\1\234"+
    "\6\10\1\234\16\10\1\0\4\10\16\0\1\10\4\0"+
    "\4\10\1\235\3\10\1\222\11\10\1\202\4\10\1\222"+
    "\2\10\1\0\4\10\16\0\1\10\4\0\4\10\1\236"+
    "\5\10\1\175\4\10\1\232\10\10\1\232\1\10\1\0"+
    "\4\10\16\0\1\10\4\0\4\10\1\175\5\10\1\175"+
    "\17\10\1\0\4\10\16\0\1\10\4\0\4\10\1\232"+
    "\12\10\1\232\10\10\1\232\1\10\1\0\4\10\16\0"+
    "\1\10\4\0\1\10\1\237\2\10\1\152\4\10\1\152"+
    "\20\10\1\0\4\10\16\0\1\10\4\0\4\10\1\240"+
    "\3\10\1\240\16\10\1\240\2\10\1\0\4\10\16\0"+
    "\1\10\4\0\4\10\1\241\1\10\1\242\23\10\1\0"+
    "\2\10\1\205\1\10\16\0\1\10\4\0\4\10\1\242"+
    "\1\10\1\242\23\10\1\0\4\10\16\0\1\10\4\0"+
    "\4\10\1\205\25\10\1\0\2\10\1\205\1\10\16\0"+
    "\1\10\4\0\4\10\1\166\25\10\1\0\3\10\1\166"+
    "\16\0\1\10\4\0\4\10\1\243\1\10\1\244\23\10"+
    "\1\0\3\10\1\166\16\0\1\10\4\0\4\10\1\244"+
    "\1\10\1\244\23\10\1\0\4\10\16\0\1\10\4\0"+
    "\4\10\1\211\16\10\1\211\6\10\1\0\4\10\16\0"+
    "\1\10\4\0\1\10\1\217\1\233\1\10\1\245\4\10"+
    "\1\217\6\10\1\227\11\10\1\0\4\10\16\0\1\10"+
    "\4\0\4\10\1\227\13\10\1\227\11\10\1\0\4\10"+
    "\16\0\1\10\4\0\3\10\2\164\24\10\1\164\1\0"+
    "\4\10\16\0\1\10\4\0\2\10\1\246\1\10\1\246"+
    "\25\10\1\0\4\10\16\0\1\10\4\0\2\10\1\212"+
    "\1\10\1\212\25\10\1\0\4\10\16\0\1\10\4\0"+
    "\2\10\1\230\1\10\1\230\25\10\1\0\4\10\16\0"+
    "\1\10\4\0\4\10\1\247\13\10\1\247\11\10\1\0"+
    "\4\10\16\0\1\10\4\0\4\10\1\250\3\10\1\210"+
    "\3\10\1\215\12\10\1\210\2\10\1\0\1\10\1\204"+
    "\2\10\16\0\1\10\4\0\4\10\1\210\3\10\1\210"+
    "\16\10\1\210\2\10\1\0\4\10\16\0\1\10\4\0"+
    "\4\10\1\215\7\10\1\215\15\10\1\0\4\10\16\0"+
    "\1\10\4\0\4\10\1\204\25\10\1\0\1\10\1\204"+
    "\2\10\16\0\1\10\4\0\4\10\1\251\2\10\1\207"+
    "\4\10\1\224\6\10\1\216\6\10\1\0\4\10\16\0"+
    "\1\10\4\0\4\10\1\207\2\10\1\207\22\10\1\0"+
    "\4\10\16\0\1\10\4\0\4\10\1\216\16\10\1\216"+
    "\6\10\1\0\4\10\16\0\1\10\4\0\4\10\1\224"+
    "\7\10\1\224\15\10\1\0\4\10\16\0\1\10\4\0"+
    "\4\10\1\252\2\10\1\252\22\10\1\0\4\10\16\0"+
    "\1\10\4\0\4\10\1\253\3\10\1\253\16\10\1\253"+
    "\2\10\1\0\4\10\16\0\1\10\4\0\2\10\1\254"+
    "\1\10\1\255\1\256\2\10\1\253\1\10\1\257\14\10"+
    "\1\253\2\10\1\0\4\10\16\0\1\10\4\0\2\10"+
    "\1\254\1\10\1\260\5\10\1\257\17\10\1\0\4\10"+
    "\16\0\1\10\4\0\4\10\2\256\24\10\1\0\4\10"+
    "\16\0\1\10\4\0\2\10\1\254\1\10\1\261\1\256"+
    "\4\10\1\257\17\10\1\0\4\10\16\0\1\10\4\0"+
    "\4\10\1\262\12\10\1\262\10\10\1\262\1\10\1\0"+
    "\4\10\16\0\1\10\4\0\4\10\1\263\16\10\1\263"+
    "\6\10\1\0\4\10\16\0\1\10\4\0\4\10\1\264"+
    "\5\10\1\265\10\10\1\263\6\10\1\0\4\10\16\0"+
    "\1\10\4\0\4\10\1\265\5\10\1\265\17\10\1\0"+
    "\4\10\16\0\1\10\4\0\4\10\1\266\12\10\1\266"+
    "\10\10\1\266\1\10\1\0\4\10\16\0\1\10\4\0"+
    "\4\10\1\267\3\10\1\253\6\10\1\270\7\10\1\253"+
    "\1\270\1\10\1\0\4\10\16\0\1\10\4\0\4\10"+
    "\1\271\3\10\1\272\3\10\1\273\6\10\1\263\3\10"+
    "\1\272\2\10\1\0\4\10\16\0\1\10\4\0\1\10"+
    "\1\274\1\275\1\10\1\276\1\277\2\10\1\300\1\274"+
    "\1\301\1\10\1\302\1\303\1\10\1\304\1\305\1\10"+
    "\1\306\1\263\3\10\1\300\1\304\1\10\1\0\4\10"+
    "\16\0\1\10\4\0\4\10\1\307\1\277\6\10\1\310"+
    "\15\10\1\0\4\10\16\0\1\10\4\0\2\10\1\311"+
    "\1\10\1\312\5\10\1\313\4\10\1\262\10\10\1\262"+
    "\1\10\1\0\4\10\16\0\1\10\4\0\4\10\1\314"+
    "\12\10\1\314\10\10\1\314\1\10\1\0\4\10\16\0"+
    "\1\10\4\0\4\10\1\315\7\10\1\315\15\10\1\0"+
    "\4\10\16\0\1\10\4\0\1\10\1\316\2\10\1\317"+
    "\4\10\1\316\2\10\1\320\15\10\1\0\4\10\16\0"+
    "\1\10\4\0\4\10\1\321\1\256\15\10\1\321\6\10"+
    "\1\0\4\10\16\0\1\10\4\0\4\10\1\305\13\10"+
    "\1\305\11\10\1\0\4\10\16\0\1\10\4\0\1\10"+
    "\1\322\2\10\1\323\4\10\1\322\3\10\1\303\14\10"+
    "\1\0\4\10\16\0\1\10\4\0\4\10\1\324\3\10"+
    "\1\324\16\10\1\324\2\10\1\0\4\10\16\0\1\10"+
    "\4\0\4\10\1\306\15\10\1\306\7\10\1\0\4\10"+
    "\16\0\1\10\4\0\1\10\1\322\2\10\1\325\1\277"+
    "\3\10\1\322\1\265\1\10\1\310\15\10\1\0\4\10"+
    "\16\0\1\10\4\0\1\10\1\322\2\10\1\322\4\10"+
    "\1\322\20\10\1\0\4\10\16\0\1\10\4\0\4\10"+
    "\1\326\3\10\1\326\16\10\1\326\2\10\1\0\4\10"+
    "\16\0\1\10\4\0\4\10\1\327\3\10\1\326\6\10"+
    "\1\314\7\10\1\326\1\314\1\10\1\0\4\10\16\0"+
    "\1\10\4\0\4\10\1\330\7\10\1\331\1\303\14\10"+
    "\1\0\4\10\16\0\1\10\4\0\4\10\1\320\7\10"+
    "\1\320\15\10\1\0\4\10\16\0\1\10\4\0\4\10"+
    "\1\303\10\10\1\303\14\10\1\0\4\10\16\0\1\10"+
    "\4\0\4\10\1\270\12\10\1\270\10\10\1\270\1\10"+
    "\1\0\4\10\16\0\1\10\4\0\4\10\1\332\3\10"+
    "\1\253\11\10\1\306\4\10\1\253\2\10\1\0\4\10"+
    "\16\0\1\10\4\0\4\10\1\333\3\10\1\324\1\10"+
    "\1\313\5\10\1\305\6\10\1\324\2\10\1\0\4\10"+
    "\16\0\1\10\4\0\4\10\1\313\5\10\1\313\17\10"+
    "\1\0\4\10\16\0\1\10\4\0\1\10\1\316\2\10"+
    "\1\334\4\10\1\316\11\10\1\263\6\10\1\0\4\10"+
    "\16\0\1\10\4\0\1\10\1\316\2\10\1\316\4\10"+
    "\1\316\20\10\1\0\4\10\16\0\1\10\4\0\2\10"+
    "\1\311\1\10\1\335\12\10\1\262\10\10\1\262\1\10"+
    "\1\0\4\10\16\0\1\10\4\0\4\10\1\273\7\10"+
    "\1\273\15\10\1\0\4\10\16\0\1\10\4\0\4\10"+
    "\1\336\7\10\1\273\6\10\1\321\6\10\1\0\4\10"+
    "\16\0\1\10\4\0\4\10\1\321\16\10\1\321\6\10"+
    "\1\0\4\10\16\0\1\10\4\0\4\10\1\337\3\10"+
    "\1\337\16\10\1\337\2\10\1\0\4\10\16\0\1\10"+
    "\4\0\4\10\1\340\5\10\1\313\5\10\1\305\11\10"+
    "\1\0\4\10\16\0\1\10\4\0\4\10\1\314\12\10"+
    "\1\314\3\10\1\321\4\10\1\314\1\10\1\0\4\10"+
    "\16\0\1\10\4\0\4\10\1\253\3\10\1\253\16\10"+
    "\1\341\2\10\1\0\4\10\16\0\1\10\4\0\2\10"+
    "\1\311\1\10\1\311\25\10\1\0\4\10\16\0\1\10"+
    "\4\0\4\10\1\342\7\10\1\310\5\10\1\306\7\10"+
    "\1\0\4\10\16\0\1\10\4\0\4\10\1\310\7\10"+
    "\1\310\15\10\1\0\4\10\16\0\1\10\4\0\4\10"+
    "\2\277\11\10\1\266\10\10\1\266\1\10\1\0\4\10"+
    "\16\0\1\10\4\0\4\10\2\277\24\10\1\0\4\10"+
    "\16\0\1\10\4\0\4\10\1\270\3\10\1\337\6\10"+
    "\1\270\7\10\1\337\1\270\1\10\1\0\4\10\16\0"+
    "\1\10\4\0\4\10\1\343\3\10\1\326\3\10\1\273"+
    "\12\10\1\326\2\10\1\0\4\10\16\0\1\10\4\0"+
    "\4\10\1\324\3\10\1\324\3\10\1\320\12\10\1\324"+
    "\2\10\1\0\4\10\16\0\1\10\4\0\1\10\1\316"+
    "\2\10\1\344\4\10\1\316\3\10\1\303\14\10\1\0"+
    "\4\10\16\0\1\10\4\0\4\10\1\345\12\10\1\345"+
    "\10\10\1\345\1\10\1\0\4\10\16\0\1\10\4\0"+
    "\4\10\1\346\16\10\1\346\6\10\1\0\4\10\16\0"+
    "\1\10\4\0\4\10\1\347\10\10\1\350\1\10\1\345"+
    "\3\10\1\346\4\10\1\345\1\10\1\0\4\10\16\0"+
    "\1\10\4\0\4\10\1\350\10\10\1\350\14\10\1\0"+
    "\4\10\16\0\1\10\4\0\4\10\1\351\10\10\1\350"+
    "\5\10\1\346\6\10\1\0\4\10\16\0\1\10\4\0"+
    "\4\10\1\352\20\10\1\352\4\10\1\0\4\10\16\0"+
    "\1\10\4\0\4\10\1\353\7\10\1\353\15\10\1\0"+
    "\4\10\16\0\1\10\4\0\2\10\1\354\1\10\1\355"+
    "\12\10\1\345\10\10\1\345\1\10\1\0\4\10\16\0"+
    "\1\10\4\0\2\10\1\354\1\10\1\354\25\10\1\0"+
    "\4\10\16\0\1\10\4\0\4\10\1\356\12\10\1\356"+
    "\10\10\1\356\1\10\1\0\4\10\16\0\1\10\4\0"+
    "\4\10\1\357\12\10\1\357\10\10\1\357\1\10\1\0"+
    "\4\10\16\0\1\10\4\0\4\10\1\360\12\10\1\360"+
    "\10\10\1\360\1\10\1\0\4\10\16\0\1\10\4\0"+
    "\4\10\1\361\1\10\1\362\10\10\1\363\10\10\1\363"+
    "\1\10\1\0\4\10\16\0\1\10\4\0\4\10\1\364"+
    "\7\10\1\365\6\10\1\346\6\10\1\0\4\10\16\0"+
    "\1\10\4\0\2\10\1\366\1\10\1\367\1\10\1\362"+
    "\1\370\1\371\3\10\1\372\1\350\1\10\1\373\3\10"+
    "\1\346\1\10\1\352\1\10\1\371\1\373\1\10\1\0"+
    "\4\10\16\0\1\10\4\0\4\10\1\374\12\10\1\374"+
    "\10\10\1\374\1\10\1\0\4\10\16\0\1\10\4\0"+
    "\4\10\1\375\2\10\1\370\4\10\1\353\1\350\14\10"+
    "\1\0\4\10\16\0\1\10\4\0\2\10\1\376\1\10"+
    "\1\377\12\10\1\u0100\10\10\1\u0100\1\10\1\0\4\10"+
    "\16\0\1\10\4\0\4\10\1\371\3\10\1\371\16\10"+
    "\1\371\2\10\1\0\4\10\16\0\1\10\4\0\2\10"+
    "\1\354\1\10\1\u0101\20\10\1\352\4\10\1\0\4\10"+
    "\16\0\1\10\4\0\4\10\1\u0102\7\10\1\u0102\15\10"+
    "\1\0\4\10\16\0\1\10\4\0\4\10\1\u0103\7\10"+
    "\1\u0103\15\10\1\0\4\10\16\0\1\10\4\0\4\10"+
    "\1\u0104\12\10\1\u0104\10\10\1\u0104\1\10\1\0\4\10"+
    "\16\0\1\10\4\0\4\10\1\365\7\10\1\365\15\10"+
    "\1\0\4\10\16\0\1\10\4\0\4\10\1\u0105\2\10"+
    "\1\370\4\10\1\365\10\10\1\352\4\10\1\0\4\10"+
    "\16\0\1\10\4\0\4\10\1\370\2\10\1\370\22\10"+
    "\1\0\4\10\16\0\1\10\4\0\2\10\1\376\1\10"+
    "\1\376\25\10\1\0\4\10\16\0\1\10\4\0\4\10"+
    "\1\363\12\10\1\363\10\10\1\363\1\10\1\0\4\10"+
    "\16\0\1\10\4\0\4\10\1\362\1\10\1\362\23\10"+
    "\1\0\4\10\16\0\1\10\4\0\4\10\1\u0106\1\10"+
    "\1\362\1\10\1\371\16\10\1\371\2\10\1\0\4\10"+
    "\16\0\1\10\4\0\4\10\1\u0107\1\10\1\362\5\10"+
    "\1\353\2\10\1\u0104\10\10\1\u0104\1\10\1\0\4\10"+
    "\16\0\1\10\4\0\2\10\1\376\1\10\1\u0108\3\10"+
    "\1\371\16\10\1\371\2\10\1\0\4\10\16\0\1\10"+
    "\4\0\4\10\1\u0109\7\10\1\u0103\2\10\1\345\10\10"+
    "\1\345\1\10\1\0\4\10\16\0\1\10\4\0\4\10"+
    "\1\u010a\2\10\1\370\4\10\1\u0102\15\10\1\0\4\10"+
    "\16\0\1\10\4\0\4\10\1\u010b\7\10\1\365\10\10"+
    "\1\352\4\10\1\0\4\10\16\0\1\10\4\0\4\10"+
    "\1\345\12\10\1\345\10\10\1\u010c\1\10\1\0\4\10"+
    "\16\0\1\10\4\0\4\10\1\u010d\7\10\1\u0103\2\10"+
    "\1\u0104\10\10\1\u0104\1\10\1\0\4\10\16\0\1\10"+
    "\4\0\4\10\1\u010e\3\10\1\371\6\10\1\363\7\10"+
    "\1\371\1\363\1\10\1\0\4\10\16\0\1\10\4\0"+
    "\3\10\2\u010f\24\10\1\u010f\1\0\4\10\16\0\1\10"+
    "\4\0\4\10\1\u0110\20\10\1\u0110\4\10\1\0\4\10"+
    "\16\0\1\10\4\0\3\10\1\u010f\1\u0111\3\10\1\u0112"+
    "\14\10\1\u0110\1\10\1\u0112\1\10\1\u010f\1\0\4\10"+
    "\16\0\1\10\4\0\4\10\1\u0112\3\10\1\u0112\16\10"+
    "\1\u0112\2\10\1\0\4\10\16\0\1\10\4\0\4\10"+
    "\1\u0111\3\10\1\u0112\14\10\1\u0110\1\10\1\u0112\2\10"+
    "\1\0\4\10\16\0\1\10\4\0\4\10\1\u0113\12\10"+
    "\1\u0113\10\10\1\u0113\1\10\1\0\4\10\16\0\1\10"+
    "\4\0\4\10\1\u0114\12\10\1\u0114\10\10\1\u0114\1\10"+
    "\1\0\4\10\16\0\1\10\4\0\4\10\1\u0115\17\10"+
    "\1\u0115\5\10\1\0\4\10\16\0\1\10\4\0\3\10"+
    "\1\u010f\1\u0115\17\10\1\u0115\4\10\1\u010f\1\0\4\10"+
    "\16\0\1\10\4\0\4\10\1\u0116\7\10\1\u0116\15\10"+
    "\1\0\4\10\16\0\1\10\4\0\4\10\1\u0117\7\10"+
    "\1\u0117\15\10\1\0\4\10\16\0\1\10\4\0\4\10"+
    "\1\u0115\10\10\1\u0118\6\10\1\u0115\5\10\1\0\4\10"+
    "\16\0\1\10\4\0\2\10\1\u0119\1\u010f\1\u011a\3\10"+
    "\1\u0112\3\10\1\u011b\1\u0118\1\10\1\u011c\2\10\1\u011d"+
    "\1\u011e\1\u0115\1\u0110\1\10\1\u0112\1\u011c\1\u010f\1\0"+
    "\4\10\16\0\1\10\4\0\4\10\1\u011e\16\10\1\u011e"+
    "\6\10\1\0\4\10\16\0\1\10\4\0\2\10\1\u011f"+
    "\1\10\1\u011f\25\10\1\0\4\10\16\0\1\10\4\0"+
    "\2\10\1\u0120\1\10\1\u0121\12\10\1\u0114\10\10\1\u0114"+
    "\1\10\1\0\4\10\16\0\1\10\4\0\3\10\1\u010f"+
    "\1\u0122\7\10\1\u0116\5\10\1\u011d\6\10\1\u010f\1\0"+
    "\4\10\16\0\1\10\4\0\3\10\1\u010f\1\u0123\7\10"+
    "\1\u0116\14\10\1\u010f\1\0\4\10\16\0\1\10\4\0"+
    "\4\10\1\u0124\3\10\1\u0112\6\10\1\u0114\3\10\1\u011e"+
    "\3\10\1\u0112\1\u0114\1\10\1\0\4\10\16\0\1\10"+
    "\4\0\4\10\1\u0118\10\10\1\u0118\14\10\1\0\4\10"+
    "\16\0\1\10\4\0\4\10\1\u0125\10\10\1\u0118\4\10"+
    "\1\u011d\7\10\1\0\4\10\16\0\1\10\4\0\4\10"+
    "\1\u011d\15\10\1\u011d\7\10\1\0\4\10\16\0\1\10"+
    "\4\0\4\10\1\u0126\12\10\1\u0113\4\10\1\u0115\3\10"+
    "\1\u0113\1\10\1\0\4\10\16\0\1\10\4\0\2\10"+
    "\1\u0120\1\10\1\u0120\25\10\1\0\4\10\16\0\1\10"+
    "\4\0\4\10\1\u0127\12\10\1\u0113\3\10\1\u011e\4\10"+
    "\1\u0113\1\10\1\0\4\10\16\0\1\10\4\0\2\10"+
    "\1\u011f\1\10\1\u0128\7\10\1\u0117\15\10\1\0\4\10"+
    "\16\0\1\10\4\0\4\10\1\u0129\7\10\1\u0117\2\10"+
    "\1\u0114\2\10\1\u011d\5\10\1\u0114\1\10\1\0\4\10"+
    "\16\0\1\10\4\0\2\10\1\u011f\1\10\1\u012a\10\10"+
    "\1\u0118\14\10\1\0\4\10\16\0\1\10\4\0\2\10"+
    "\1\u0120\1\10\1\u012b\16\10\1\u011e\6\10\1\0\4\10"+
    "\16\0\1\10\4\0\3\10\2\u010f\24\10\1\u012c\1\0"+
    "\4\10\16\0\1\10\4\0\4\10\1\u012d\5\10\1\u012d"+
    "\17\10\1\0\4\10\16\0\1\10\4\0\4\10\1\u012e"+
    "\2\10\1\u012e\22\10\1\0\4\10\16\0\1\10\4\0"+
    "\2\10\1\u012f\1\10\1\u012f\25\10\1\0\4\10\16\0"+
    "\1\10\4\0\4\10\1\u0130\12\10\1\u0130\10\10\1\u0130"+
    "\1\10\1\0\4\10\16\0\1\10\4\0\4\10\1\u0131"+
    "\1\10\1\u0132\14\10\1\u0133\6\10\1\0\4\10\16\0"+
    "\1\10\4\0\2\10\1\u012f\1\10\1\u0134\1\10\1\u0132"+
    "\1\u012e\2\10\1\u012d\4\10\1\u0130\3\10\1\u0135\4\10"+
    "\1\u0130\1\10\1\0\4\10\16\0\1\10\4\0\2\10"+
    "\1\u012f\1\10\1\u0136\12\10\1\u0130\10\10\1\u0130\1\10"+
    "\1\0\4\10\16\0\1\10\4\0\4\10\1\u0137\16\10"+
    "\1\u0137\6\10\1\0\4\10\16\0\1\10\4\0\4\10"+
    "\1\u0132\1\10\1\u0132\23\10\1\0\4\10\16\0\1\10"+
    "\4\0\4\10\1\u0133\16\10\1\u0133\6\10\1\0\4\10"+
    "\16\0\1\10\4\0\2\10\1\u012f\1\10\1\u0138\16\10"+
    "\1\u0137\6\10\1\0\4\10\16\0\1\10\4\0\4\10"+
    "\1\u0139\1\10\1\u0132\10\10\1\u0130\10\10\1\u0130\1\10"+
    "\1\0\4\10\16\0\1\10\4\0\4\10\1\u0137\12\10"+
    "\1\u0130\3\10\1\u0137\4\10\1\u0130\1\10\1\0\4\10"+
    "\16\0\1\10\4\0\32\10\1\u013a\4\10\16\0\1\10"+
    "\4\0\4\10\1\u013b\2\10\1\u013b\22\10\1\0\4\10"+
    "\16\0\1\10\4\0\4\10\1\u013c\16\10\1\u013c\6\10"+
    "\1\0\4\10\16\0\1\10\4\0\4\10\1\u013d\12\10"+
    "\1\u013e\3\10\1\u013d\4\10\1\u013e\1\10\1\0\4\10"+
    "\16\0\1\10\4\0\4\10\1\u013d\16\10\1\u013d\6\10"+
    "\1\0\4\10\16\0\1\10\4\0\4\10\1\u013e\12\10"+
    "\1\u013e\10\10\1\u013e\1\10\1\0\4\10\16\0\1\10"+
    "\4\0\4\10\1\u013f\2\10\1\u013b\7\10\1\u013e\3\10"+
    "\1\u0140\4\10\1\u013e\1\10\1\0\4\10\24\0\1\u0141"+
    "\2\0\1\u0141\4\0\1\u0141\43\0\1\10\4\0\4\10"+
    "\1\u0142\12\10\1\u0142\10\10\1\u0142\1\10\1\0\4\10"+
    "\16\0\1\10\4\0\4\10\1\u0143\12\10\1\u0143\10\10"+
    "\1\u0143\1\10\1\0\4\10\27\0\1\u0144\11\0\1\u0144"+
    "\7\0\1\u0144\34\0\1\u0145\2\0\1\u0145\4\0\1\u0145"+
    "\54\0\1\u0146\3\0\1\u0146\16\0\1\u0146\36\0\1\u0147"+
    "\12\0\1\u0147\10\0\1\u0147\34\0\2\u0148\24\0\1\u0148"+
    "\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\1\11\25\1\1\11"+
    "\1\1\11\11\2\1\2\11\1\0\73\1\2\11\321\1"+
    "\1\0\6\1\1\0\2\1\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    int jline = 0;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 64: 
          { jline = 0; lexeme=yytext(); return tk_writeline;
          }
        case 65: break;
        case 7: 
          { jline = 0; lexeme=yytext(); return tk_Suma;
          }
        case 66: break;
        case 47: 
          { jline = 0; lexeme=yytext(); return tk_while;
          }
        case 67: break;
        case 56: 
          { jline = 0; lexeme=yytext(); return tk_public;
          }
        case 68: break;
        case 21: 
          { jline = 0; lexeme=yytext(); return tk_if;
          }
        case 69: break;
        case 32: 
          { jline = 0; lexeme=yytext(); return tk_for;
          }
        case 70: break;
        case 5: 
          { jline = 0; lexeme=yytext(); return tk_Identificador;
          }
        case 71: break;
        case 54: 
          { jline = 0; lexeme=yytext(); return tk_module;
          }
        case 72: break;
        case 27: 
          { jline = 0; lexeme = yytext(); return tk_menorigual;
          }
        case 73: break;
        case 9: 
          { jline = 0; lexeme=yytext(); return tk_Multiplicacion;
          }
        case 74: break;
        case 2: 
          { jline = 0; lexeme=yytext(); return tk_Numero;
          }
        case 75: break;
        case 62: 
          { jline = 0; lexeme=yytext(); return tk_readline;
          }
        case 76: break;
        case 45: 
          { jline = 0; lexeme=yytext(); return tk_null;
          }
        case 77: break;
        case 39: 
          { jline = 0; lexeme=yytext(); return tk_like;
          }
        case 78: break;
        case 16: 
          { jline = 0; lexeme = yytext(); return tk_mayorque;
          }
        case 79: break;
        case 8: 
          { jline = 0; lexeme=yytext(); return tk_Resta;
          }
        case 80: break;
        case 1: 
          { jline = 0; return ERROR;
          }
        case 81: break;
        case 19: 
          { jline = 0; lexeme=yytext(); return tk_ParentesisC;
          }
        case 82: break;
        case 46: 
          { jline = 0; lexeme=yytext(); return tk_then;
          }
        case 83: break;
        case 34: 
          { jline = 0; lexeme=yytext(); return tk_end;
          }
        case 84: break;
        case 60: 
          { jline = 0; lexeme=yytext(); return tk_boolean;
          }
        case 85: break;
        case 48: 
          { jline = 0; lexeme=yytext(); return tk_write;
          }
        case 86: break;
        case 40: 
          { jline = 0; lexeme=yytext(); return tk_else;
          }
        case 87: break;
        case 14: 
          { jline = 0; lexeme=yytext(); return tk_ampersant;
          }
        case 88: break;
        case 11: 
          { jline = 0; lexeme=yytext(); return tk_Signomod;
          }
        case 89: break;
        case 36: 
          { jline = 0; lexeme=yytext(); return tk_xor;
          }
        case 90: break;
        case 24: 
          { jline = 0; lexeme=yytext(); return tk_or;
          }
        case 91: break;
        case 6: 
          { jline = 0; lexeme=yytext(); return tk_Igual;
          }
        case 92: break;
        case 58: 
          { jline = 0; lexeme=yytext(); return tk_integer;
          }
        case 93: break;
        case 17: 
          { jline = 0; lexeme = yytext(); return tk_menorque;
          }
        case 94: break;
        case 10: 
          { jline = 0; lexeme=yytext(); return tk_Division;
          }
        case 95: break;
        case 30: 
          { jline = 0; lexeme=yytext(); return tk_mod;
          }
        case 96: break;
        case 61: 
          { jline = 0; lexeme=yytext(); return tk_function;
          }
        case 97: break;
        case 59: 
          { jline = 0; lexeme=yytext(); return tk_cs;
          }
        case 98: break;
        case 44: 
          { jline = 0; lexeme=yytext(); return tk_next;
          }
        case 99: break;
        case 43: 
          { jline = 0; lexeme=yytext(); return tk_loop;
          }
        case 100: break;
        case 41: 
          { jline = 0; lexeme=yytext(); return tk_exit;
          }
        case 101: break;
        case 31: 
          { jline = 0; lexeme=yytext(); return tk_dim;
          }
        case 102: break;
        case 49: 
          { jline = 0; lexeme = yytext(); return tk_false;
          }
        case 103: break;
        case 35: 
          { jline = 0; lexeme=yytext(); return tk_and;
          }
        case 104: break;
        case 33: 
          { jline = 0; lexeme=yytext(); return tk_not;
          }
        case 105: break;
        case 23: 
          { jline = 0; lexeme=yytext(); return tk_do;
          }
        case 106: break;
        case 15: 
          { jline = 0; lexeme=yytext(); return tk_punto;
          }
        case 107: break;
        case 22: 
          { jline = 0; lexeme=yytext(); return tk_as;
          }
        case 108: break;
        case 25: 
          { jline = 0; lexeme=yytext(); return tk_to;
          }
        case 109: break;
        case 51: 
          { jline = 0; lexeme=yytext(); return tk_byval;
          }
        case 110: break;
        case 37: 
          { jline = 0; lexeme=yytext(); return tk_step;
          }
        case 111: break;
        case 28: 
          { jline = 0; lexeme=yytext(); return tk_valorString;
          }
        case 112: break;
        case 12: 
          { jline = 0; lexeme=yytext(); return tk_Potencia;
          }
        case 113: break;
        case 55: 
          { jline = 0; lexeme=yytext(); return tk_elseif;
          }
        case 114: break;
        case 42: 
          { jline = 0; lexeme = yytext(); return tk_true;
          }
        case 115: break;
        case 38: 
          { jline = 0; lexeme=yytext(); return tk_main;
          }
        case 116: break;
        case 4: 
          { jline++;
        if(jline == 1){
            return tk_Linea;
        }
          }
        case 117: break;
        case 52: 
          { jline = 0; lexeme=yytext(); return tk_sys;
          }
        case 118: break;
        case 13: 
          { jline = 0; lexeme=yytext(); return tk_Coma;
          }
        case 119: break;
        case 20: 
          { jline = 0; lexeme=yytext(); return tk_comentario;
          }
        case 120: break;
        case 57: 
          { jline = 0; lexeme=yytext(); return tk_return;
          }
        case 121: break;
        case 50: 
          { jline = 0; lexeme=yytext(); return tk_until;
          }
        case 122: break;
        case 29: 
          { jline = 0; lexeme=yytext(); return tk_sub;
          }
        case 123: break;
        case 53: 
          { jline = 0; lexeme=yytext(); return tk_String;
          }
        case 124: break;
        case 26: 
          { jline = 0; lexeme = yytext(); return tk_mayorigual;
          }
        case 125: break;
        case 63: 
          { jline = 0; lexeme=yytext(); return tk_structure;
          }
        case 126: break;
        case 18: 
          { jline = 0; lexeme=yytext(); return tk_ParentesisA;
          }
        case 127: break;
        case 3: 
          { 
          }
        case 128: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
