/* The following code was generated by JFlex 1.4.3 on 02-23-21 03:32 PM */

package analizadores;
import static analizadores.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 02-23-21 03:32 PM from the specification file
 * <tt>C:/Users/David/Documents/NetBeansProjects/VBCompilador/src/analizadores/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\4\1\0\1\2\23\0\1\2\1\0\1\3\4\0"+
    "\1\2\1\66\1\67\1\60\1\56\1\62\1\57\1\63\1\61\12\1"+
    "\2\0\1\65\1\40\1\64\2\0\1\27\1\45\1\22\1\25\1\24"+
    "\1\31\1\33\1\41\1\7\1\5\1\44\1\21\1\10\1\32\1\13"+
    "\1\12\1\5\1\14\1\16\1\15\1\17\1\46\1\26\1\42\1\23"+
    "\1\5\4\0\1\5\1\0\1\47\1\20\1\52\1\25\1\36\1\55"+
    "\1\33\1\41\1\51\1\5\1\44\1\50\1\37\1\32\1\54\1\12"+
    "\1\5\1\53\1\6\1\35\1\30\1\43\1\26\1\42\1\34\1\5"+
    "\1\0\1\11\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\3"+
    "\24\5\1\6\2\5\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\2\15\1\16\1\17\1\0\4\5\2\20\3\5"+
    "\1\21\1\5\1\21\1\22\1\23\12\5\1\23\1\5"+
    "\2\24\16\5\2\22\3\5\1\21\13\5\1\15\1\25"+
    "\6\5\1\26\1\5\2\27\3\5\1\27\1\5\1\30"+
    "\1\31\1\5\1\32\2\5\1\33\3\5\2\30\1\31"+
    "\3\5\1\32\6\5\1\33\1\5\1\33\10\5\2\32"+
    "\5\5\1\33\2\5\1\34\1\32\1\30\1\31\1\35"+
    "\13\5\1\36\2\37\2\40\4\5\1\41\1\42\1\43"+
    "\1\5\1\44\1\5\1\41\1\45\1\46\1\42\4\5"+
    "\1\41\1\5\2\44\2\5\1\43\1\42\2\5\1\41"+
    "\2\44\1\43\1\5\1\46\1\40\1\5\1\45\20\5"+
    "\2\47\1\5\1\50\1\47\1\41\1\5\2\51\1\5"+
    "\1\41\2\5\1\51\1\41\1\50\3\5\2\47\2\5"+
    "\1\51\2\5\1\50\1\5\1\51\2\5\1\41\1\52"+
    "\1\53\1\54\1\55\3\5\1\56\1\5\1\57\4\5"+
    "\1\60\1\5\1\54\1\55\1\5\1\56\1\5\2\61"+
    "\2\53\1\60\1\57\1\61\1\5\1\56\2\60\1\53"+
    "\1\62\2\5\2\63\1\64\1\5\1\52\1\64\1\52"+
    "\1\64\1\0\2\5\2\65\1\0\1\5\1\66\2\0"+
    "\1\5\2\0\1\5\2\0\1\5\2\0\1\5\1\54"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\2\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[349];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\70\0\250\0\70\0\340\0\u0118"+
    "\0\u0150\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8"+
    "\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498"+
    "\0\u04d0\0\u0508\0\u0540\0\u0578\0\70\0\u05b0\0\u05e8\0\70"+
    "\0\70\0\70\0\70\0\70\0\70\0\u0620\0\u0658\0\70"+
    "\0\70\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8\0\340"+
    "\0\u07e0\0\u0818\0\u0850\0\340\0\u0888\0\u08c0\0\u08f8\0\u0930"+
    "\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0"+
    "\0\u0b28\0\u0b60\0\340\0\u0b98\0\u0bd0\0\340\0\u0c08\0\u0c40"+
    "\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00"+
    "\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0ee0\0\340\0\u0f18\0\u0f50"+
    "\0\u0f88\0\u0fc0\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8"+
    "\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0\0\70\0\u0690\0\u1228"+
    "\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\340"+
    "\0\u13e8\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8\0\u1298\0\u1500"+
    "\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1378\0\u1618\0\u1650\0\u1688"+
    "\0\u16c0\0\340\0\340\0\u16f8\0\u1730\0\u1768\0\u17a0\0\u17d8"+
    "\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u1928\0\u1928\0\340"+
    "\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1570\0\u1a78\0\u1ab0"+
    "\0\u1260\0\340\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00"+
    "\0\u1c38\0\u1c70\0\340\0\u1b20\0\u1ca8\0\u1ce0\0\340\0\u1d18"+
    "\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8"+
    "\0\u1f10\0\u1f48\0\340\0\u1f80\0\u1fb8\0\u1ff0\0\u2028\0\u2060"+
    "\0\u2098\0\u20d0\0\u2108\0\u2140\0\340\0\u2178\0\u21b0\0\u21e8"+
    "\0\u2220\0\u2258\0\340\0\340\0\u2290\0\u2290\0\u22c8\0\u2300"+
    "\0\u2338\0\340\0\u2370\0\u1538\0\340\0\u23a8\0\u23e0\0\340"+
    "\0\u2418\0\u2450\0\u2028\0\u2450\0\u2488\0\u2370\0\u2338\0\u24c0"+
    "\0\u2060\0\340\0\u24f8\0\u2338\0\u2530\0\u2568\0\u25a0\0\u25d8"+
    "\0\u2610\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u2760\0\u2798"+
    "\0\u27d0\0\u2808\0\u2840\0\u2878\0\u28b0\0\u28e8\0\u2920\0\u28e8"+
    "\0\340\0\u2958\0\u2958\0\u2648\0\340\0\u2990\0\u29c8\0\u2a00"+
    "\0\u2a38\0\u27d0\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50\0\u2b88"+
    "\0\u2bc0\0\u2bf8\0\u2bc0\0\u2c30\0\u2c68\0\u2ca0\0\u28b0\0\u2cd8"+
    "\0\u2798\0\u2d10\0\u2d48\0\u2a38\0\340\0\340\0\340\0\340"+
    "\0\u2d80\0\u2db8\0\u2df0\0\340\0\u2e28\0\340\0\u2e60\0\u2e98"+
    "\0\u2ed0\0\u2f08\0\340\0\u2f40\0\u2f78\0\u2fb0\0\u2fe8\0\u2df0"+
    "\0\u3020\0\340\0\u2d80\0\u3058\0\u2ed0\0\u3020\0\u2df0\0\u2df0"+
    "\0\u3090\0\u30c8\0\u2f40\0\u2e98\0\u3100\0\340\0\u3138\0\u3170"+
    "\0\u3170\0\340\0\340\0\u31a8\0\u31e0\0\u3170\0\u3170\0\u31a8"+
    "\0\u3218\0\u3250\0\u3288\0\340\0\u3288\0\u32c0\0\u32f8\0\340"+
    "\0\u3330\0\u3368\0\u33a0\0\u33d8\0\u3410\0\u3448\0\u3480\0\u34b8"+
    "\0\u34f0\0\u3528\0\u3560\0\u3598\0\70\0\u35d0\0\u3608\0\u3640"+
    "\0\u3678\0\u36b0\0\u36e8\0\u3720\0\u3758\0\u3790\0\u37c8\0\u3800"+
    "\0\u3838\0\u3870\0\u38a8\0\70\0\340";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[349];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\7\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\2\7\1\17\1\25\1\34\1\35"+
    "\1\7\1\36\2\7\1\37\1\7\1\30\1\23\1\11"+
    "\1\24\1\16\1\15\1\32\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\71\0\1\3"+
    "\66\0\4\52\1\0\63\52\1\0\1\7\3\0\33\7"+
    "\1\0\15\7\13\0\1\7\3\0\4\7\1\53\3\7"+
    "\1\54\5\7\1\55\10\7\1\55\1\54\2\7\1\0"+
    "\15\7\13\0\1\7\3\0\3\7\1\56\1\57\17\7"+
    "\1\60\1\61\4\7\1\56\1\0\14\7\1\60\13\0"+
    "\1\7\3\0\4\7\1\62\1\7\1\62\24\7\1\0"+
    "\10\7\1\63\2\7\1\62\1\7\13\0\1\7\3\0"+
    "\1\7\1\64\1\65\1\56\1\66\1\7\1\67\1\70"+
    "\1\54\1\64\1\71\1\7\1\72\1\7\1\55\1\73"+
    "\2\7\1\74\1\71\1\60\1\75\1\7\1\55\1\54"+
    "\1\73\1\56\1\0\1\76\1\77\4\7\1\74\1\72"+
    "\1\65\1\7\1\70\1\67\1\60\13\0\1\7\3\0"+
    "\4\7\1\100\2\7\1\101\2\7\1\102\10\7\1\102"+
    "\7\7\1\0\12\7\1\101\2\7\13\0\1\7\3\0"+
    "\4\7\1\103\2\7\1\103\23\7\1\0\12\7\1\103"+
    "\2\7\13\0\1\7\3\0\4\7\1\104\12\7\1\104"+
    "\11\7\1\104\1\7\1\0\15\7\13\0\1\7\3\0"+
    "\4\7\1\105\1\7\1\106\1\107\23\7\1\0\1\110"+
    "\11\7\1\107\1\106\1\7\13\0\1\7\3\0\4\7"+
    "\1\111\3\7\1\54\1\7\1\112\3\7\1\55\4\7"+
    "\1\112\3\7\1\113\1\54\2\7\1\0\15\7\13\0"+
    "\1\7\3\0\4\7\1\114\20\7\1\114\5\7\1\0"+
    "\15\7\13\0\1\7\3\0\4\7\1\115\1\7\1\115"+
    "\24\7\1\0\13\7\1\115\1\7\13\0\1\7\3\0"+
    "\2\7\1\116\1\7\1\117\1\7\1\120\24\7\1\0"+
    "\10\7\1\116\2\7\1\120\1\7\13\0\1\7\3\0"+
    "\4\7\1\121\1\7\1\121\24\7\1\0\13\7\1\121"+
    "\1\7\13\0\1\7\3\0\4\7\1\122\7\7\1\72"+
    "\10\7\1\123\5\7\1\0\1\7\1\77\5\7\1\72"+
    "\5\7\13\0\1\7\3\0\2\7\1\124\1\7\1\125"+
    "\1\7\1\126\24\7\1\0\10\7\1\124\2\7\1\126"+
    "\1\7\13\0\1\7\3\0\4\7\1\127\2\7\1\130"+
    "\23\7\1\0\1\131\11\7\1\130\2\7\13\0\1\7"+
    "\3\0\1\7\1\64\2\7\1\132\4\7\1\64\13\7"+
    "\1\133\5\7\1\0\15\7\13\0\1\7\3\0\4\7"+
    "\1\134\5\7\1\112\10\7\1\112\1\7\1\114\5\7"+
    "\1\0\15\7\13\0\1\7\3\0\4\7\1\135\1\7"+
    "\1\136\3\7\1\137\7\7\1\74\1\137\7\7\1\0"+
    "\6\7\1\74\4\7\1\136\1\7\13\0\1\7\3\0"+
    "\4\7\1\140\1\7\1\141\3\7\1\142\4\7\1\143"+
    "\3\7\1\142\5\7\1\143\1\7\1\0\13\7\1\141"+
    "\1\7\13\0\1\7\3\0\4\7\1\62\1\7\1\62"+
    "\24\7\1\0\13\7\1\62\1\7\13\0\1\7\3\0"+
    "\4\7\1\144\1\7\1\144\24\7\1\0\13\7\1\144"+
    "\1\7\13\0\1\7\3\0\4\7\1\115\1\7\1\115"+
    "\20\7\1\145\3\7\1\0\13\7\1\115\1\7\52\0"+
    "\1\146\67\0\1\146\23\0\1\146\3\0\3\52\1\147"+
    "\1\0\63\52\1\0\1\7\3\0\1\7\1\150\2\7"+
    "\1\151\2\7\1\152\1\7\1\150\21\7\1\0\12\7"+
    "\1\152\2\7\13\0\1\7\3\0\4\7\1\152\2\7"+
    "\1\152\23\7\1\0\12\7\1\152\2\7\13\0\1\7"+
    "\3\0\1\7\1\150\2\7\1\150\4\7\1\150\21\7"+
    "\1\0\15\7\13\0\1\7\3\0\4\7\2\153\25\7"+
    "\1\0\15\7\13\0\1\7\3\0\4\7\1\154\1\153"+
    "\2\7\1\155\17\7\1\155\2\7\1\0\15\7\13\0"+
    "\1\7\3\0\4\7\1\155\3\7\1\155\17\7\1\155"+
    "\2\7\1\0\15\7\13\0\1\7\3\0\4\7\1\156"+
    "\13\7\1\156\12\7\1\0\15\7\13\0\1\7\3\0"+
    "\33\7\1\0\11\7\1\157\3\7\13\0\1\7\3\0"+
    "\3\7\1\160\1\161\25\7\1\160\1\0\3\7\1\162"+
    "\11\7\13\0\1\7\3\0\1\7\1\163\1\164\1\160"+
    "\1\165\1\153\1\166\1\167\1\170\1\163\1\171\1\172"+
    "\1\173\2\7\1\174\1\175\1\7\1\176\1\171\1\7"+
    "\1\177\2\7\1\170\1\174\1\160\1\0\1\7\1\200"+
    "\1\7\1\162\1\172\1\7\1\176\1\173\1\164\1\7"+
    "\1\167\1\166\1\7\13\0\1\7\3\0\4\7\1\201"+
    "\1\7\1\166\1\202\1\203\7\7\1\156\4\7\1\204"+
    "\2\7\1\203\2\7\1\0\12\7\1\202\1\166\1\7"+
    "\13\0\1\7\3\0\2\7\1\205\1\7\1\206\5\7"+
    "\1\171\10\7\1\171\7\7\1\0\10\7\1\205\4\7"+
    "\13\0\1\7\3\0\4\7\1\207\6\7\1\172\1\210"+
    "\10\7\1\211\5\7\1\0\4\7\1\172\2\7\1\210"+
    "\5\7\13\0\1\7\3\0\1\7\1\212\2\7\1\212"+
    "\4\7\1\212\21\7\1\0\15\7\13\0\1\7\3\0"+
    "\4\7\1\213\3\7\1\214\11\7\1\176\5\7\1\214"+
    "\2\7\1\0\1\7\1\200\4\7\1\176\6\7\13\0"+
    "\1\7\3\0\4\7\1\215\7\7\1\215\16\7\1\0"+
    "\7\7\1\215\5\7\13\0\1\7\3\0\4\7\1\216"+
    "\3\7\1\217\7\7\1\220\7\7\1\217\2\7\1\0"+
    "\15\7\13\0\1\7\3\0\2\7\1\221\1\7\1\222"+
    "\12\7\1\174\11\7\1\174\1\7\1\0\10\7\1\221"+
    "\4\7\13\0\1\7\3\0\2\7\1\223\1\7\1\223"+
    "\26\7\1\0\10\7\1\223\4\7\13\0\1\7\3\0"+
    "\2\7\1\224\1\7\1\225\6\7\1\226\17\7\1\0"+
    "\4\7\1\226\3\7\1\224\4\7\13\0\1\7\3\0"+
    "\2\7\1\224\1\7\1\224\26\7\1\0\10\7\1\224"+
    "\4\7\13\0\1\7\3\0\4\7\1\226\6\7\1\226"+
    "\17\7\1\0\4\7\1\226\10\7\13\0\1\7\3\0"+
    "\4\7\1\227\3\7\1\214\11\7\1\176\5\7\1\214"+
    "\2\7\1\0\6\7\1\176\6\7\13\0\1\7\3\0"+
    "\4\7\1\230\5\7\1\171\4\7\1\174\3\7\1\171"+
    "\5\7\1\174\1\7\1\0\15\7\13\0\1\7\3\0"+
    "\4\7\1\171\5\7\1\171\10\7\1\171\7\7\1\0"+
    "\15\7\13\0\1\7\3\0\4\7\1\174\12\7\1\174"+
    "\11\7\1\174\1\7\1\0\15\7\13\0\1\7\3\0"+
    "\1\7\1\150\2\7\1\231\2\7\1\152\1\7\1\150"+
    "\1\7\1\232\17\7\1\0\4\7\1\232\5\7\1\152"+
    "\2\7\13\0\1\7\3\0\4\7\1\232\6\7\1\232"+
    "\17\7\1\0\4\7\1\232\10\7\13\0\1\7\3\0"+
    "\1\7\1\233\2\7\1\150\4\7\1\150\21\7\1\0"+
    "\15\7\13\0\1\7\3\0\4\7\1\234\3\7\1\234"+
    "\17\7\1\234\2\7\1\0\15\7\13\0\1\7\3\0"+
    "\4\7\1\235\1\7\1\235\24\7\1\0\13\7\1\235"+
    "\1\7\13\0\1\7\3\0\4\7\1\162\26\7\1\0"+
    "\3\7\1\162\11\7\13\0\1\7\3\0\4\7\1\236"+
    "\1\7\1\237\24\7\1\0\3\7\1\162\7\7\1\237"+
    "\1\7\13\0\1\7\3\0\4\7\1\237\1\7\1\237"+
    "\24\7\1\0\13\7\1\237\1\7\13\0\1\7\3\0"+
    "\4\7\1\204\20\7\1\204\5\7\1\0\15\7\13\0"+
    "\1\7\3\0\1\7\1\212\1\223\1\7\1\240\4\7"+
    "\1\212\6\7\1\220\12\7\1\0\10\7\1\223\4\7"+
    "\13\0\1\7\3\0\4\7\1\220\13\7\1\220\12\7"+
    "\1\0\15\7\13\0\1\7\3\0\3\7\2\160\25\7"+
    "\1\160\1\0\15\7\13\0\1\7\3\0\2\7\1\241"+
    "\1\7\1\241\26\7\1\0\10\7\1\241\4\7\13\0"+
    "\1\7\3\0\2\7\1\242\1\7\1\242\26\7\1\0"+
    "\10\7\1\242\4\7\13\0\1\7\3\0\2\7\1\221"+
    "\1\7\1\221\26\7\1\0\10\7\1\221\4\7\13\0"+
    "\1\7\3\0\4\7\1\243\13\7\1\243\12\7\1\0"+
    "\15\7\13\0\1\7\3\0\4\7\1\244\3\7\1\234"+
    "\2\7\1\232\14\7\1\234\2\7\1\0\4\7\1\232"+
    "\10\7\13\0\1\7\3\0\4\7\1\245\2\7\1\202"+
    "\4\7\1\215\10\7\1\211\5\7\1\0\7\7\1\215"+
    "\2\7\1\202\2\7\13\0\1\7\3\0\4\7\1\202"+
    "\2\7\1\202\23\7\1\0\12\7\1\202\2\7\13\0"+
    "\1\7\3\0\4\7\1\211\20\7\1\211\5\7\1\0"+
    "\15\7\13\0\1\7\3\0\4\7\1\246\3\7\1\203"+
    "\3\7\1\210\13\7\1\203\2\7\1\0\1\7\1\200"+
    "\5\7\1\210\5\7\13\0\1\7\3\0\4\7\1\203"+
    "\3\7\1\203\17\7\1\203\2\7\1\0\15\7\13\0"+
    "\1\7\3\0\4\7\1\210\7\7\1\210\16\7\1\0"+
    "\7\7\1\210\5\7\13\0\1\7\3\0\4\7\1\200"+
    "\26\7\1\0\1\7\1\200\13\7\13\0\1\7\3\0"+
    "\4\7\1\247\2\7\1\247\23\7\1\0\12\7\1\247"+
    "\2\7\13\0\1\7\3\0\33\7\1\0\5\7\1\250"+
    "\7\7\13\0\1\7\3\0\4\7\1\251\3\7\1\251"+
    "\17\7\1\251\2\7\1\0\15\7\13\0\1\7\3\0"+
    "\2\7\1\252\1\7\1\253\3\7\1\251\1\7\1\254"+
    "\10\7\1\254\4\7\1\251\2\7\1\0\10\7\1\252"+
    "\4\7\13\0\1\7\3\0\2\7\1\252\1\7\1\255"+
    "\5\7\1\254\10\7\1\254\7\7\1\0\10\7\1\252"+
    "\4\7\13\0\1\7\3\0\4\7\1\256\1\7\1\256"+
    "\24\7\1\0\13\7\1\256\1\7\13\0\1\7\3\0"+
    "\4\7\1\257\1\7\1\256\10\7\1\260\11\7\1\260"+
    "\1\7\1\0\13\7\1\256\1\7\13\0\1\7\3\0"+
    "\4\7\1\260\12\7\1\260\11\7\1\260\1\7\1\0"+
    "\15\7\13\0\1\7\3\0\4\7\1\261\5\7\1\261"+
    "\10\7\1\261\7\7\1\0\15\7\13\0\1\7\3\0"+
    "\33\7\1\0\12\7\1\262\2\7\13\0\1\7\3\0"+
    "\4\7\1\263\12\7\1\263\11\7\1\263\1\7\1\0"+
    "\15\7\13\0\1\7\3\0\4\7\1\264\3\7\1\251"+
    "\6\7\1\265\10\7\1\251\1\265\1\7\1\0\15\7"+
    "\13\0\1\7\3\0\4\7\1\266\3\7\1\267\3\7"+
    "\1\270\13\7\1\267\2\7\1\0\2\7\1\271\2\7"+
    "\1\271\1\7\1\270\5\7\13\0\1\7\3\0\1\7"+
    "\1\272\1\273\1\7\1\274\1\275\1\256\1\7\1\276"+
    "\1\272\1\277\1\7\1\300\1\301\1\7\1\302\1\303"+
    "\2\7\1\277\1\7\1\304\2\7\1\276\1\302\1\7"+
    "\1\0\2\7\1\271\2\7\1\271\1\7\1\300\1\273"+
    "\1\301\1\7\1\256\1\7\13\0\1\7\3\0\4\7"+
    "\1\305\1\275\6\7\1\306\16\7\1\0\7\7\1\306"+
    "\5\7\13\0\1\7\3\0\2\7\1\307\1\7\1\310"+
    "\5\7\1\311\4\7\1\260\3\7\1\311\5\7\1\260"+
    "\1\7\1\0\10\7\1\307\4\7\13\0\1\7\3\0"+
    "\4\7\1\312\12\7\1\312\11\7\1\312\1\7\1\0"+
    "\15\7\13\0\1\7\3\0\4\7\1\313\7\7\1\313"+
    "\16\7\1\0\7\7\1\313\5\7\13\0\1\7\3\0"+
    "\1\7\1\171\2\7\1\314\4\7\1\171\2\7\1\315"+
    "\16\7\1\0\7\7\1\315\5\7\13\0\1\7\3\0"+
    "\4\7\1\304\20\7\1\304\5\7\1\0\15\7\13\0"+
    "\1\7\3\0\4\7\1\303\13\7\1\303\12\7\1\0"+
    "\15\7\13\0\1\7\3\0\1\7\1\316\2\7\1\317"+
    "\4\7\1\316\3\7\1\301\15\7\1\0\11\7\1\301"+
    "\3\7\13\0\1\7\3\0\4\7\1\320\3\7\1\320"+
    "\17\7\1\320\2\7\1\0\15\7\13\0\1\7\3\0"+
    "\1\7\1\316\2\7\1\321\1\275\3\7\1\316\1\261"+
    "\1\7\1\306\6\7\1\261\7\7\1\0\7\7\1\306"+
    "\5\7\13\0\1\7\3\0\1\7\1\316\2\7\1\316"+
    "\4\7\1\316\21\7\1\0\15\7\13\0\1\7\3\0"+
    "\4\7\1\322\3\7\1\323\17\7\1\323\2\7\1\0"+
    "\2\7\1\271\2\7\1\271\7\7\13\0\1\7\3\0"+
    "\4\7\1\324\3\7\1\323\6\7\1\312\10\7\1\323"+
    "\1\312\1\7\1\0\2\7\1\271\2\7\1\271\7\7"+
    "\13\0\1\7\3\0\4\7\1\325\7\7\1\326\1\301"+
    "\15\7\1\0\7\7\1\326\1\7\1\301\3\7\13\0"+
    "\1\7\3\0\4\7\1\315\7\7\1\315\16\7\1\0"+
    "\7\7\1\315\5\7\13\0\1\7\3\0\4\7\1\301"+
    "\10\7\1\301\15\7\1\0\11\7\1\301\3\7\13\0"+
    "\1\7\3\0\4\7\1\265\12\7\1\265\11\7\1\265"+
    "\1\7\1\0\15\7\13\0\1\7\3\0\4\7\1\327"+
    "\3\7\1\320\1\7\1\311\5\7\1\303\2\7\1\311"+
    "\4\7\1\320\2\7\1\0\15\7\13\0\1\7\3\0"+
    "\4\7\1\311\5\7\1\311\10\7\1\311\7\7\1\0"+
    "\15\7\13\0\1\7\3\0\1\7\1\171\2\7\1\171"+
    "\4\7\1\171\21\7\1\0\15\7\13\0\1\7\3\0"+
    "\2\7\1\307\1\7\1\330\12\7\1\260\11\7\1\260"+
    "\1\7\1\0\10\7\1\307\4\7\13\0\1\7\3\0"+
    "\4\7\1\270\7\7\1\270\16\7\1\0\7\7\1\270"+
    "\5\7\13\0\1\7\3\0\4\7\1\331\7\7\1\270"+
    "\10\7\1\304\5\7\1\0\7\7\1\270\5\7\13\0"+
    "\1\7\3\0\4\7\1\332\3\7\1\332\17\7\1\332"+
    "\2\7\1\0\15\7\13\0\1\7\3\0\4\7\1\271"+
    "\26\7\1\0\2\7\1\271\2\7\1\271\7\7\13\0"+
    "\1\7\3\0\4\7\1\333\7\7\1\313\16\7\1\0"+
    "\2\7\1\271\2\7\1\271\1\7\1\313\5\7\13\0"+
    "\1\7\3\0\4\7\1\334\5\7\1\311\5\7\1\303"+
    "\2\7\1\311\7\7\1\0\15\7\13\0\1\7\3\0"+
    "\4\7\1\312\12\7\1\312\5\7\1\304\3\7\1\312"+
    "\1\7\1\0\15\7\13\0\1\7\3\0\4\7\1\251"+
    "\3\7\1\251\17\7\1\335\2\7\1\0\15\7\13\0"+
    "\1\7\3\0\2\7\1\307\1\7\1\307\26\7\1\0"+
    "\10\7\1\307\4\7\13\0\1\7\3\0\4\7\1\306"+
    "\7\7\1\306\16\7\1\0\7\7\1\306\5\7\13\0"+
    "\1\7\3\0\4\7\2\275\11\7\1\263\11\7\1\263"+
    "\1\7\1\0\15\7\13\0\1\7\3\0\4\7\2\275"+
    "\25\7\1\0\15\7\13\0\1\7\3\0\4\7\1\265"+
    "\3\7\1\332\6\7\1\265\10\7\1\332\1\265\1\7"+
    "\1\0\15\7\13\0\1\7\3\0\4\7\1\336\3\7"+
    "\1\323\3\7\1\270\13\7\1\323\2\7\1\0\7\7"+
    "\1\270\5\7\13\0\1\7\3\0\4\7\1\323\3\7"+
    "\1\323\17\7\1\323\2\7\1\0\15\7\13\0\1\7"+
    "\3\0\1\7\1\171\2\7\1\337\4\7\1\171\3\7"+
    "\1\301\15\7\1\0\11\7\1\301\3\7\13\0\1\7"+
    "\3\0\4\7\1\320\3\7\1\320\3\7\1\315\13\7"+
    "\1\320\2\7\1\0\7\7\1\315\5\7\13\0\1\7"+
    "\3\0\33\7\1\0\6\7\1\340\6\7\13\0\1\7"+
    "\3\0\4\7\1\341\12\7\1\341\11\7\1\341\1\7"+
    "\1\0\15\7\13\0\1\7\3\0\4\7\1\342\20\7"+
    "\1\342\5\7\1\0\15\7\13\0\1\7\3\0\4\7"+
    "\1\343\10\7\1\344\1\7\1\341\5\7\1\342\3\7"+
    "\1\341\1\7\1\0\11\7\1\344\3\7\13\0\1\7"+
    "\3\0\4\7\1\344\10\7\1\344\15\7\1\0\11\7"+
    "\1\344\3\7\13\0\1\7\3\0\4\7\1\345\10\7"+
    "\1\344\7\7\1\342\5\7\1\0\11\7\1\344\3\7"+
    "\13\0\1\7\3\0\4\7\1\346\2\7\1\346\23\7"+
    "\1\0\12\7\1\346\2\7\13\0\1\7\3\0\4\7"+
    "\1\347\2\7\1\346\16\7\1\350\4\7\1\0\12\7"+
    "\1\346\2\7\13\0\1\7\3\0\4\7\1\350\21\7"+
    "\1\350\4\7\1\0\15\7\13\0\1\7\3\0\4\7"+
    "\1\351\7\7\1\351\16\7\1\0\7\7\1\351\5\7"+
    "\13\0\1\7\3\0\33\7\1\0\13\7\1\352\1\7"+
    "\13\0\1\7\3\0\2\7\1\353\1\7\1\354\12\7"+
    "\1\341\11\7\1\341\1\7\1\0\10\7\1\353\4\7"+
    "\13\0\1\7\3\0\2\7\1\353\1\7\1\353\26\7"+
    "\1\0\10\7\1\353\4\7\13\0\1\7\3\0\4\7"+
    "\1\355\12\7\1\356\2\7\1\357\6\7\1\356\1\7"+
    "\1\0\6\7\1\357\6\7\13\0\1\7\3\0\4\7"+
    "\1\360\12\7\1\360\11\7\1\360\1\7\1\0\15\7"+
    "\13\0\1\7\3\0\4\7\1\361\12\7\1\361\11\7"+
    "\1\361\1\7\1\0\15\7\13\0\1\7\3\0\4\7"+
    "\1\357\15\7\1\357\10\7\1\0\6\7\1\357\6\7"+
    "\13\0\1\7\3\0\4\7\1\362\1\7\1\363\10\7"+
    "\1\312\11\7\1\312\1\7\1\0\13\7\1\363\1\7"+
    "\13\0\1\7\3\0\4\7\1\364\7\7\1\365\10\7"+
    "\1\342\5\7\1\0\7\7\1\365\5\7\13\0\1\7"+
    "\3\0\2\7\1\366\1\7\1\367\1\7\1\363\1\370"+
    "\1\371\3\7\1\372\1\344\1\7\1\373\2\7\1\357"+
    "\2\7\1\342\1\350\1\7\1\371\1\373\1\7\1\0"+
    "\6\7\1\357\1\372\1\366\1\344\1\370\1\363\1\7"+
    "\13\0\1\7\3\0\4\7\1\374\12\7\1\374\11\7"+
    "\1\374\1\7\1\0\15\7\13\0\1\7\3\0\4\7"+
    "\1\375\2\7\1\376\4\7\1\351\1\344\15\7\1\0"+
    "\7\7\1\351\1\7\1\344\1\376\2\7\13\0\1\7"+
    "\3\0\2\7\1\377\1\7\1\u0100\12\7\1\u0101\11\7"+
    "\1\u0101\1\7\1\0\10\7\1\377\4\7\13\0\1\7"+
    "\3\0\4\7\1\371\3\7\1\371\17\7\1\371\2\7"+
    "\1\0\15\7\13\0\1\7\3\0\2\7\1\353\1\7"+
    "\1\u0102\21\7\1\350\4\7\1\0\10\7\1\353\4\7"+
    "\13\0\1\7\3\0\4\7\1\u0103\12\7\1\u0103\11\7"+
    "\1\u0103\1\7\1\0\15\7\13\0\1\7\3\0\4\7"+
    "\1\365\7\7\1\365\16\7\1\0\7\7\1\365\5\7"+
    "\13\0\1\7\3\0\4\7\1\u0104\2\7\1\376\4\7"+
    "\1\365\11\7\1\350\4\7\1\0\7\7\1\365\2\7"+
    "\1\376\2\7\13\0\1\7\3\0\4\7\1\376\2\7"+
    "\1\376\23\7\1\0\12\7\1\376\2\7\13\0\1\7"+
    "\3\0\2\7\1\377\1\7\1\377\26\7\1\0\10\7"+
    "\1\377\4\7\13\0\1\7\3\0\4\7\1\363\1\7"+
    "\1\363\24\7\1\0\13\7\1\363\1\7\13\0\1\7"+
    "\3\0\4\7\1\u0105\1\7\1\363\1\7\1\371\17\7"+
    "\1\371\2\7\1\0\13\7\1\363\1\7\13\0\1\7"+
    "\3\0\4\7\1\u0106\1\7\1\363\5\7\1\351\2\7"+
    "\1\u0103\11\7\1\u0103\1\7\1\0\7\7\1\351\3\7"+
    "\1\363\1\7\13\0\1\7\3\0\4\7\1\u0107\12\7"+
    "\1\360\2\7\1\357\6\7\1\360\1\7\1\0\6\7"+
    "\1\357\6\7\13\0\1\7\3\0\2\7\1\377\1\7"+
    "\1\u0108\3\7\1\371\17\7\1\371\2\7\1\0\10\7"+
    "\1\377\4\7\13\0\1\7\3\0\4\7\1\u0109\7\7"+
    "\1\365\11\7\1\350\4\7\1\0\7\7\1\365\5\7"+
    "\13\0\1\7\3\0\2\7\1\377\1\7\1\u010a\15\7"+
    "\1\357\10\7\1\0\6\7\1\357\1\7\1\377\4\7"+
    "\13\0\1\7\3\0\4\7\1\341\12\7\1\341\11\7"+
    "\1\u010b\1\7\1\0\15\7\13\0\1\7\3\0\4\7"+
    "\1\356\12\7\1\356\11\7\1\356\1\7\1\0\15\7"+
    "\13\0\1\7\3\0\4\7\1\u010c\3\7\1\371\6\7"+
    "\1\312\10\7\1\371\1\312\1\7\1\0\15\7\13\0"+
    "\1\7\3\0\33\7\1\0\7\7\1\u010d\5\7\13\0"+
    "\1\7\3\0\3\7\2\u010e\25\7\1\u010e\1\0\15\7"+
    "\13\0\1\7\3\0\4\7\1\u010f\21\7\1\u010f\4\7"+
    "\1\0\15\7\13\0\1\7\3\0\3\7\1\u010e\1\u010f"+
    "\3\7\1\u0110\15\7\1\u010f\1\7\1\u0110\1\7\1\u010e"+
    "\1\0\15\7\13\0\1\7\3\0\4\7\1\u0110\3\7"+
    "\1\u0110\17\7\1\u0110\2\7\1\0\15\7\13\0\1\7"+
    "\3\0\4\7\1\u010f\3\7\1\u0110\15\7\1\u010f\1\7"+
    "\1\u0110\2\7\1\0\15\7\13\0\1\7\3\0\4\7"+
    "\1\u0111\3\7\1\u0111\17\7\1\u0111\2\7\1\0\15\7"+
    "\13\0\1\7\3\0\4\7\1\u0112\3\7\1\u0111\6\7"+
    "\1\u0113\10\7\1\u0111\1\u0113\1\7\1\0\15\7\13\0"+
    "\1\7\3\0\4\7\1\u0113\12\7\1\u0113\11\7\1\u0113"+
    "\1\7\1\0\15\7\13\0\1\7\3\0\4\7\1\u0114"+
    "\12\7\1\u0114\11\7\1\u0114\1\7\1\0\15\7\13\0"+
    "\1\7\3\0\1\7\1\u0115\31\7\1\0\15\7\13\0"+
    "\1\7\3\0\4\7\1\u0116\17\7\1\u0116\6\7\1\0"+
    "\14\7\1\u0116\13\0\1\7\3\0\3\7\1\u010e\1\u0116"+
    "\17\7\1\u0116\5\7\1\u010e\1\0\14\7\1\u0116\13\0"+
    "\1\7\3\0\4\7\1\u0117\3\7\1\u0118\3\7\1\u0119"+
    "\13\7\1\u0118\2\7\1\0\7\7\1\u0119\5\7\13\0"+
    "\1\7\3\0\4\7\1\u0119\7\7\1\u0119\16\7\1\0"+
    "\7\7\1\u0119\5\7\13\0\1\7\3\0\4\7\1\u0118"+
    "\3\7\1\u0118\17\7\1\u0118\2\7\1\0\15\7\13\0"+
    "\1\7\3\0\4\7\1\u011a\7\7\1\u011a\16\7\1\0"+
    "\7\7\1\u011a\5\7\13\0\1\7\3\0\4\7\1\u0116"+
    "\10\7\1\u011b\6\7\1\u0116\6\7\1\0\11\7\1\u011b"+
    "\2\7\1\u0116\13\0\1\7\3\0\2\7\1\u011c\1\u010e"+
    "\1\u011d\3\7\1\u011e\3\7\1\u011f\1\u011b\1\7\1\u0120"+
    "\2\7\1\u0121\1\7\1\u0116\1\u0122\1\u010f\1\7\1\u011e"+
    "\1\u0120\1\u010e\1\0\6\7\1\u0121\1\u011f\1\u011c\1\u011b"+
    "\2\7\1\u0116\13\0\1\7\3\0\4\7\1\u0123\3\7"+
    "\1\u0111\14\7\1\u0122\2\7\1\u0111\2\7\1\0\15\7"+
    "\13\0\1\7\3\0\2\7\1\u011c\1\7\1\u011c\26\7"+
    "\1\0\10\7\1\u011c\4\7\13\0\1\7\3\0\3\7"+
    "\1\u010e\1\u0124\7\7\1\u0119\5\7\1\u0121\7\7\1\u010e"+
    "\1\0\6\7\1\u0121\1\u0119\5\7\13\0\1\7\3\0"+
    "\3\7\1\u010e\1\u0125\7\7\1\u0119\15\7\1\u010e\1\0"+
    "\7\7\1\u0119\5\7\13\0\1\7\3\0\4\7\1\u0122"+
    "\3\7\1\u0110\6\7\1\u0114\5\7\1\u0122\2\7\1\u0110"+
    "\1\u0114\1\7\1\0\15\7\13\0\1\7\3\0\4\7"+
    "\1\u0122\20\7\1\u0122\5\7\1\0\15\7\13\0\1\7"+
    "\3\0\4\7\1\u011b\10\7\1\u011b\15\7\1\0\11\7"+
    "\1\u011b\3\7\13\0\1\7\3\0\4\7\1\u0126\10\7"+
    "\1\u011b\4\7\1\u0121\10\7\1\0\6\7\1\u0121\2\7"+
    "\1\u011b\3\7\13\0\1\7\3\0\4\7\1\u0121\15\7"+
    "\1\u0121\10\7\1\0\6\7\1\u0121\6\7\13\0\1\7"+
    "\3\0\4\7\1\u0127\12\7\1\u0113\4\7\1\u0116\4\7"+
    "\1\u0113\1\7\1\0\14\7\1\u0116\13\0\1\7\3\0"+
    "\4\7\1\u0128\12\7\1\u0113\5\7\1\u0122\3\7\1\u0113"+
    "\1\7\1\0\15\7\13\0\1\7\3\0\2\7\1\u011c"+
    "\1\7\1\u0129\7\7\1\u011a\16\7\1\0\7\7\1\u011a"+
    "\1\u011c\4\7\13\0\1\7\3\0\4\7\1\u012a\7\7"+
    "\1\u011a\2\7\1\u0114\2\7\1\u0121\6\7\1\u0114\1\7"+
    "\1\0\6\7\1\u0121\1\u011a\5\7\13\0\1\7\3\0"+
    "\2\7\1\u011c\1\7\1\u012b\10\7\1\u011b\15\7\1\0"+
    "\10\7\1\u011c\1\u011b\3\7\13\0\1\7\3\0\4\7"+
    "\1\u012c\3\7\1\u0118\4\7\1\u011b\12\7\1\u0118\2\7"+
    "\1\0\11\7\1\u011b\3\7\13\0\1\7\3\0\3\7"+
    "\2\u010e\25\7\1\u012d\1\0\15\7\13\0\1\7\3\0"+
    "\1\7\1\u012e\2\7\1\u012e\4\7\1\u012e\21\7\1\0"+
    "\15\7\13\0\1\7\3\0\1\7\1\u012e\2\7\1\u010d"+
    "\2\7\1\u010d\1\7\1\u012e\21\7\1\0\12\7\1\u010d"+
    "\2\7\13\0\1\7\3\0\4\7\1\u010d\2\7\1\u010d"+
    "\23\7\1\0\12\7\1\u010d\2\7\13\0\1\7\3\0"+
    "\33\7\1\0\13\7\1\u012f\1\7\13\0\1\7\3\0"+
    "\2\7\1\u0130\1\7\1\u0131\12\7\1\u0132\11\7\1\u0132"+
    "\1\7\1\0\10\7\1\u0130\4\7\13\0\1\7\3\0"+
    "\4\7\1\u0132\12\7\1\u0132\11\7\1\u0132\1\7\1\0"+
    "\15\7\13\0\1\7\3\0\2\7\1\u0130\1\7\1\u0130"+
    "\26\7\1\0\10\7\1\u0130\4\7\13\0\1\7\3\0"+
    "\4\7\1\u0133\12\7\1\u0133\11\7\1\u0133\1\7\1\0"+
    "\15\7\13\0\1\7\3\0\4\7\1\u0134\1\7\1\u0134"+
    "\24\7\1\0\13\7\1\u0134\1\7\13\0\1\7\3\0"+
    "\1\7\1\u012e\1\u0130\1\7\1\u0135\1\7\1\u0134\1\u010d"+
    "\1\7\1\u012e\5\7\1\u0132\5\7\1\u010d\3\7\1\u0132"+
    "\1\7\1\0\10\7\1\u0130\1\7\1\u010d\1\u0134\1\7"+
    "\13\0\1\7\3\0\1\7\1\u012e\2\7\1\u0132\4\7"+
    "\1\u012e\5\7\1\u0132\11\7\1\u0132\1\7\1\0\15\7"+
    "\13\0\1\7\3\0\2\7\1\u0130\1\7\1\u0136\12\7"+
    "\1\u0133\11\7\1\u0133\1\7\1\0\10\7\1\u0130\4\7"+
    "\13\0\1\7\3\0\4\7\1\u010d\20\7\1\u010d\5\7"+
    "\1\0\15\7\13\0\1\7\3\0\2\7\1\u0130\1\7"+
    "\1\u0137\20\7\1\u010d\5\7\1\0\10\7\1\u0130\4\7"+
    "\13\0\1\7\3\0\4\7\1\u0138\1\7\1\u0134\10\7"+
    "\1\u0133\11\7\1\u0133\1\7\1\0\13\7\1\u0134\1\7"+
    "\13\0\1\7\3\0\4\7\1\u010d\12\7\1\u0133\5\7"+
    "\1\u010d\3\7\1\u0133\1\7\1\0\15\7\13\0\1\7"+
    "\3\0\33\7\1\u0139\15\7\13\0\1\7\3\0\33\7"+
    "\1\0\14\7\1\u013a\13\0\1\7\3\0\4\7\1\u013b"+
    "\20\7\1\u013b\5\7\1\0\15\7\13\0\1\7\3\0"+
    "\4\7\1\u013c\20\7\1\u013c\5\7\1\0\15\7\13\0"+
    "\1\7\3\0\4\7\1\u013d\20\7\1\u013d\5\7\1\0"+
    "\15\7\20\0\1\u013e\2\0\1\u013e\4\0\1\u013e\52\0"+
    "\1\7\3\0\30\7\1\u013f\2\7\1\0\15\7\13\0"+
    "\1\7\3\0\4\7\1\u0140\12\7\1\u0140\11\7\1\u0140"+
    "\1\7\1\0\15\7\23\0\1\u0141\11\0\1\u0141\10\0"+
    "\1\u0141\33\0\1\u0142\1\u0143\2\u0142\1\0\33\u0143\1\u0142"+
    "\15\u0143\12\u0142\6\0\1\u0144\2\0\1\u0144\4\0\1\u0144"+
    "\117\0\1\u0145\22\0\1\7\3\0\33\7\1\0\5\7"+
    "\1\u0146\7\7\23\0\1\u0147\3\0\1\u0147\17\0\1\u0147"+
    "\103\0\1\u0148\17\0\1\7\3\0\33\7\1\0\10\7"+
    "\1\u0149\4\7\23\0\1\u014a\12\0\1\u014a\11\0\1\u014a"+
    "\37\0\1\u014b\62\0\1\7\3\0\1\7\1\u014c\31\7"+
    "\1\0\15\7\22\0\2\u014d\25\0\1\u014d\60\0\1\u014e"+
    "\40\0\1\7\3\0\23\7\1\u014f\7\7\1\0\15\7"+
    "\61\0\1\u0150\21\0\1\7\3\0\33\7\1\0\6\7"+
    "\1\u0151\6\7\33\0\1\u0152\47\0\1\7\3\0\14\7"+
    "\1\u0153\16\7\1\0\15\7\57\0\1\u0154\23\0\1\7"+
    "\3\0\33\7\1\0\4\7\1\u0155\10\7\61\0\1\u0156"+
    "\21\0\1\7\3\0\33\7\1\0\6\7\1\u0157\6\7"+
    "\20\0\1\u0158\62\0\1\7\3\0\1\7\1\u0159\31\7"+
    "\1\0\15\7\63\0\1\u015a\17\0\1\7\3\0\33\7"+
    "\1\0\10\7\1\u015b\4\7\64\0\1\u015c\16\0\1\7"+
    "\3\0\33\7\1\0\11\7\1\u015d\3\7\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14560];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\1\11\26\1\1\11"+
    "\2\1\6\11\2\1\2\11\1\0\73\1\1\11\322\1"+
    "\1\0\4\1\1\0\2\1\2\0\1\1\2\0\1\1"+
    "\2\0\1\1\2\0\1\1\1\11\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[349];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 37: 
          { lexeme=yytext(); return tk_read;
          }
        case 56: break;
        case 10: 
          { lexeme=yytext(); return tk_Division;
          }
        case 57: break;
        case 21: 
          { lexeme=yytext(); return tk_valorString;
          }
        case 58: break;
        case 31: 
          { lexeme=yytext(); return tk_else;
          }
        case 59: break;
        case 12: 
          { lexeme=yytext(); return tk_punto;
          }
        case 60: break;
        case 53: 
          { lexeme=yytext(); return tk_function;
          }
        case 61: break;
        case 14: 
          { lexeme=yytext(); return tk_ParentesisA;
          }
        case 62: break;
        case 45: 
          { lexeme=yytext(); return tk_structure;
          }
        case 63: break;
        case 54: 
          { lexeme=yytext(); return tk_writeline;
          }
        case 64: break;
        case 42: 
          { lexeme=yytext(); return tk_tDato;
          }
        case 65: break;
        case 27: 
          { lexeme=yytext(); return tk_end;
          }
        case 66: break;
        case 35: 
          { lexeme=yytext(); return tk_next;
          }
        case 67: break;
        case 32: 
          { lexeme=yytext(); return tk_exit;
          }
        case 68: break;
        case 34: 
          { lexeme=yytext(); return tk_loop;
          }
        case 69: break;
        case 5: 
          { lexeme=yytext(); return tk_Identificador;
          }
        case 70: break;
        case 41: 
          { lexeme=yytext(); return tk_until;
          }
        case 71: break;
        case 55: 
          { lexeme=yytext(); return tk_lib;
          }
        case 72: break;
        case 29: 
          { lexeme=yytext(); return tk_xor;
          }
        case 73: break;
        case 19: 
          { lexeme=yytext(); return tk_or;
          }
        case 74: break;
        case 39: 
          { lexeme=yytext(); return tk_while;
          }
        case 75: break;
        case 22: 
          { lexeme=yytext(); return tk_mod;
          }
        case 76: break;
        case 52: 
          { lexeme=yytext(); return tk_cs;
          }
        case 77: break;
        case 23: 
          { lexeme=yytext(); return tk_dim;
          }
        case 78: break;
        case 51: 
          { lexeme=yytext(); return tk_private;
          }
        case 79: break;
        case 15: 
          { lexeme=yytext(); return tk_ParentesisC;
          }
        case 80: break;
        case 28: 
          { lexeme=yytext(); return tk_and;
          }
        case 81: break;
        case 25: 
          { lexeme=yytext(); return tk_not;
          }
        case 82: break;
        case 11: 
          { lexeme=yytext(); return tk_Coma;
          }
        case 83: break;
        case 8: 
          { lexeme=yytext(); return tk_Resta;
          }
        case 84: break;
        case 18: 
          { lexeme=yytext(); return tk_do;
          }
        case 85: break;
        case 47: 
          { lexeme=yytext(); return tk_elseif;
          }
        case 86: break;
        case 17: 
          { lexeme=yytext(); return tk_as;
          }
        case 87: break;
        case 33: 
          { lexeme = yytext(); return tk_booleano;
          }
        case 88: break;
        case 7: 
          { lexeme=yytext(); return tk_Suma;
          }
        case 89: break;
        case 40: 
          { lexeme=yytext(); return tk_write;
          }
        case 90: break;
        case 49: 
          { lexeme=yytext(); return tk_return;
          }
        case 91: break;
        case 4: 
          { return tk_Linea;
          }
        case 92: break;
        case 44: 
          { lexeme=yytext(); return tk_String;
          }
        case 93: break;
        case 20: 
          { lexeme=yytext(); return tk_to;
          }
        case 94: break;
        case 13: 
          { lexeme = yytext(); return tk_opRelacional;
          }
        case 95: break;
        case 43: 
          { lexeme=yytext(); return tk_sys;
          }
        case 96: break;
        case 26: 
          { lexeme=yytext(); return tk_sub;
          }
        case 97: break;
        case 36: 
          { lexeme=yytext(); return tk_null;
          }
        case 98: break;
        case 50: 
          { lexeme=yytext(); return tk_imports;
          }
        case 99: break;
        case 48: 
          { lexeme=yytext(); return tk_public;
          }
        case 100: break;
        case 30: 
          { lexeme=yytext(); return tk_like;
          }
        case 101: break;
        case 6: 
          { lexeme=yytext(); return tk_Igual;
          }
        case 102: break;
        case 1: 
          { return ERROR;
          }
        case 103: break;
        case 46: 
          { lexeme=yytext(); return tk_module;
          }
        case 104: break;
        case 2: 
          { lexeme=yytext(); return tk_Numero;
          }
        case 105: break;
        case 9: 
          { lexeme=yytext(); return tk_Multiplicacion;
          }
        case 106: break;
        case 24: 
          { lexeme=yytext(); return tk_for;
          }
        case 107: break;
        case 16: 
          { lexeme=yytext(); return tk_if;
          }
        case 108: break;
        case 38: 
          { lexeme=yytext(); return tk_then;
          }
        case 109: break;
        case 3: 
          { 
          }
        case 110: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
