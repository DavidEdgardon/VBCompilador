/* The following code was generated by JFlex 1.4.3 on 03-16-21 10:57 AM */

package analizadores;
import static analizadores.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 03-16-21 10:57 AM from the specification file
 * <tt>C:/Users/David/Documents/NetBeansProjects/VBCompilador/src/analizadores/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\4\1\0\1\2\23\0\1\2\1\0\1\3\3\0"+
    "\1\52\1\5\1\56\1\57\1\47\1\45\1\51\1\46\1\53\1\50"+
    "\12\1\2\0\1\55\1\40\1\54\2\0\1\30\1\21\1\23\1\26"+
    "\1\25\1\31\1\33\1\41\1\10\1\6\1\44\1\22\1\11\1\32"+
    "\1\14\1\13\1\6\1\15\1\17\1\16\1\20\1\43\1\27\1\42"+
    "\1\24\1\6\4\0\1\6\1\0\1\30\1\21\1\23\1\26\1\36"+
    "\1\31\1\33\1\41\1\10\1\6\1\44\1\22\1\37\1\32\1\14"+
    "\1\13\1\6\1\15\1\7\1\35\1\20\1\43\1\27\1\42\1\34"+
    "\1\6\1\0\1\12\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\3\22\5\1\6\1\5\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\0"+
    "\1\22\4\5\2\23\4\5\1\24\1\5\1\24\1\25"+
    "\1\26\11\5\1\26\1\5\2\27\16\5\2\25\3\5"+
    "\1\24\12\5\1\30\1\31\1\32\1\5\1\33\1\5"+
    "\1\33\4\5\2\34\2\35\3\5\1\35\1\5\1\36"+
    "\1\37\1\5\1\33\2\5\1\40\4\5\2\36\1\37"+
    "\3\5\1\33\10\5\1\40\1\5\1\40\15\5\1\40"+
    "\1\5\1\41\1\36\1\37\1\42\2\5\2\43\2\5"+
    "\1\43\1\5\2\44\1\5\1\45\2\46\1\44\1\47"+
    "\3\5\1\50\1\51\1\52\1\5\1\53\1\5\1\50"+
    "\1\54\1\5\1\51\4\5\1\50\2\5\2\53\1\55"+
    "\2\5\1\52\1\51\1\5\1\50\2\53\1\5\1\52"+
    "\1\44\1\5\1\55\1\47\1\54\15\5\1\56\1\57"+
    "\1\56\1\60\1\5\1\60\2\61\1\5\1\62\2\5"+
    "\1\62\1\60\1\57\2\5\2\56\1\5\1\62\1\5"+
    "\1\61\3\5\1\62\1\61\1\5\1\62\1\60\1\63"+
    "\2\64\2\5\1\65\1\66\2\5\1\67\1\5\1\64"+
    "\1\5\1\65\1\5\1\70\2\63\1\70\1\67\1\66"+
    "\1\70\1\5\1\65\1\67\1\63\1\5\1\71\1\5"+
    "\1\72\1\5\1\71\1\73\1\72\1\73\1\72\1\0"+
    "\2\5\3\74\1\0\1\75\1\76\4\0\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[316];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\60\0\220\0\60\0\300\0\360"+
    "\0\u0120\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270"+
    "\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0"+
    "\0\u0420\0\u0450\0\u0480\0\60\0\u04b0\0\60\0\60\0\60"+
    "\0\60\0\60\0\60\0\60\0\u04e0\0\u0510\0\60\0\60"+
    "\0\u0540\0\300\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630\0\360"+
    "\0\u0630\0\u0660\0\u0690\0\u06c0\0\360\0\u06f0\0\u0720\0\u0750"+
    "\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0"+
    "\0\u0900\0\u0930\0\360\0\u0960\0\u0990\0\360\0\u09c0\0\u09f0"+
    "\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70"+
    "\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c30\0\360\0\u0c60\0\u0c90"+
    "\0\u0cc0\0\u0cf0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0"+
    "\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\60\0\60\0\u0540\0\u0ed0"+
    "\0\u0f00\0\u0f30\0\360\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020"+
    "\0\u1050\0\360\0\u1080\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u1140"+
    "\0\u0f30\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230\0\u1050\0\u1260"+
    "\0\u1290\0\u12c0\0\u12f0\0\u1320\0\360\0\360\0\u1350\0\u1380"+
    "\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0\0\u14d0\0\u1500"+
    "\0\u1530\0\u1560\0\u1590\0\u1590\0\360\0\u15c0\0\u15f0\0\u1620"+
    "\0\u1650\0\u11d0\0\u1680\0\u16b0\0\u16e0\0\u1710\0\u1740\0\u1770"+
    "\0\u17a0\0\u17d0\0\u1800\0\u1830\0\360\0\u1860\0\u1890\0\360"+
    "\0\u18c0\0\u18f0\0\u1920\0\360\0\u1950\0\u1980\0\u1980\0\u19b0"+
    "\0\360\0\u19e0\0\u19e0\0\360\0\u1a10\0\u1a40\0\u1a70\0\u1aa0"+
    "\0\u1ad0\0\u1b00\0\u1b30\0\u1b60\0\360\0\u1b90\0\u1bc0\0\u1bf0"+
    "\0\u1c20\0\u1c50\0\360\0\u1c80\0\u1cb0\0\u1cb0\0\u1ce0\0\u1d10"+
    "\0\u1d40\0\360\0\u1d70\0\u1da0\0\u1da0\0\360\0\360\0\u1dd0"+
    "\0\u1e00\0\360\0\u1e30\0\u1aa0\0\u1aa0\0\u1e60\0\u1d70\0\u1e90"+
    "\0\u1d40\0\u1da0\0\u1ec0\0\u1ad0\0\360\0\u1d40\0\u1ef0\0\u1f20"+
    "\0\u1a70\0\u1f50\0\u1f80\0\u1fb0\0\u1fe0\0\u2010\0\u2040\0\u2070"+
    "\0\u20a0\0\u20d0\0\u2100\0\u2130\0\u2130\0\360\0\u2160\0\u2160"+
    "\0\360\0\u1fb0\0\360\0\u2190\0\u21c0\0\u21f0\0\u2220\0\u20a0"+
    "\0\u2250\0\u2280\0\u22b0\0\u22e0\0\u2310\0\u2340\0\u2370\0\360"+
    "\0\u2340\0\u23a0\0\u23d0\0\u2400\0\u2430\0\u1f80\0\u2070\0\u2460"+
    "\0\u2340\0\u2220\0\360\0\360\0\u2490\0\u2490\0\u24c0\0\360"+
    "\0\360\0\u24f0\0\u2520\0\360\0\u2550\0\u2580\0\u25b0\0\u24c0"+
    "\0\u25e0\0\360\0\u2610\0\u24f0\0\u2490\0\u25e0\0\u24c0\0\u24c0"+
    "\0\u2640\0\u2670\0\u2550\0\u26a0\0\u26d0\0\360\0\u2700\0\360"+
    "\0\u2730\0\u2760\0\360\0\u2700\0\u2700\0\u2730\0\u2790\0\u27c0"+
    "\0\u27f0\0\360\0\u27c0\0\u27f0\0\u2820\0\360\0\360\0\u2850"+
    "\0\u2880\0\u28b0\0\u28e0\0\60";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[316];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\10\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\2\10\1\20\1\26\1\13\1\34"+
    "\1\10\1\35\2\10\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\61\0\1\3"+
    "\56\0\4\51\1\0\53\51\4\52\1\0\53\52\1\0"+
    "\1\10\4\0\32\10\1\0\4\10\14\0\1\10\4\0"+
    "\4\10\1\53\3\10\1\54\1\10\1\55\3\10\1\56"+
    "\7\10\1\56\1\54\2\10\1\0\4\10\14\0\1\10"+
    "\4\0\4\10\1\57\16\10\1\60\1\61\5\10\1\0"+
    "\4\10\14\0\1\10\4\0\4\10\1\62\1\10\1\63"+
    "\13\10\1\64\7\10\1\0\4\10\14\0\1\10\4\0"+
    "\1\10\1\65\1\66\1\10\1\67\1\10\1\70\1\71"+
    "\1\54\1\65\1\72\1\10\1\73\1\10\1\74\1\75"+
    "\2\10\1\76\1\60\1\77\1\10\1\74\1\54\1\75"+
    "\1\10\1\0\1\100\1\101\2\10\14\0\1\10\4\0"+
    "\4\10\1\102\5\10\1\102\17\10\1\0\4\10\14\0"+
    "\1\10\4\0\4\10\1\103\2\10\1\103\22\10\1\0"+
    "\4\10\14\0\1\10\4\0\4\10\1\104\12\10\1\104"+
    "\10\10\1\104\1\10\1\0\4\10\14\0\1\10\4\0"+
    "\4\10\1\105\1\10\1\106\1\107\22\10\1\0\1\110"+
    "\3\10\14\0\1\10\4\0\4\10\1\53\3\10\1\54"+
    "\1\10\1\55\3\10\1\56\7\10\1\111\1\54\2\10"+
    "\1\0\4\10\14\0\1\10\4\0\4\10\1\112\17\10"+
    "\1\112\5\10\1\0\4\10\14\0\1\10\4\0\4\10"+
    "\1\113\1\10\1\114\7\10\1\115\7\10\1\115\3\10"+
    "\1\0\4\10\14\0\1\10\4\0\2\10\1\116\1\10"+
    "\1\117\1\10\1\120\23\10\1\0\4\10\14\0\1\10"+
    "\4\0\4\10\1\121\1\10\1\121\23\10\1\0\4\10"+
    "\14\0\1\10\4\0\4\10\1\122\7\10\1\73\7\10"+
    "\1\123\5\10\1\0\1\10\1\101\2\10\14\0\1\10"+
    "\4\0\2\10\1\124\1\10\1\125\1\10\1\126\23\10"+
    "\1\0\4\10\14\0\1\10\4\0\4\10\1\127\2\10"+
    "\1\130\22\10\1\0\1\131\3\10\14\0\1\10\4\0"+
    "\1\10\1\65\2\10\1\132\4\10\1\65\12\10\1\133"+
    "\5\10\1\0\4\10\14\0\1\10\4\0\4\10\1\134"+
    "\1\10\1\135\3\10\1\136\7\10\1\137\7\10\1\0"+
    "\4\10\14\0\1\10\4\0\4\10\1\140\1\10\1\141"+
    "\3\10\1\142\4\10\1\143\10\10\1\143\1\10\1\0"+
    "\4\10\14\0\1\10\4\0\4\10\1\144\1\10\1\144"+
    "\23\10\1\0\4\10\53\0\1\145\57\0\1\146\17\0"+
    "\3\51\1\147\1\0\53\51\1\0\1\10\4\0\1\10"+
    "\1\150\2\10\1\151\2\10\1\152\1\10\1\150\1\10"+
    "\1\153\3\10\1\154\10\10\1\154\1\10\1\0\4\10"+
    "\14\0\1\10\4\0\4\10\1\155\2\10\1\152\7\10"+
    "\1\154\10\10\1\154\1\10\1\0\4\10\14\0\1\10"+
    "\4\0\4\10\1\153\6\10\1\153\16\10\1\0\4\10"+
    "\14\0\1\10\4\0\1\10\1\150\2\10\1\150\4\10"+
    "\1\150\20\10\1\0\4\10\14\0\1\10\4\0\4\10"+
    "\1\156\3\10\1\156\16\10\1\156\2\10\1\0\4\10"+
    "\14\0\1\10\4\0\2\10\1\157\1\10\1\160\13\10"+
    "\1\161\11\10\1\0\4\10\14\0\1\10\4\0\4\10"+
    "\1\161\13\10\1\161\11\10\1\0\4\10\14\0\1\10"+
    "\4\0\2\10\1\157\1\10\1\157\25\10\1\0\4\10"+
    "\14\0\1\10\4\0\3\10\1\162\1\163\24\10\1\162"+
    "\1\0\3\10\1\164\14\0\1\10\4\0\1\10\1\165"+
    "\1\166\1\162\1\167\1\10\1\170\1\171\1\172\1\165"+
    "\1\173\1\174\1\175\2\10\1\176\1\177\1\10\1\200"+
    "\1\10\1\201\2\10\1\172\1\176\1\162\1\0\1\10"+
    "\1\202\1\203\1\164\14\0\1\10\4\0\4\10\1\204"+
    "\1\10\1\170\1\205\1\206\7\10\1\161\3\10\1\207"+
    "\2\10\1\206\2\10\1\0\4\10\14\0\1\10\4\0"+
    "\2\10\1\210\1\10\1\211\5\10\1\173\17\10\1\0"+
    "\4\10\14\0\1\10\4\0\4\10\1\212\6\10\1\174"+
    "\1\213\7\10\1\214\5\10\1\0\4\10\14\0\1\10"+
    "\4\0\1\10\1\215\2\10\1\215\4\10\1\215\20\10"+
    "\1\0\4\10\14\0\1\10\4\0\1\10\1\150\2\10"+
    "\1\216\4\10\1\150\20\10\1\0\2\10\1\203\1\10"+
    "\14\0\1\10\4\0\4\10\1\217\3\10\1\220\11\10"+
    "\1\200\4\10\1\220\2\10\1\0\1\10\1\202\2\10"+
    "\14\0\1\10\4\0\2\10\1\157\1\10\1\221\7\10"+
    "\1\222\15\10\1\0\4\10\14\0\1\10\4\0\4\10"+
    "\1\223\3\10\1\224\7\10\1\225\6\10\1\224\2\10"+
    "\1\0\4\10\14\0\1\10\4\0\2\10\1\226\1\10"+
    "\1\227\12\10\1\230\10\10\1\230\1\10\1\0\4\10"+
    "\14\0\1\10\4\0\2\10\1\231\1\10\1\231\25\10"+
    "\1\0\4\10\14\0\1\10\4\0\4\10\1\232\6\10"+
    "\1\232\16\10\1\0\4\10\14\0\1\10\4\0\4\10"+
    "\1\233\3\10\1\220\11\10\1\200\4\10\1\220\2\10"+
    "\1\0\4\10\14\0\1\10\4\0\4\10\1\234\5\10"+
    "\1\173\4\10\1\230\10\10\1\230\1\10\1\0\4\10"+
    "\14\0\1\10\4\0\4\10\1\173\5\10\1\173\17\10"+
    "\1\0\4\10\14\0\1\10\4\0\4\10\1\230\12\10"+
    "\1\230\10\10\1\230\1\10\1\0\4\10\14\0\1\10"+
    "\4\0\1\10\1\235\2\10\1\150\4\10\1\150\20\10"+
    "\1\0\4\10\14\0\1\10\4\0\4\10\1\236\3\10"+
    "\1\236\16\10\1\236\2\10\1\0\4\10\14\0\1\10"+
    "\4\0\4\10\1\237\1\10\1\240\23\10\1\0\2\10"+
    "\1\203\1\10\14\0\1\10\4\0\4\10\1\240\1\10"+
    "\1\240\23\10\1\0\4\10\14\0\1\10\4\0\4\10"+
    "\1\203\25\10\1\0\2\10\1\203\1\10\14\0\1\10"+
    "\4\0\4\10\1\164\25\10\1\0\3\10\1\164\14\0"+
    "\1\10\4\0\4\10\1\241\1\10\1\242\23\10\1\0"+
    "\3\10\1\164\14\0\1\10\4\0\4\10\1\242\1\10"+
    "\1\242\23\10\1\0\4\10\14\0\1\10\4\0\4\10"+
    "\1\207\17\10\1\207\5\10\1\0\4\10\14\0\1\10"+
    "\4\0\1\10\1\215\1\231\1\10\1\243\4\10\1\215"+
    "\6\10\1\225\11\10\1\0\4\10\14\0\1\10\4\0"+
    "\4\10\1\225\13\10\1\225\11\10\1\0\4\10\14\0"+
    "\1\10\4\0\3\10\2\162\24\10\1\162\1\0\4\10"+
    "\14\0\1\10\4\0\2\10\1\244\1\10\1\244\25\10"+
    "\1\0\4\10\14\0\1\10\4\0\2\10\1\210\1\10"+
    "\1\210\25\10\1\0\4\10\14\0\1\10\4\0\2\10"+
    "\1\226\1\10\1\226\25\10\1\0\4\10\14\0\1\10"+
    "\4\0\4\10\1\245\13\10\1\245\11\10\1\0\4\10"+
    "\14\0\1\10\4\0\4\10\1\246\2\10\1\205\4\10"+
    "\1\222\7\10\1\214\5\10\1\0\4\10\14\0\1\10"+
    "\4\0\4\10\1\205\2\10\1\205\22\10\1\0\4\10"+
    "\14\0\1\10\4\0\4\10\1\214\17\10\1\214\5\10"+
    "\1\0\4\10\14\0\1\10\4\0\4\10\1\222\7\10"+
    "\1\222\15\10\1\0\4\10\14\0\1\10\4\0\4\10"+
    "\1\247\3\10\1\206\3\10\1\213\12\10\1\206\2\10"+
    "\1\0\1\10\1\202\2\10\14\0\1\10\4\0\4\10"+
    "\1\206\3\10\1\206\16\10\1\206\2\10\1\0\4\10"+
    "\14\0\1\10\4\0\4\10\1\213\7\10\1\213\15\10"+
    "\1\0\4\10\14\0\1\10\4\0\4\10\1\202\25\10"+
    "\1\0\1\10\1\202\2\10\14\0\1\10\4\0\4\10"+
    "\1\250\2\10\1\250\22\10\1\0\4\10\14\0\1\10"+
    "\4\0\4\10\1\251\3\10\1\251\16\10\1\251\2\10"+
    "\1\0\4\10\14\0\1\10\4\0\2\10\1\252\1\10"+
    "\1\253\1\254\2\10\1\251\1\10\1\255\14\10\1\251"+
    "\2\10\1\0\4\10\14\0\1\10\4\0\2\10\1\252"+
    "\1\10\1\256\5\10\1\255\17\10\1\0\4\10\14\0"+
    "\1\10\4\0\4\10\2\254\24\10\1\0\4\10\14\0"+
    "\1\10\4\0\2\10\1\252\1\10\1\257\1\254\4\10"+
    "\1\255\17\10\1\0\4\10\14\0\1\10\4\0\4\10"+
    "\1\260\12\10\1\260\10\10\1\260\1\10\1\0\4\10"+
    "\14\0\1\10\4\0\4\10\1\261\17\10\1\261\5\10"+
    "\1\0\4\10\14\0\1\10\4\0\4\10\1\262\5\10"+
    "\1\263\11\10\1\261\5\10\1\0\4\10\14\0\1\10"+
    "\4\0\4\10\1\263\5\10\1\263\17\10\1\0\4\10"+
    "\14\0\1\10\4\0\4\10\1\264\12\10\1\264\10\10"+
    "\1\264\1\10\1\0\4\10\14\0\1\10\4\0\4\10"+
    "\1\265\3\10\1\251\6\10\1\266\7\10\1\251\1\266"+
    "\1\10\1\0\4\10\14\0\1\10\4\0\4\10\1\267"+
    "\3\10\1\270\3\10\1\271\7\10\1\261\2\10\1\270"+
    "\2\10\1\0\4\10\14\0\1\10\4\0\1\10\1\272"+
    "\1\273\1\10\1\274\1\275\2\10\1\276\1\272\1\277"+
    "\1\10\1\300\1\301\1\10\1\302\1\303\1\10\1\304"+
    "\1\10\1\261\2\10\1\276\1\302\1\10\1\0\4\10"+
    "\14\0\1\10\4\0\4\10\1\305\1\275\6\10\1\306"+
    "\15\10\1\0\4\10\14\0\1\10\4\0\2\10\1\307"+
    "\1\10\1\310\5\10\1\311\4\10\1\260\10\10\1\260"+
    "\1\10\1\0\4\10\14\0\1\10\4\0\4\10\1\312"+
    "\12\10\1\312\10\10\1\312\1\10\1\0\4\10\14\0"+
    "\1\10\4\0\4\10\1\313\7\10\1\313\15\10\1\0"+
    "\4\10\14\0\1\10\4\0\1\10\1\314\2\10\1\315"+
    "\4\10\1\314\2\10\1\316\15\10\1\0\4\10\14\0"+
    "\1\10\4\0\4\10\1\317\1\254\16\10\1\317\5\10"+
    "\1\0\4\10\14\0\1\10\4\0\4\10\1\303\13\10"+
    "\1\303\11\10\1\0\4\10\14\0\1\10\4\0\1\10"+
    "\1\320\2\10\1\321\4\10\1\320\3\10\1\301\14\10"+
    "\1\0\4\10\14\0\1\10\4\0\4\10\1\322\3\10"+
    "\1\322\16\10\1\322\2\10\1\0\4\10\14\0\1\10"+
    "\4\0\4\10\1\304\15\10\1\304\7\10\1\0\4\10"+
    "\14\0\1\10\4\0\1\10\1\320\2\10\1\323\1\275"+
    "\3\10\1\320\1\263\1\10\1\306\15\10\1\0\4\10"+
    "\14\0\1\10\4\0\1\10\1\320\2\10\1\320\4\10"+
    "\1\320\20\10\1\0\4\10\14\0\1\10\4\0\4\10"+
    "\1\324\3\10\1\324\16\10\1\324\2\10\1\0\4\10"+
    "\14\0\1\10\4\0\4\10\1\325\3\10\1\324\6\10"+
    "\1\312\7\10\1\324\1\312\1\10\1\0\4\10\14\0"+
    "\1\10\4\0\4\10\1\326\7\10\1\327\1\301\14\10"+
    "\1\0\4\10\14\0\1\10\4\0\4\10\1\316\7\10"+
    "\1\316\15\10\1\0\4\10\14\0\1\10\4\0\4\10"+
    "\1\301\10\10\1\301\14\10\1\0\4\10\14\0\1\10"+
    "\4\0\4\10\1\266\12\10\1\266\10\10\1\266\1\10"+
    "\1\0\4\10\14\0\1\10\4\0\4\10\1\330\3\10"+
    "\1\251\11\10\1\304\4\10\1\251\2\10\1\0\4\10"+
    "\14\0\1\10\4\0\4\10\1\331\3\10\1\322\1\10"+
    "\1\311\5\10\1\303\6\10\1\322\2\10\1\0\4\10"+
    "\14\0\1\10\4\0\4\10\1\311\5\10\1\311\17\10"+
    "\1\0\4\10\14\0\1\10\4\0\1\10\1\314\2\10"+
    "\1\332\4\10\1\314\12\10\1\261\5\10\1\0\4\10"+
    "\14\0\1\10\4\0\1\10\1\314\2\10\1\314\4\10"+
    "\1\314\20\10\1\0\4\10\14\0\1\10\4\0\2\10"+
    "\1\307\1\10\1\333\12\10\1\260\10\10\1\260\1\10"+
    "\1\0\4\10\14\0\1\10\4\0\4\10\1\271\7\10"+
    "\1\271\15\10\1\0\4\10\14\0\1\10\4\0\4\10"+
    "\1\334\7\10\1\271\7\10\1\317\5\10\1\0\4\10"+
    "\14\0\1\10\4\0\4\10\1\317\17\10\1\317\5\10"+
    "\1\0\4\10\14\0\1\10\4\0\4\10\1\335\3\10"+
    "\1\335\16\10\1\335\2\10\1\0\4\10\14\0\1\10"+
    "\4\0\4\10\1\336\5\10\1\311\5\10\1\303\11\10"+
    "\1\0\4\10\14\0\1\10\4\0\4\10\1\312\12\10"+
    "\1\312\4\10\1\317\3\10\1\312\1\10\1\0\4\10"+
    "\14\0\1\10\4\0\4\10\1\251\3\10\1\251\16\10"+
    "\1\337\2\10\1\0\4\10\14\0\1\10\4\0\2\10"+
    "\1\307\1\10\1\307\25\10\1\0\4\10\14\0\1\10"+
    "\4\0\4\10\1\340\7\10\1\306\5\10\1\304\7\10"+
    "\1\0\4\10\14\0\1\10\4\0\4\10\1\306\7\10"+
    "\1\306\15\10\1\0\4\10\14\0\1\10\4\0\4\10"+
    "\2\275\11\10\1\264\10\10\1\264\1\10\1\0\4\10"+
    "\14\0\1\10\4\0\4\10\2\275\24\10\1\0\4\10"+
    "\14\0\1\10\4\0\4\10\1\266\3\10\1\335\6\10"+
    "\1\266\7\10\1\335\1\266\1\10\1\0\4\10\14\0"+
    "\1\10\4\0\4\10\1\341\3\10\1\324\3\10\1\271"+
    "\12\10\1\324\2\10\1\0\4\10\14\0\1\10\4\0"+
    "\1\10\1\314\2\10\1\342\4\10\1\314\3\10\1\301"+
    "\14\10\1\0\4\10\14\0\1\10\4\0\4\10\1\322"+
    "\3\10\1\322\3\10\1\316\12\10\1\322\2\10\1\0"+
    "\4\10\14\0\1\10\4\0\4\10\1\343\12\10\1\343"+
    "\10\10\1\343\1\10\1\0\4\10\14\0\1\10\4\0"+
    "\4\10\1\344\17\10\1\344\5\10\1\0\4\10\14\0"+
    "\1\10\4\0\4\10\1\345\10\10\1\346\1\10\1\343"+
    "\4\10\1\344\3\10\1\343\1\10\1\0\4\10\14\0"+
    "\1\10\4\0\4\10\1\346\10\10\1\346\14\10\1\0"+
    "\4\10\14\0\1\10\4\0\4\10\1\347\10\10\1\346"+
    "\6\10\1\344\5\10\1\0\4\10\14\0\1\10\4\0"+
    "\4\10\1\350\20\10\1\350\4\10\1\0\4\10\14\0"+
    "\1\10\4\0\4\10\1\351\7\10\1\351\15\10\1\0"+
    "\4\10\14\0\1\10\4\0\2\10\1\352\1\10\1\353"+
    "\12\10\1\343\10\10\1\343\1\10\1\0\4\10\14\0"+
    "\1\10\4\0\2\10\1\352\1\10\1\352\25\10\1\0"+
    "\4\10\14\0\1\10\4\0\4\10\1\354\12\10\1\354"+
    "\10\10\1\354\1\10\1\0\4\10\14\0\1\10\4\0"+
    "\4\10\1\355\12\10\1\355\10\10\1\355\1\10\1\0"+
    "\4\10\14\0\1\10\4\0\4\10\1\356\12\10\1\356"+
    "\10\10\1\356\1\10\1\0\4\10\14\0\1\10\4\0"+
    "\4\10\1\357\1\10\1\360\10\10\1\361\10\10\1\361"+
    "\1\10\1\0\4\10\14\0\1\10\4\0\4\10\1\362"+
    "\7\10\1\363\7\10\1\344\5\10\1\0\4\10\14\0"+
    "\1\10\4\0\2\10\1\364\1\10\1\365\1\10\1\360"+
    "\1\366\1\367\3\10\1\370\1\346\1\10\1\371\4\10"+
    "\1\344\1\350\1\10\1\367\1\371\1\10\1\0\4\10"+
    "\14\0\1\10\4\0\4\10\1\372\12\10\1\372\10\10"+
    "\1\372\1\10\1\0\4\10\14\0\1\10\4\0\4\10"+
    "\1\373\2\10\1\366\4\10\1\351\1\346\14\10\1\0"+
    "\4\10\14\0\1\10\4\0\2\10\1\374\1\10\1\375"+
    "\12\10\1\376\10\10\1\376\1\10\1\0\4\10\14\0"+
    "\1\10\4\0\4\10\1\367\3\10\1\367\16\10\1\367"+
    "\2\10\1\0\4\10\14\0\1\10\4\0\2\10\1\352"+
    "\1\10\1\377\20\10\1\350\4\10\1\0\4\10\14\0"+
    "\1\10\4\0\4\10\1\u0100\7\10\1\u0100\15\10\1\0"+
    "\4\10\14\0\1\10\4\0\4\10\1\u0101\12\10\1\u0101"+
    "\10\10\1\u0101\1\10\1\0\4\10\14\0\1\10\4\0"+
    "\4\10\1\363\7\10\1\363\15\10\1\0\4\10\14\0"+
    "\1\10\4\0\4\10\1\u0102\2\10\1\366\4\10\1\363"+
    "\10\10\1\350\4\10\1\0\4\10\14\0\1\10\4\0"+
    "\4\10\1\366\2\10\1\366\22\10\1\0\4\10\14\0"+
    "\1\10\4\0\2\10\1\374\1\10\1\374\25\10\1\0"+
    "\4\10\14\0\1\10\4\0\4\10\1\361\12\10\1\361"+
    "\10\10\1\361\1\10\1\0\4\10\14\0\1\10\4\0"+
    "\4\10\1\360\1\10\1\360\23\10\1\0\4\10\14\0"+
    "\1\10\4\0\4\10\1\u0103\1\10\1\360\1\10\1\367"+
    "\16\10\1\367\2\10\1\0\4\10\14\0\1\10\4\0"+
    "\4\10\1\u0104\1\10\1\360\5\10\1\351\2\10\1\u0101"+
    "\10\10\1\u0101\1\10\1\0\4\10\14\0\1\10\4\0"+
    "\2\10\1\374\1\10\1\u0105\3\10\1\367\16\10\1\367"+
    "\2\10\1\0\4\10\14\0\1\10\4\0\4\10\1\u0106"+
    "\7\10\1\u0100\2\10\1\343\10\10\1\343\1\10\1\0"+
    "\4\10\14\0\1\10\4\0\4\10\1\u0107\7\10\1\363"+
    "\10\10\1\350\4\10\1\0\4\10\14\0\1\10\4\0"+
    "\4\10\1\343\12\10\1\343\10\10\1\u0108\1\10\1\0"+
    "\4\10\14\0\1\10\4\0\4\10\1\u0109\7\10\1\u0100"+
    "\2\10\1\u0101\10\10\1\u0101\1\10\1\0\4\10\14\0"+
    "\1\10\4\0\4\10\1\u010a\3\10\1\367\6\10\1\361"+
    "\7\10\1\367\1\361\1\10\1\0\4\10\14\0\1\10"+
    "\4\0\3\10\2\u010b\24\10\1\u010b\1\0\4\10\14\0"+
    "\1\10\4\0\4\10\1\u010c\20\10\1\u010c\4\10\1\0"+
    "\4\10\14\0\1\10\4\0\3\10\1\u010b\1\u010d\3\10"+
    "\1\u010e\14\10\1\u010c\1\10\1\u010e\1\10\1\u010b\1\0"+
    "\4\10\14\0\1\10\4\0\4\10\1\u010e\3\10\1\u010e"+
    "\16\10\1\u010e\2\10\1\0\4\10\14\0\1\10\4\0"+
    "\4\10\1\u010d\3\10\1\u010e\14\10\1\u010c\1\10\1\u010e"+
    "\2\10\1\0\4\10\14\0\1\10\4\0\4\10\1\u010f"+
    "\12\10\1\u010f\10\10\1\u010f\1\10\1\0\4\10\14\0"+
    "\1\10\4\0\4\10\1\u0110\12\10\1\u0110\10\10\1\u0110"+
    "\1\10\1\0\4\10\14\0\1\10\4\0\4\10\1\u0111"+
    "\16\10\1\u0111\6\10\1\0\4\10\14\0\1\10\4\0"+
    "\3\10\1\u010b\1\u0111\16\10\1\u0111\5\10\1\u010b\1\0"+
    "\4\10\14\0\1\10\4\0\4\10\1\u0112\7\10\1\u0112"+
    "\15\10\1\0\4\10\14\0\1\10\4\0\4\10\1\u0113"+
    "\7\10\1\u0113\15\10\1\0\4\10\14\0\1\10\4\0"+
    "\4\10\1\u0111\10\10\1\u0114\5\10\1\u0111\6\10\1\0"+
    "\4\10\14\0\1\10\4\0\2\10\1\u0115\1\u010b\1\u0116"+
    "\3\10\1\u010e\3\10\1\u0117\1\u0114\1\10\1\u0118\2\10"+
    "\1\u0119\1\u0111\1\u011a\1\u010c\1\10\1\u010e\1\u0118\1\u010b"+
    "\1\0\4\10\14\0\1\10\4\0\4\10\1\u011a\17\10"+
    "\1\u011a\5\10\1\0\4\10\14\0\1\10\4\0\2\10"+
    "\1\u0115\1\10\1\u0115\25\10\1\0\4\10\14\0\1\10"+
    "\4\0\3\10\1\u010b\1\u011b\7\10\1\u0112\5\10\1\u0119"+
    "\6\10\1\u010b\1\0\4\10\14\0\1\10\4\0\3\10"+
    "\1\u010b\1\u011c\7\10\1\u0112\14\10\1\u010b\1\0\4\10"+
    "\14\0\1\10\4\0\4\10\1\u011d\3\10\1\u010e\6\10"+
    "\1\u0110\4\10\1\u011a\2\10\1\u010e\1\u0110\1\10\1\0"+
    "\4\10\14\0\1\10\4\0\4\10\1\u0114\10\10\1\u0114"+
    "\14\10\1\0\4\10\14\0\1\10\4\0\4\10\1\u011e"+
    "\10\10\1\u0114\4\10\1\u0119\7\10\1\0\4\10\14\0"+
    "\1\10\4\0\4\10\1\u0119\15\10\1\u0119\7\10\1\0"+
    "\4\10\14\0\1\10\4\0\4\10\1\u011f\12\10\1\u010f"+
    "\3\10\1\u0111\4\10\1\u010f\1\10\1\0\4\10\14\0"+
    "\1\10\4\0\4\10\1\u0120\12\10\1\u010f\4\10\1\u011a"+
    "\3\10\1\u010f\1\10\1\0\4\10\14\0\1\10\4\0"+
    "\2\10\1\u0115\1\10\1\u0121\7\10\1\u0113\15\10\1\0"+
    "\4\10\14\0\1\10\4\0\4\10\1\u0122\7\10\1\u0113"+
    "\2\10\1\u0110\2\10\1\u0119\5\10\1\u0110\1\10\1\0"+
    "\4\10\14\0\1\10\4\0\2\10\1\u0115\1\10\1\u0123"+
    "\10\10\1\u0114\14\10\1\0\4\10\14\0\1\10\4\0"+
    "\3\10\2\u010b\24\10\1\u0124\1\0\4\10\14\0\1\10"+
    "\4\0\4\10\1\u0125\5\10\1\u0125\17\10\1\0\4\10"+
    "\14\0\1\10\4\0\4\10\1\u0126\2\10\1\u0126\22\10"+
    "\1\0\4\10\14\0\1\10\4\0\2\10\1\u0127\1\10"+
    "\1\u0127\25\10\1\0\4\10\14\0\1\10\4\0\4\10"+
    "\1\u0128\12\10\1\u0128\10\10\1\u0128\1\10\1\0\4\10"+
    "\14\0\1\10\4\0\4\10\1\u0129\1\10\1\u0129\23\10"+
    "\1\0\4\10\14\0\1\10\4\0\2\10\1\u0127\1\10"+
    "\1\u012a\1\10\1\u0129\1\u0126\2\10\1\u0125\4\10\1\u0128"+
    "\4\10\1\u012b\3\10\1\u0128\1\10\1\0\4\10\14\0"+
    "\1\10\4\0\2\10\1\u0127\1\10\1\u012c\12\10\1\u0128"+
    "\10\10\1\u0128\1\10\1\0\4\10\14\0\1\10\4\0"+
    "\4\10\1\u012b\17\10\1\u012b\5\10\1\0\4\10\14\0"+
    "\1\10\4\0\2\10\1\u0127\1\10\1\u012d\17\10\1\u012b"+
    "\5\10\1\0\4\10\14\0\1\10\4\0\4\10\1\u012e"+
    "\1\10\1\u0129\10\10\1\u0128\10\10\1\u0128\1\10\1\0"+
    "\4\10\14\0\1\10\4\0\4\10\1\u012b\12\10\1\u0128"+
    "\4\10\1\u012b\3\10\1\u0128\1\10\1\0\4\10\14\0"+
    "\1\10\4\0\32\10\1\u012f\4\10\14\0\1\10\4\0"+
    "\4\10\1\u0130\2\10\1\u0130\22\10\1\0\4\10\14\0"+
    "\1\10\4\0\4\10\1\u0131\17\10\1\u0131\5\10\1\0"+
    "\4\10\14\0\1\10\4\0\4\10\1\u0132\17\10\1\u0132"+
    "\5\10\1\0\4\10\14\0\1\10\4\0\4\10\1\u0133"+
    "\2\10\1\u0130\14\10\1\u0134\5\10\1\0\4\10\22\0"+
    "\1\u0135\2\0\1\u0135\4\0\1\u0135\41\0\1\10\4\0"+
    "\4\10\1\u0136\12\10\1\u0136\10\10\1\u0136\1\10\1\0"+
    "\4\10\14\0\1\10\4\0\4\10\1\u0137\12\10\1\u0137"+
    "\10\10\1\u0137\1\10\1\0\4\10\25\0\1\u0138\11\0"+
    "\1\u0138\7\0\1\u0138\32\0\1\u0139\2\0\1\u0139\4\0"+
    "\1\u0139\52\0\1\u013a\3\0\1\u013a\16\0\1\u013a\34\0"+
    "\1\u013b\12\0\1\u013b\10\0\1\u013b\32\0\2\u013c\24\0"+
    "\1\u013c\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10512];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\1\11\25\1\1\11"+
    "\1\1\7\11\2\1\2\11\1\0\73\1\2\11\310\1"+
    "\1\0\5\1\1\0\2\1\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[316];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    int jline = 0;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 62: 
          { jline = 0; lexeme=yytext(); return tk_writeline;
          }
        case 63: break;
        case 7: 
          { jline = 0; lexeme=yytext(); return tk_Suma;
          }
        case 64: break;
        case 46: 
          { jline = 0; lexeme=yytext(); return tk_while;
          }
        case 65: break;
        case 55: 
          { jline = 0; lexeme=yytext(); return tk_public;
          }
        case 66: break;
        case 19: 
          { jline = 0; lexeme=yytext(); return tk_if;
          }
        case 67: break;
        case 30: 
          { jline = 0; lexeme=yytext(); return tk_for;
          }
        case 68: break;
        case 5: 
          { jline = 0; lexeme=yytext(); return tk_Identificador;
          }
        case 69: break;
        case 53: 
          { jline = 0; lexeme=yytext(); return tk_module;
          }
        case 70: break;
        case 25: 
          { jline = 0; lexeme = yytext(); return tk_menorigual;
          }
        case 71: break;
        case 9: 
          { jline = 0; lexeme=yytext(); return tk_Multiplicacion;
          }
        case 72: break;
        case 2: 
          { jline = 0; lexeme=yytext(); return tk_Numero;
          }
        case 73: break;
        case 43: 
          { jline = 0; lexeme=yytext(); return tk_null;
          }
        case 74: break;
        case 37: 
          { jline = 0; lexeme=yytext(); return tk_like;
          }
        case 75: break;
        case 14: 
          { jline = 0; lexeme = yytext(); return tk_mayorque;
          }
        case 76: break;
        case 8: 
          { jline = 0; lexeme=yytext(); return tk_Resta;
          }
        case 77: break;
        case 1: 
          { jline = 0; return ERROR;
          }
        case 78: break;
        case 17: 
          { jline = 0; lexeme=yytext(); return tk_ParentesisC;
          }
        case 79: break;
        case 45: 
          { jline = 0; lexeme=yytext(); return tk_then;
          }
        case 80: break;
        case 32: 
          { jline = 0; lexeme=yytext(); return tk_end;
          }
        case 81: break;
        case 59: 
          { jline = 0; lexeme=yytext(); return tk_boolean;
          }
        case 82: break;
        case 47: 
          { jline = 0; lexeme=yytext(); return tk_write;
          }
        case 83: break;
        case 44: 
          { jline = 0; lexeme=yytext(); return tk_read;
          }
        case 84: break;
        case 38: 
          { jline = 0; lexeme=yytext(); return tk_else;
          }
        case 85: break;
        case 12: 
          { jline = 0; lexeme=yytext(); return tk_ampersant;
          }
        case 86: break;
        case 34: 
          { jline = 0; lexeme=yytext(); return tk_xor;
          }
        case 87: break;
        case 22: 
          { jline = 0; lexeme=yytext(); return tk_or;
          }
        case 88: break;
        case 6: 
          { jline = 0; lexeme=yytext(); return tk_Igual;
          }
        case 89: break;
        case 57: 
          { jline = 0; lexeme=yytext(); return tk_integer;
          }
        case 90: break;
        case 15: 
          { jline = 0; lexeme = yytext(); return tk_menorque;
          }
        case 91: break;
        case 10: 
          { jline = 0; lexeme=yytext(); return tk_Division;
          }
        case 92: break;
        case 28: 
          { jline = 0; lexeme=yytext(); return tk_mod;
          }
        case 93: break;
        case 60: 
          { jline = 0; lexeme=yytext(); return tk_function;
          }
        case 94: break;
        case 58: 
          { jline = 0; lexeme=yytext(); return tk_cs;
          }
        case 95: break;
        case 42: 
          { jline = 0; lexeme=yytext(); return tk_next;
          }
        case 96: break;
        case 41: 
          { jline = 0; lexeme=yytext(); return tk_loop;
          }
        case 97: break;
        case 39: 
          { jline = 0; lexeme=yytext(); return tk_exit;
          }
        case 98: break;
        case 29: 
          { jline = 0; lexeme=yytext(); return tk_dim;
          }
        case 99: break;
        case 48: 
          { jline = 0; lexeme = yytext(); return tk_false;
          }
        case 100: break;
        case 33: 
          { jline = 0; lexeme=yytext(); return tk_and;
          }
        case 101: break;
        case 31: 
          { jline = 0; lexeme=yytext(); return tk_not;
          }
        case 102: break;
        case 21: 
          { jline = 0; lexeme=yytext(); return tk_do;
          }
        case 103: break;
        case 13: 
          { jline = 0; lexeme=yytext(); return tk_punto;
          }
        case 104: break;
        case 20: 
          { jline = 0; lexeme=yytext(); return tk_as;
          }
        case 105: break;
        case 23: 
          { jline = 0; lexeme=yytext(); return tk_to;
          }
        case 106: break;
        case 50: 
          { jline = 0; lexeme=yytext(); return tk_byval;
          }
        case 107: break;
        case 26: 
          { jline = 0; lexeme=yytext(); return tk_valorString;
          }
        case 108: break;
        case 35: 
          { jline = 0; lexeme=yytext(); return tk_step;
          }
        case 109: break;
        case 54: 
          { jline = 0; lexeme=yytext(); return tk_elseif;
          }
        case 110: break;
        case 40: 
          { jline = 0; lexeme = yytext(); return tk_true;
          }
        case 111: break;
        case 36: 
          { jline = 0; lexeme=yytext(); return tk_main;
          }
        case 112: break;
        case 4: 
          { jline++;
        if(jline == 1){
            return tk_Linea;
        }
          }
        case 113: break;
        case 51: 
          { jline = 0; lexeme=yytext(); return tk_sys;
          }
        case 114: break;
        case 11: 
          { jline = 0; lexeme=yytext(); return tk_Coma;
          }
        case 115: break;
        case 18: 
          { jline = 0; lexeme=yytext(); return tk_comentario;
          }
        case 116: break;
        case 56: 
          { jline = 0; lexeme=yytext(); return tk_return;
          }
        case 117: break;
        case 49: 
          { jline = 0; lexeme=yytext(); return tk_until;
          }
        case 118: break;
        case 27: 
          { jline = 0; lexeme=yytext(); return tk_sub;
          }
        case 119: break;
        case 52: 
          { jline = 0; lexeme=yytext(); return tk_String;
          }
        case 120: break;
        case 24: 
          { jline = 0; lexeme = yytext(); return tk_mayorigual;
          }
        case 121: break;
        case 61: 
          { jline = 0; lexeme=yytext(); return tk_structure;
          }
        case 122: break;
        case 16: 
          { jline = 0; lexeme=yytext(); return tk_ParentesisA;
          }
        case 123: break;
        case 3: 
          { 
          }
        case 124: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
