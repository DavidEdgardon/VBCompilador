
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Gramar extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Gramar() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Gramar(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Gramar(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\004\000\002\002\006\000\002\003" +
    "\011\000\002\003\013\000\002\003\005\000\002\004\004" +
    "\000\002\005\005\000\002\005\002\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\006\005\000\002" +
    "\006\007\000\002\027\004\000\002\027\002\000\002\010" +
    "\003\000\002\010\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\014\003\000" +
    "\002\014\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\015" +
    "\005\000\002\025\003\000\002\025\003\000\002\017\005" +
    "\000\002\017\005\000\002\017\003\000\002\020\012\000" +
    "\002\022\004\000\002\022\003\000\002\023\005\000\002" +
    "\016\003\000\002\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\063\000\004\037\004\001\002\000\004\040\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\074\010\001\002\000\006\036\013\037\012\001" +
    "\002\000\004\002\000\001\002\000\006\034\016\035\017" +
    "\001\002\000\004\074\014\001\002\000\002\001\002\000" +
    "\004\002\ufffd\001\002\000\004\074\057\001\002\000\004" +
    "\074\020\001\002\000\004\057\021\001\002\000\006\064" +
    "\024\074\022\001\002\000\004\065\055\001\002\000\004" +
    "\060\053\001\002\000\004\074\032\001\002\000\006\060" +
    "\ufffa\061\026\001\002\000\006\064\024\074\022\001\002" +
    "\000\004\060\ufffc\001\002\000\006\060\ufffa\061\026\001" +
    "\002\000\004\060\ufffb\001\002\000\004\065\033\001\002" +
    "\000\012\012\034\013\037\014\036\015\035\001\002\000" +
    "\010\056\uffef\060\uffef\061\uffef\001\002\000\010\056\uffee" +
    "\060\uffee\061\uffee\001\002\000\010\056\ufff0\060\ufff0\061" +
    "\ufff0\001\002\000\010\056\uffed\060\uffed\061\uffed\001\002" +
    "\000\010\056\042\060\ufff3\061\ufff3\001\002\000\006\060" +
    "\ufff5\061\ufff5\001\002\000\014\032\043\033\050\073\052" +
    "\074\044\075\047\001\002\000\006\060\ufff2\061\ufff2\001" +
    "\002\000\006\060\uffe4\061\uffe4\001\002\000\006\060\ufff9" +
    "\061\ufff9\001\002\000\006\060\ufff4\061\ufff4\001\002\000" +
    "\006\060\uffe3\061\uffe3\001\002\000\006\060\ufff1\061\ufff1" +
    "\001\002\000\006\060\ufff8\061\ufff8\001\002\000\006\060" +
    "\ufff7\061\ufff7\001\002\000\002\001\002\000\004\002\uffff" +
    "\001\002\000\012\012\034\013\037\014\036\015\035\001" +
    "\002\000\006\060\ufff6\061\ufff6\001\002\000\004\057\060" +
    "\001\002\000\006\064\024\074\022\001\002\000\004\060" +
    "\062\001\002\000\004\065\063\001\002\000\012\012\034" +
    "\013\037\014\036\015\035\001\002\000\002\001\002\000" +
    "\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\063\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\022\006\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\026\001\001\000" +
    "\004\006\027\001\001\000\002\001\001\000\004\005\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\040\001\001\000" +
    "\002\001\001\000\010\010\044\025\050\026\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\053\001\001\000" +
    "\002\001\001\000\004\007\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\060\006\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\063\001\001" +
    "\000\004\011\064\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Gramar$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Gramar$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Gramar$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Gramar$actions {
  private final Gramar parser;

  /** Constructor */
  CUP$Gramar$actions(Gramar parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Gramar$do_action_part00000000(
    int                        CUP$Gramar$act_num,
    java_cup.runtime.lr_parser CUP$Gramar$parser,
    java.util.Stack            CUP$Gramar$stack,
    int                        CUP$Gramar$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Gramar$result;

      /* select the action based on the action number */
      switch (CUP$Gramar$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Gramar$stack.elementAt(CUP$Gramar$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Gramar$stack.elementAt(CUP$Gramar$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Gramar$stack.elementAt(CUP$Gramar$top-1)).value;
		RESULT = start_val;
              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Gramar$stack.elementAt(CUP$Gramar$top-1)), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Gramar$parser.done_parsing();
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= tk_public tk_module tk_Identificador OPCPROCESO 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Gramar$stack.elementAt(CUP$Gramar$top-3)), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // OPCPROCESO ::= tk_public tk_sub tk_Identificador tk_ParentesisA PARAMETROS tk_ParentesisC CUERPOPRO 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("OPCPROCESO",1, ((java_cup.runtime.Symbol)CUP$Gramar$stack.elementAt(CUP$Gramar$top-6)), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OPCPROCESO ::= tk_public tk_function tk_Identificador tk_ParentesisA PARAMETROS tk_ParentesisC tk_as TIPOD CUERPOFUNC 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("OPCPROCESO",1, ((java_cup.runtime.Symbol)CUP$Gramar$stack.elementAt(CUP$Gramar$top-8)), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OPCPROCESO ::= tk_structure tk_Identificador CUERPOSTRUC 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("OPCPROCESO",1, ((java_cup.runtime.Symbol)CUP$Gramar$stack.elementAt(CUP$Gramar$top-2)), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PARAMETROS ::= VARIABLE PARAMETROSPRIMA 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("PARAMETROS",2, ((java_cup.runtime.Symbol)CUP$Gramar$stack.elementAt(CUP$Gramar$top-1)), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PARAMETROSPRIMA ::= tk_Coma VARIABLE PARAMETROSPRIMA 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("PARAMETROSPRIMA",3, ((java_cup.runtime.Symbol)CUP$Gramar$stack.elementAt(CUP$Gramar$top-2)), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PARAMETROSPRIMA ::= 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("PARAMETROSPRIMA",3, ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VALOR ::= OPCBOOL 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("VALOR",20, ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VALOR ::= iDNUM 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("VALOR",20, ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VALOR ::= tk_valorString 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("VALOR",20, ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VARIABLE ::= tk_Identificador tk_as TIPOD 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("VARIABLE",4, ((java_cup.runtime.Symbol)CUP$Gramar$stack.elementAt(CUP$Gramar$top-2)), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VARIABLE ::= tk_dim tk_Identificador tk_as TIPOD VARIABLEPRIMA 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("VARIABLE",4, ((java_cup.runtime.Symbol)CUP$Gramar$stack.elementAt(CUP$Gramar$top-4)), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VARIABLEPRIMA ::= tk_Igual VALOR 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("VARIABLEPRIMA",21, ((java_cup.runtime.Symbol)CUP$Gramar$stack.elementAt(CUP$Gramar$top-1)), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VARIABLEPRIMA ::= 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("VARIABLEPRIMA",21, ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OPCBOOL ::= tk_true 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("OPCBOOL",6, ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OPCBOOL ::= tk_false 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("OPCBOOL",6, ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPOD ::= tk_String 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("TIPOD",5, ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPOD ::= tk_integer 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("TIPOD",5, ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPOD ::= tk_byval 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("TIPOD",5, ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPOD ::= tk_boolean 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("TIPOD",5, ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CICLOS ::= SINTAXWHILE 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("CICLOS",10, ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CICLOS ::= SINTAXFOR 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("CICLOS",10, ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPCRELACIONALES ::= tk_mayorque 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("OPCRELACIONALES",15, ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPCRELACIONALES ::= tk_mayorigual 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("OPCRELACIONALES",15, ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPCRELACIONALES ::= tk_menorque 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("OPCRELACIONALES",15, ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPCRELACIONALES ::= tk_menorigual 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("OPCRELACIONALES",15, ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPCRELACIONALES ::= tk_Igual 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("OPCRELACIONALES",15, ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SINTAXIF ::= tk_if CONDICION tk_then 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("SINTAXIF",11, ((java_cup.runtime.Symbol)CUP$Gramar$stack.elementAt(CUP$Gramar$top-2)), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // iDNUM ::= tk_Identificador 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("iDNUM",19, ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // iDNUM ::= tk_Numero 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("iDNUM",19, ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONDICION ::= iDNUM OPCRELACIONALES iDNUM 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$Gramar$stack.elementAt(CUP$Gramar$top-2)), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONDICION ::= iDNUM OPCRELACIONALES OPCBOOL 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$Gramar$stack.elementAt(CUP$Gramar$top-2)), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONDICION ::= OPCBOOL 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SINTAXFOR ::= tk_for tk_Identificador tk_Igual tk_Numero tk_to tk_Numero tk_step AUMDEC 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("SINTAXFOR",14, ((java_cup.runtime.Symbol)CUP$Gramar$stack.elementAt(CUP$Gramar$top-7)), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AUMDEC ::= tk_Resta tk_Numero 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("AUMDEC",16, ((java_cup.runtime.Symbol)CUP$Gramar$stack.elementAt(CUP$Gramar$top-1)), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AUMDEC ::= tk_Numero 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("AUMDEC",16, ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SINTAXWHILE ::= tk_do tk_while CONDICION 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("SINTAXWHILE",17, ((java_cup.runtime.Symbol)CUP$Gramar$stack.elementAt(CUP$Gramar$top-2)), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIAIF ::= CICLOS 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("SENTENCIAIF",12, ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIAIF ::= SINTAXIF 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("SENTENCIAIF",12, ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIAIF ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$Gramar$result = parser.getSymbolFactory().newSymbol("SENTENCIAIF",12, ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Gramar$stack.peek()), RESULT);
            }
          return CUP$Gramar$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Gramar$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Gramar$do_action(
    int                        CUP$Gramar$act_num,
    java_cup.runtime.lr_parser CUP$Gramar$parser,
    java.util.Stack            CUP$Gramar$stack,
    int                        CUP$Gramar$top)
    throws java.lang.Exception
    {
              return CUP$Gramar$do_action_part00000000(
                               CUP$Gramar$act_num,
                               CUP$Gramar$parser,
                               CUP$Gramar$stack,
                               CUP$Gramar$top);
    }
}

}
